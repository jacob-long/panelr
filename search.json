[{"path":[]},{"path":"/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team long.1377@osu.edu. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct/","code":""},{"path":"/articles/reshape.html","id":"from-wide-to-long","dir":"Articles","previous_headings":"","what":"From wide to long","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"experience, survey contractors (.e., people pay carry panel surveys) like provide data wide format. general rule, conversion data wide long much difficult inverse. preparing reshape data wide long format, ’ll need answer questions relating column/variable names distinguish variable name time indicator: time indicators: numbers, letters, something else? time labels beginning end column name? prefixes suffixes surrounding time indicator (e.g., name like W1_variable prefix (W) suffix (_)). One key assumption variables labeled pattern Q1_W1, Q1_W2, refer measure different times. ’ve encountered datasets Q1 might refer different measure time point problem can handled automated way. warning way, let’s look couple examples.","code":""},{"path":"/articles/reshape.html","id":"wave-indicators-at-the-end-of-variable-names","dir":"Articles","previous_headings":"From wide to long","what":"Wave indicators at the end of variable names","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"Let’s return wide data looked earlier. can see time indicators end variable names (_W1), time indicators 1, 2, 3, prefix _W. mind, can use long_panel() convert data long format. Perfect! first argument, w, wide data. prefix self-explanatory. begin end refer range time indicators, since consecutive. can instead use periods = c(1, 2, 3) prefer. ’s especially true non-consecutive time indicators like biannual survey uses year indicator, like periods = c(1990, 1992, 1994).","code":"long_panel(wide, prefix = \"_W\", begin = 1, end = 3, label_location = \"end\")"},{"path":"/articles/reshape.html","id":"comparing-with-base-r","dir":"Articles","previous_headings":"From wide to long","what":"Comparing with base R","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"note base R function, reshape() can work situation without making pull hair much: can see frustrating many variables — wouldn’t unusual hundreds columns wide format, variables vary time (e.g., race). Truth told, long_panel() uses reshape() internally, lot processing. options include reshape2 tidyr packages, purpose-built panel setting therefore can learning curve avoid data end bit long.","code":"reshape(as.data.frame(wide), sep = \"_W\", times = c(1, 2, 3), direction = \"long\",         varying = c(\"Q1_W1\", \"Q1_W2\", \"Q1_W3\", \"Q2_W1\", \"Q2_W2\", \"Q2_W3\"))"},{"path":"/articles/reshape.html","id":"a-more-challenging-example","dir":"Articles","previous_headings":"From wide to long","what":"A more challenging example","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"’s wide dataset usually trickier format handle due limitations reshape(). Key characteristics: Wave indicators beginning variable names. time indicators letters, C. prefix (W) suffix (_). don’t recognize use function properly, notice case Q2 measured times C. can add considerable difficulty trying reshape data “hand.” Just looking . Note panel_data objects must ordered wave variable, long_data() understands order letters handles . missingness Q2 design, since wasn’t measured wave B. Another issue can come treatment constants — , variables change time. best wide data come labeled way makes clear constants constants. instance, variable signifying race wouldn’t called race_W1, instead just race. long_panel() automatically checks data variables labeled vary time actually . instance, data start looking like : Can easily end shaped like : obviously just wide data marked race wave label, doesn’t mean unknown waves. ’ll get right result long_panel():","code":"long_panel(wide, prefix = \"W\", suffix = \"_\", label_location = \"beginning\",            begin = \"A\", end = \"C\") long_panel(wide, prefix = \"_W\", label_location = \"end\", begin = 1, end = 3)"},{"path":"/articles/reshape.html","id":"other-details","dir":"Articles","previous_headings":"From wide to long","what":"Other details","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"ID variable wide data, can pass name variable long_panel() id argument, \"id\" default. variable name give id, one created. can also choose name wave variable via wave, \"wave\" default. can also choose output long_panel() panel_data object setting as_panel_data FALSE.","code":""},{"path":"/articles/reshape.html","id":"advanced-options","dir":"Articles","previous_headings":"From wide to long","what":"Advanced options","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"options available tougher cases. instance, use.regex TRUE, arguments prefix suffix treated regular expressions complicated patterns. Internally, time-varying variables detected presence prefix, one time periods, suffix variable name. “root” variable without indicator whatever left. Sometimes, though, can cause false matches. ’s example encountered. wide data looked like : ID variable called CaseID periods — , B, C — labeled beginning column names. Following earlier examples, confuse long_panel(): See happened? Consent variable wide data looked just like constant variable measured time point C. isn’t end world, errors like can confusing damaging scenarios. Fortunately, knew labeling time-varying variables told long_panel(). Yes, /B/C beginning prefix/suffix, also time-varying item number comes /B/C. long_panel() offers argument match situations like . regular expression used match capture variable name sans time indicator. default, match \".*\", meaning character number times. reflect know data, change \"\\\\d+.*\", meaning least one digit following number characters. Now rightly ignores Consent variable lacks time indicator. general, long_panel() tries protect use even know use regular expressions, sometimes ’s way around .","code":"long_panel(wide, begin = \"A\", end = \"C\", label_location = \"beginning\", id = \"CaseID\") long_panel(wide, begin = \"A\", end = \"C\", label_location = \"beginning\",             id = \"CaseID\", match = \"\\\\d+.*\")"},{"path":"/articles/reshape.html","id":"from-long-to-wide","dir":"Articles","previous_headings":"","what":"From long to wide","title":"Reshaping panel data with `long_panel()` and `widen_panel()`","text":"widen_panel(), might expect, opposite long_panel(). generally easier operation, thankfully. widen_panel() expects panel_data object. long data aren’t format, ’s easy enough just pass panel_data(). go example, let’s take look long data. Okay, ID variable (person), wave variable (time), two time-varying variables (Q1 Q2), time-invariant variable (race). difficulty conceptually automatically know, without domain knowledge substantive meaning variables, ones vary time don’t. simply matter widen_panel() checking variance (using panelr function are_varying()). Note wide datasets, many individuals, can take little happen. Pretty much need worry want label wide data. default separator argument \"_\". two arguments. varying lets specify variables long data vary time. can save time compared widen_panel() check , course requires pass variable names along can work ’s worth times. ignore.attributes deals scenario started wide data, used long_panel() convert long format, now want convert back wide format. long_panel() stores information data frame variables vary time don’t checked . ’ve made changes think something went wrong, can set ignore.attributes TRUE force checks .","code":"widen_panel(long_data, separator = \"_\")"},{"path":"/articles/wbm.html","id":"panel_data-frames","dir":"Articles","previous_headings":"","what":"panel_data frames","title":"Introduction to the `panelr` package","text":"Check vignette lot detail take raw data reshape panel_data format. ’s short version, using example data provided package. data come subset young women surveyed part National Longitudinal Survey Youth starting 1979. teen_poverty data come “wide” format, meaning one row per respondent repeated measures separate column wave. need convert “long” format, one row respondent wave 5-wave survey. ’ll use long_panel() . Now panel_data object! special version tibble, special kind data.frame. panel_data objects work hard make sure never accidentally drop variables identifiers respondent indicators wave row corresponds . panel_data objects also try stay order ID wave. Note raw data already long format, can use panel_data() function convert panel_data format. panel_data frames designed work tidyverse packages, particularly dplyr. used inside mutate(), functions like lag() work properly taking previous value specific respondent. ever need something easier “regular” data frame, can just use unpanel() function convert panel_data frame back normal.","code":"## # A tibble: 1,151 × 28 ##       id  pov1 mother1 spouse1 inschool1 hours1  pov2 mother2 spouse2 inschool2 ##    <dbl> <dbl>   <dbl>   <dbl>     <dbl>  <dbl> <dbl>   <dbl>   <dbl>     <dbl> ##  1    22     1       0       0         1     21     0       0       0         1 ##  2    75     0       0       0         1      8     0       0       0         1 ##  3    92     0       0       0         1     30     0       0       0         1 ##  4    96     0       0       0         0     19     1       1       0         0 ##  5   141     0       0       0         1      0     0       0       0         1 ##  6   161     0       0       0         1      0     0       0       0         1 ##  7   220     0       0       0         1      6     0       0       0         1 ##  8   229     0       0       0         1      0     1       0       0         1 ##  9   236     0       0       0         1      0     0       0       0         1 ## 10   240     0       0       0         1     18     1       0       0         1 ## # … with 1,141 more rows, and 18 more variables: hours2 <dbl>, pov3 <dbl>, ## #   mother3 <dbl>, spouse3 <dbl>, inschool3 <dbl>, hours3 <dbl>, pov4 <dbl>, ## #   mother4 <dbl>, spouse4 <dbl>, inschool4 <dbl>, hours4 <dbl>, age <dbl>, ## #   black <dbl>, pov5 <dbl>, mother5 <dbl>, spouse5 <dbl>, inschool5 <dbl>, ## #   hours5 <dbl> teen <- long_panel(teen_poverty, begin = 1, end = 5, label_location = \"end\") teen ## # Panel data:    5,755 × 9 ## # entities:      id [1151] ## # wave variable: wave [1, 2, 3, ... (5 waves)] ##    id     wave   age black   pov mother spouse inschool hours ##    <fct> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>    <dbl> <dbl> ##  1 22        1    16     0     1      0      0        1    21 ##  2 22        2    16     0     0      0      0        1    15 ##  3 22        3    16     0     0      0      0        1     3 ##  4 22        4    16     0     0      0      0        1     0 ##  5 22        5    16     0     0      0      0        1     0 ##  6 75        1    17     0     0      0      0        1     8 ##  7 75        2    17     0     0      0      0        1     0 ##  8 75        3    17     0     0      0      0        1     0 ##  9 75        4    17     0     0      0      0        1     4 ## 10 75        5    17     0     1      0      0        1     0 ## # … with 5,745 more rows data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t)"},{"path":[]},{"path":"/articles/wbm.html","id":"within-between-models","dir":"Articles","previous_headings":"Regression models","what":"Within-between models","title":"Introduction to the `panelr` package","text":"original motivation create package automate process fitting “within-” models, sometimes called “-within” “hybrid” models (see Allison, 2009; Bell & Jones, 2015). combine benefits econometricians call “fixed effects” models — robustness time-invariant confounding chief among — well call “random effects” models, allow inclusion time-invariant coefficients. Within-models include coefficients identical fixed effects equivalent, flexibility also include random effects time-invariant predictors (noticed Mundlak, 1978). fit via multilevel models allow nice possibilities like inclusion random slopes generalized linear model specifications. , ’ll give somewhat technical description models. just want look estimate R, skip ahead next mini-section. Note fixed effects models can fit using individual demeaning. , can subtract entity’s mean predictor dependent variable fit model via OLS equivalent -called least squares dummy variable approach (dummy variables every entity ID included predictors). Let’s get bit technical. entities \\(= 1, ..., n\\) measured times \\(t = 1, ..., T\\). dependent variable \\(y_{}\\), variable \\(y\\) individual \\(\\) time \\(t\\). predictors vary time \\(x_{}\\), variables vary time \\(z_i\\), variables measure vary time \\(\\alpha_i\\) well random error \\(\\epsilon_{}\\) fixed effects model, , looks like : \\[ y_{} = \\mu_t + \\beta_1x_{} + \\gamma z_i + \\alpha_i + \\epsilon_{} \\] Although \\(\\alpha_i\\) observed, can estimated including dummy variable \\(\\). \\(\\gamma\\) undefined \\(z_i\\) perfectly collinear \\(\\alpha_i\\) dummy variables. individual-mean-centered version fixed effects models based calculating mean \\(y\\) \\(x\\) \\(\\) — \\(\\bar{y_i}\\) \\(\\bar{x_i}\\) subtracting \\(y_{}\\) \\(x_{}\\). model can expressed like , including \\(\\bar{z_i}\\) \\(\\bar{\\alpha_i}\\) demonstration: \\[ y_{} - \\bar{y_i} = \\mu_t + \\beta_1(x_{} - \\bar{x_i}) + (z_i - \\bar{z_i} = 0) + (\\alpha_i - \\bar{\\alpha_i} = 0) + (\\epsilon_{} - \\bar{\\epsilon_i}) \\] de-meaning everything, time-invariant variables drop : \\[ y_{} - \\bar{y_i} = \\mu_t + \\beta_1(x_{} - \\bar{x_i}) + (\\epsilon_{} - \\bar{\\epsilon_i}) \\] often called “within” estimator. can take de-meaned variables fit OLS regression get valid estimates (adjustments standard errors). can also something slightly different get results multilevel models. Take , example: \\[ y_{} = \\beta_{0i} + \\beta_1(x_{} - \\bar{x_i}) + (\\epsilon_{} - \\bar{\\epsilon_i}) \\] \\(\\beta_{0i}\\) random intercept estimated \\(\\). equivalent subtracting \\(\\bar{y_i}\\) terms estimation \\(\\beta_1\\). multilevel modeling framework, can include time-invariant \\(z_i\\) well. Conceptually, basically included model predicting \\(\\beta_{0i}\\): \\[ \\beta_{0i} = \\beta_0 + \\gamma z_i + u_{0i} \\] \\(u_{0i}\\) random error model predicting \\(\\beta_{0i}\\). fact, can include \\(\\bar{x_i}\\) multilevel model well used just like \\(z_i\\): \\[ \\beta_{0i} = \\beta_0 + \\beta_2 \\bar{x_i} + \\gamma z_i +  u_{0i} \\] Now can substitute previous multilevel equation within-model: \\[ y_{} = \\beta_{0} + \\beta_1(x_{} - \\bar{x_i})   + \\beta_2 \\bar{x_i} + \\gamma z_i +  u_{0i} + \\epsilon_{} \\] \\(\\beta_1\\) interpretation fixed effects model, effects within-entity deviations \\(x\\) within-entity deviations \\(y\\). \\(\\beta_2\\) basically predicting \\(\\bar{y_i}\\), however, coefficients helpful predicting differences mean levels across entities. true \\(z_i\\). similar model call “contextual” model often interpreted (see, e.g., Raudenbush & Bryk, 2002). demean \\(x_i\\): \\[ y_{} = \\beta_{0} + \\beta_1 x_{} + \\beta_2 \\bar{x_i} + \\gamma z_i +  u_{0i} + \\epsilon_{} \\] Believe , \\(\\beta_1\\) unchanged model; \\(\\beta_2\\) changes. interpretation \\(\\beta_2\\) becomes difference within- -entities effects. significant coefficient \\(\\beta_2\\) means significant differences within- -entity effects. familiar, like variable--variable Hausman test. Substantively, \\(\\beta_2\\) often interpreted contextual effect. framework, can cross-level interactions, random slopes, generalized linear models, kinds interesting stuff.","code":""},{"path":"/articles/wbm.html","id":"a-note-on-interactions","dir":"Articles","previous_headings":"Regression models > Within-between models","what":"A note on interactions","title":"Introduction to the `panelr` package","text":"fixed effects framework, generally considered wrong operationalize interaction two time-varying variables (let’s call \\(w\\) \\(x\\)) taking product individual-demeaned forms. , supposed generate interaction term \\(xw_{}\\) : \\[ xw_{} = (x_{} - \\bar{x_{}}) \\times (w_{} - \\bar{w_i}) \\] Instead, conventional wisdom goes, first take product observed variables subtract individual-level mean product, like : \\[ xw_{} = x_{}w_{} - \\overline{xw}_i \\] \\(\\overline{xw}_i\\) can also expressed \\(\\frac{\\sum_{t=1}^{T_i}{x_{}w_{}}}{T_i}\\), sum products \\(\\) divided number time points \\(\\), \\(T_i\\). Giesselmann Schmidt-Catran (2020) show conventional method generating \\(xw_{}\\) unbiasedness individual terms . ’ll leave explain exactly , solution start first, wrong version \\(xw_{}\\), ’ll call \\(xw_{}^*\\), subtract mean : \\[ xw_{}^* = (x_{} - \\bar{x_{}}) \\times (w_{} - \\bar{w_i}) \\\\ xw_{} = xw_{}^* - \\overline{xw_i^*} \\] call “double-demeaning” approach interactions, contrast one-time demeaning conventional approach. default, wbm() calculates interactions via double-demeaning method. can change via interaction.style argument need results match software.","code":""},{"path":"/articles/wbm.html","id":"fitting-within-between-models","dir":"Articles","previous_headings":"Regression models","what":"Fitting within-between models","title":"Introduction to the `panelr` package","text":"workhorse function within-models wbm(), built top lme4’s lmerMod() glmerMod(). hard understand treat data estimate within-models, programming can challenge aren’t skilled R (whatever else might use) error-prone case. main thing know order use wbm() model formula works, ’s little different typical regression model. split 3 parts, different kind variable. part separated |. pattern like : start dependent variable left-hand side like normal comes next variables vary time. get within-entity estimates variables. Next time-invariant variables; -entity terms time-varying variables added automatically need try include . Finally, third part can specify cross-level interactions (.e., within-entity -entity/time-invariant) well additional random effects terms using lme4-style syntax. default, (1 | id) (whatever ID variable ) added internally random intercept need include . Let’s walk example wages data looked briefly earlier. ’ll predict logarithm wages (lwage) using weeks worked (wks), union membership (union), marital status (ms), blue (vs. white) collar job status (occ), black race (blk), female sex (fem). can see, output distinguishes within- -entity effects. see imean() around variable, -entity effect represented individual mean. , see seems wage penalty switching white collar blue collar work (occ) although married people earn (imean(ms)), just becoming married (ms) coincides drop earnings. also see boost earnings joining union (union). Maybe think timing marriage effect true effect occurs time period person becomes married. can ask lagged effect using lag(). Well doesn’t change direction estimate, also moved sufficiently close 0 can’t say much one way another. Keep mind stick linear models. Using family argument (just like glm()), can estimate logit (family = binomial), probit (family = binomal(link = \"probit\")), poisson (family = poisson), model families links needed.","code":"dependent ~ time_varying | time_invariant | cross_lev_interactions + (random_slopes | id) model <- wbm(lwage ~ wks + union + ms + occ | blk + fem, data = wages) summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 1-7 ## Dependent variable: lwage ## Model type: Linear mixed effects ## Specification: within-between ##  ## MODEL FIT: ## AIC = 2036.78, BIC = 2119.13 ## Pseudo-R² (fixed effects) = 0.27 ## Pseudo-R² (total) = 0.69 ## Entity ICC = 0.57 ##  ## WITHIN EFFECTS: ## ---------------------------------------------------- ##                Est.   S.E.   t val.      d.f.      p ## ----------- ------- ------ -------- --------- ------ ## wks            0.00   0.00     1.06   3566.00   0.29 ## union          0.06   0.03     2.53   3566.00   0.01 ## ms            -0.08   0.03    -2.57   3566.00   0.01 ## occ           -0.08   0.02    -3.32   3566.00   0.00 ## ---------------------------------------------------- ##  ## BETWEEN EFFECTS: ## ---------------------------------------------------------- ##                       Est.   S.E.   t val.     d.f.      p ## ------------------ ------- ------ -------- -------- ------ ## (Intercept)           6.30   0.20    30.85   588.00   0.00 ## imean(wks)            0.01   0.00     2.25   588.00   0.02 ## imean(union)          0.15   0.03     4.67   588.00   0.00 ## imean(ms)             0.17   0.05     3.07   588.00   0.00 ## imean(occ)           -0.41   0.03   -13.31   588.00   0.00 ## blk                  -0.15   0.05    -2.81   588.00   0.01 ## fem                  -0.32   0.06    -4.96   588.00   0.00 ## ---------------------------------------------------------- ##  ## p values calculated using Satterthwaite d.f. ##   ## RANDOM EFFECTS: ## ------------------------------------ ##   Group      Parameter    Std. Dev.  ## ---------- ------------- ----------- ##     id      (Intercept)    0.2992    ##  Residual                  0.2589    ## ------------------------------------ model <- wbm(lwage ~ wks + union + lag(ms) + occ | blk + fem, data = wages) summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 2-7 ## Dependent variable: lwage ## Model type: Linear mixed effects ## Specification: within-between ##  ## MODEL FIT: ## AIC = 1247.06, BIC = 1327.41 ## Pseudo-R² (fixed effects) = 0.28 ## Pseudo-R² (total) = 0.74 ## Entity ICC = 0.64 ##  ## WITHIN EFFECTS: ## ------------------------------------------------------ ##                  Est.   S.E.   t val.      d.f.      p ## ------------- ------- ------ -------- --------- ------ ## wks             -0.00   0.00    -1.43   2999.92   0.15 ## union            0.05   0.03     1.82   2991.78   0.07 ## lag(ms)         -0.04   0.03    -1.19   2971.04   0.23 ## occ             -0.06   0.02    -2.56   2992.05   0.01 ## ------------------------------------------------------ ##  ## BETWEEN EFFECTS: ## ------------------------------------------------------------ ##                         Est.   S.E.   t val.     d.f.      p ## -------------------- ------- ------ -------- -------- ------ ## (Intercept)             6.36   0.21    30.51   588.00   0.00 ## imean(wks)              0.01   0.00     2.25   588.00   0.02 ## imean(union)            0.15   0.03     4.48   588.00   0.00 ## imean(lag(ms))          0.15   0.06     2.80   588.01   0.01 ## imean(occ)             -0.41   0.03   -13.16   588.02   0.00 ## blk                    -0.15   0.05    -2.92   587.99   0.00 ## fem                    -0.33   0.06    -5.17   588.01   0.00 ## ------------------------------------------------------------ ##  ## p values calculated using Satterthwaite d.f. ##   ## RANDOM EFFECTS: ## ------------------------------------ ##   Group      Parameter    Std. Dev.  ## ---------- ------------- ----------- ##     id      (Intercept)    0.3068    ##  Residual                  0.2325    ## ------------------------------------"},{"path":"/articles/wbm.html","id":"growth-curves","dir":"Articles","previous_headings":"Regression models > Fitting within-between models","what":"Growth curves","title":"Introduction to the `panelr` package","text":"Now maybe want include effect time since wages tend go everyone, average, time. can just include time variable formula set use.wave TRUE. Including t wipes previously observed effects. Believe , just fit growth curve model! Now, might think people different trajectories. can include random slope, go third part formula. now latent growth curve model. general effect coefficients uncertainty attenuated estimates. ’s worth keeping mind sometimes wrong use growth curve model like think variables model cause time trend; think wages going people moving white collar work, including growth curve make harder see true effect occ.","code":"model <- wbm(lwage ~ wks + union + ms + occ | blk + fem, data = wages, use.wave = TRUE) summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 1-7 ## Dependent variable: lwage ## Model type: Linear mixed effects ## Specification: within-between ##  ## MODEL FIT: ## AIC = -1688.87, BIC = -1600.19 ## Pseudo-R² (fixed effects) = 0.44 ## Pseudo-R² (total) = 0.89 ## Entity ICC = 0.8 ##  ## WITHIN EFFECTS: ## ---------------------------------------------------- ##                Est.   S.E.   t val.      d.f.      p ## ----------- ------- ------ -------- --------- ------ ## wks            0.00   0.00     1.91   3565.00   0.06 ## union          0.03   0.02     2.29   3565.00   0.02 ## ms            -0.03   0.02    -1.71   3565.00   0.09 ## occ           -0.03   0.01    -1.81   3565.00   0.07 ## ---------------------------------------------------- ##  ## BETWEEN EFFECTS: ## ----------------------------------------------------------- ##                       Est.   S.E.   t val.      d.f.      p ## ------------------ ------- ------ -------- --------- ------ ## (Intercept)           5.91   0.20    28.95    588.63   0.00 ## imean(wks)            0.01   0.00     2.25    587.99   0.02 ## imean(union)          0.15   0.03     4.67    588.00   0.00 ## imean(ms)             0.17   0.05     3.07    588.00   0.00 ## imean(occ)           -0.41   0.03   -13.31    588.00   0.00 ## blk                  -0.15   0.05    -2.81    588.00   0.01 ## fem                  -0.32   0.06    -4.96    588.00   0.00 ## t                     0.10   0.00    81.29   3565.00   0.00 ## ----------------------------------------------------------- ##  ## p values calculated using Satterthwaite d.f. ##   ## RANDOM EFFECTS: ## ------------------------------------ ##   Group      Parameter    Std. Dev.  ## ---------- ------------- ----------- ##     id      (Intercept)    0.3094    ##  Residual                  0.1533    ## ------------------------------------ model <- wbm(lwage ~ wks + union + ms + occ | blk + fem | (t | id), use.wave = TRUE, data = wages) summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 1-7 ## Dependent variable: lwage ## Model type: Linear mixed effects ## Specification: within-between ##  ## MODEL FIT: ## AIC = -2064.42, BIC = -1963.07 ## Pseudo-R² (fixed effects) = 0.43 ## Pseudo-R² (total) = 0.92 ## Entity ICC = 0.84 ##  ## WITHIN EFFECTS: ## ---------------------------------------------------- ##                Est.   S.E.   t val.      d.f.      p ## ----------- ------- ------ -------- --------- ------ ## wks            0.00   0.00     1.47   3498.40   0.14 ## union          0.02   0.01     1.61   3561.26   0.11 ## ms            -0.04   0.02    -1.97   3416.40   0.05 ## occ           -0.02   0.01    -1.42   3563.73   0.16 ## ---------------------------------------------------- ##  ## BETWEEN EFFECTS: ## ---------------------------------------------------------- ##                       Est.   S.E.   t val.     d.f.      p ## ------------------ ------- ------ -------- -------- ------ ## (Intercept)           5.93   0.20    29.69   588.53   0.00 ## imean(wks)            0.01   0.00     2.12   587.98   0.03 ## imean(union)          0.16   0.03     4.90   587.97   0.00 ## imean(ms)             0.17   0.05     3.25   588.06   0.00 ## imean(occ)           -0.39   0.03   -13.16   588.01   0.00 ## blk                  -0.13   0.05    -2.49   588.00   0.01 ## fem                  -0.31   0.06    -4.90   588.07   0.00 ## t                     0.10   0.00    54.67   594.66   0.00 ## ---------------------------------------------------------- ##  ## p values calculated using Satterthwaite d.f. ##   ## RANDOM EFFECTS: ## ------------------------------------ ##   Group      Parameter    Std. Dev.  ## ---------- ------------- ----------- ##     id      (Intercept)    0.3057    ##     id           t         0.03499   ##  Residual                  0.1334    ## ------------------------------------"},{"path":"/articles/wbm.html","id":"contextual-within-and-random-effects-specifications","dir":"Articles","previous_headings":"Regression models > Fitting within-between models","what":"Contextual, within, and random effects specifications","title":"Introduction to the `panelr` package","text":"default, wbm() name suggests. ’d rather contextual model described earlier, means subtracted time varying variables, ’s option . Now individual means new interpretation difference effect compared within-entity estimates. don’t want use time-invariant variables, can also just ask “within” estimator: can help declutter output really just don’t care -subjects effects.","code":"model <- wbm(lwage ~ wks + union + ms + occ | blk + fem, data = wages, model = \"contextual\") summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 1-7 ## Dependent variable: lwage ## Model type: Linear mixed effects ## Specification: contextual ##  ## MODEL FIT: ## AIC = 2036.78, BIC = 2119.13 ## Pseudo-R² (fixed effects) = 0.27 ## Pseudo-R² (total) = 0.69 ## Entity ICC = 0.57 ##  ## WITHIN EFFECTS: ## ---------------------------------------------------- ##                Est.   S.E.   t val.      d.f.      p ## ----------- ------- ------ -------- --------- ------ ## wks            0.00   0.00     1.06   3566.00   0.29 ## union          0.06   0.03     2.53   3566.00   0.01 ## ms            -0.08   0.03    -2.57   3566.00   0.01 ## occ           -0.08   0.02    -3.32   3566.00   0.00 ## ---------------------------------------------------- ##  ## CONTEXTUAL EFFECTS: ## ----------------------------------------------------------- ##                       Est.   S.E.   t val.      d.f.      p ## ------------------ ------- ------ -------- --------- ------ ## (Intercept)           6.30   0.20    30.85    588.00   0.00 ## imean(wks)            0.01   0.00     1.93    660.18   0.05 ## imean(union)          0.09   0.04     2.15   1411.72   0.03 ## imean(ms)             0.25   0.06     3.95   1047.31   0.00 ## imean(occ)           -0.33   0.04    -8.55   1401.80   0.00 ## blk                  -0.15   0.05    -2.81    588.00   0.01 ## fem                  -0.32   0.06    -4.96    588.00   0.00 ## ----------------------------------------------------------- ##  ## p values calculated using Satterthwaite d.f. ##   ## RANDOM EFFECTS: ## ------------------------------------ ##   Group      Parameter    Std. Dev.  ## ---------- ------------- ----------- ##     id      (Intercept)    0.2992    ##  Residual                  0.2589    ## ------------------------------------ model <- wbm(lwage ~ wks + union + ms + occ, data = wages, model = \"within\") summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 1-7 ## Dependent variable: lwage ## Model type: Linear mixed effects ## Specification: within ##  ## MODEL FIT: ## AIC = 2266.01, BIC = 2310.35 ## Pseudo-R² (fixed effects) = 0 ## Pseudo-R² (total) = 0.69 ## Entity ICC = 0.69 ##  ## ---------------------------------------------------------- ##                      Est.   S.E.   t val.      d.f.      p ## ----------------- ------- ------ -------- --------- ------ ## (Intercept)          6.68   0.02   413.08    594.00   0.00 ## wks                  0.00   0.00     1.06   3566.00   0.29 ## union                0.06   0.03     2.53   3566.00   0.01 ## ms                  -0.08   0.03    -2.57   3566.00   0.01 ## occ                 -0.08   0.02    -3.32   3566.00   0.00 ## ---------------------------------------------------------- ##  ## p values calculated using Satterthwaite d.f. ##   ## RANDOM EFFECTS: ## ------------------------------------ ##   Group      Parameter    Std. Dev.  ## ---------- ------------- ----------- ##     id      (Intercept)    0.3819    ##  Residual                  0.2589    ## ------------------------------------"},{"path":"/articles/wbm.html","id":"using-gee-to-fit-within-between-models","dir":"Articles","previous_headings":"Regression models","what":"Using GEE to fit within-between models","title":"Introduction to the `panelr` package","text":"don’t estimate models using multilevel models fact may get better inferences avoiding assumptions inherent multilevel modeling (see McNeish, 2019). can use semiparametric generalized estimating equations (GEE) approach estimation, main tradeoff can longer use random slopes anything like . care average effects across entities, GEE can better approach doesn’t require right distribution effects several assumptions. wbgee() builds geeglm() geepack package works just like wbm(). gives us conservative estimates, general. Note default, wbgee() uses AR-1 working error correlation structure estimation. makes sense general times may make sense use “exchangeable” argument cor.str assumes within-entity correlations equal regardless time lag. options include “unstructured”, can computationally intensive, “independence,” assuming correlation within entities. Like wbm(), can generalized linear models via family argument. generalized linear models GEEs likely stand terms added benefit beyond multilevel models, although well-tested question knowledge.","code":"model <- wbgee(lwage ~ wks + union + ms + occ | blk + fem, data = wages) ## Loading required namespace: geepack ## Registered S3 methods overwritten by 'broom': ##   method            from   ##   tidy.glht         jtools ##   tidy.summary.glht jtools summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 1-7 ## Dependent variable: lwage ## Model type: Linear GEE ## Variance: ar1 (alpha = 0.79) ## Specification: within-between ##  ## MODEL FIT: ## QIC = 672.19, QICu = 669.6, CIC = 12.29 ##  ## WITHIN EFFECTS: ## ------------------------------------------ ##                Est.   S.E.   z val.      p ## ----------- ------- ------ -------- ------ ## wks            0.00   0.00     0.07   0.94 ## union          0.03   0.02     1.32   0.19 ## ms            -0.08   0.03    -2.78   0.01 ## occ           -0.03   0.02    -1.64   0.10 ## ------------------------------------------ ##  ## BETWEEN EFFECTS: ## ------------------------------------------------- ##                       Est.   S.E.   z val.      p ## ------------------ ------- ------ -------- ------ ## (Intercept)           6.29   0.22    28.48   0.00 ## imean(wks)            0.01   0.00     2.09   0.04 ## imean(union)          0.16   0.03     4.74   0.00 ## imean(ms)             0.17   0.06     3.01   0.00 ## imean(occ)           -0.41   0.03   -12.95   0.00 ## blk                  -0.14   0.05    -2.90   0.00 ## fem                  -0.30   0.06    -4.89   0.00 ## -------------------------------------------------"},{"path":"/articles/wbm.html","id":"asymmetric-effects","dir":"Articles","previous_headings":"Regression models","what":"Asymmetric effects","title":"Introduction to the `panelr` package","text":"Sometimes, theory may suggest increases variable different effect decreases variable. instance, getting married getting divorced probably equivalent (sense one exact opposite ) effects outcomes. Allison (2019) described method estimating models asymmetric effects based first differences. First, take first differences: \\[ y_{} - y_{-1} = (\\mu_t - \\mu_{t-1}) + \\beta(x_{} - x_{-1}) + (\\epsilon_{} - \\epsilon_{-1}) \\] need slightly different model asymmetric effects decompose differences positive negative variables. asymmetric effects model : \\[ y_{} - y_{-1} = (\\mu_t - \\mu_{t-1}) + \\beta^+x_{}^+ + \\beta^-x_{}^- + (\\epsilon_{} - \\epsilon_{-1}) \\] \\[ x_{}^+ = x_{} - x_{-1} \\text{ } (x_{} - x_{-1}) > 0, \\text{otherwise } 0 \\\\ x_{}^- = -(x_{} - x_{-1}) \\text{ } (x_{} - x_{-1}) < 0, \\text{otherwise } 0 \\] words, difference positive, becomes part \\(x_{}^+\\) negative, multiplied -1 made positive made part \\(x_{}^-\\) variable. effects symmetric, \\(\\beta^+ = -\\beta^-\\). fitting model via GLS, can test contrasts \\(\\beta^+\\) \\(\\beta^-\\) coefficients formal way assess presence asymmetric effects. ’s works panelr function, asym(). can see, model comparable within-model earlier, effects seem quite symmetric. Let’s look teen data earlier, spouse indicates whether respondent living spouse, inschool indicates whether respondent enrolled school, hours hours worked week survey. see asymmetric effect marriage: gaining spouse corresponds fewer hours worked, ’s effect work hours spouse lost. can see lower table difference coefficients associated fairly low p value. weak evidence asymmetric effect entering/leaving school.","code":"model <- asym(lwage ~ ms + occ + union + wks, data = wages) ## Loading required namespace: car summary(model) ## MODEL INFO: ## Entities: 595 ## Time periods: 2-7 ## Dependent variable: lwage ## Model type: Linear asymmetric effects (first differences) ## Variance structure: toeplitz-1 (theta = -0.44)  ##  ## Standard errors: Cluster-robust (CR2)  ## ------------------------------------------------ ##                      Est.   S.E.   t val.      p ## ----------------- ------- ------ -------- ------ ## (Intercept)          0.10   0.00    41.12   0.00 ## +ms                 -0.04   0.02    -1.95   0.05 ## -ms                  0.04   0.04     1.23   0.22 ## +occ                -0.02   0.02    -0.97   0.33 ## -occ                 0.03   0.02     1.17   0.24 ## +union               0.01   0.02     0.64   0.52 ## -union              -0.03   0.03    -1.11   0.27 ## +wks                 0.00   0.00     0.48   0.63 ## -wks                -0.00   0.00    -0.35   0.72 ## ------------------------------------------------ ##  ## Tests of asymmetric effects: ## -------------------------- ##               chi^2      p ## ----------- ------- ------ ## ms             0.01   0.92 ## occ            0.19   0.66 ## union          0.44   0.51 ## wks            0.00   1.00 ## -------------------------- summary(asym(hours ~ spouse + inschool, data = teen)) ## MODEL INFO: ## Entities: 1151 ## Time periods: 2-5 ## Dependent variable: hours ## Model type: Linear asymmetric effects (first differences) ## Variance structure: toeplitz-1 (theta = -0.54)  ##  ## Standard errors: Cluster-robust (CR2)  ## ------------------------------------------------ ##                      Est.   S.E.   t val.      p ## ----------------- ------- ------ -------- ------ ## (Intercept)          1.16   0.15     7.74   0.00 ## +spouse             -4.71   1.15    -4.09   0.00 ## -spouse             -0.61   2.20    -0.28   0.78 ## +inschool           -5.65   1.29    -4.38   0.00 ## -inschool            7.66   0.69    11.09   0.00 ## ------------------------------------------------ ##  ## Tests of asymmetric effects: ## ----------------------------- ##                  chi^2      p ## -------------- ------- ------ ## spouse            6.21   0.01 ## inschool          2.14   0.14 ## -----------------------------"},{"path":"/articles/wbm.html","id":"asymmetric-effects-for-generalized-linear-models","dir":"Articles","previous_headings":"Regression models > Asymmetric effects","what":"Asymmetric effects for generalized linear models","title":"Introduction to the `panelr` package","text":"downside first differences method generalize non-continuous dependent variables — can’t run logit model differenced binary outcome. Allison (2019) showed can modified form situations. Instead including \\(x_{}^+\\) \\(x_{}^-\\) predictors, instead create new variables \\(z_{}^+\\) \\(z_{}^-\\) cumulative sum differences prior time \\(t\\). \\[ z_{}^+ = \\sum_{s = 1}^{t}{x_{}^+} \\\\ z_{}^- = \\sum_{s = 1}^{t}{x_{}^-} \\\\ \\] Note \\(t = 1\\), set 0. ’ll leave details works manuscript, shows ’re left following equation: \\[ y_{} = \\mu_t + \\beta^+ z_{}^+ + \\beta^-z_{}^- + \\alpha_i + \\epsilon_{} \\] can treat like fixed effects model just need address \\(\\alpha_i\\). situations like call conditional logit, Allison used paper, another option GEE logit link. Let’s try teen data, also appears Allison (2019). outcome variable pov, poverty, ’s new predictor, mother, indicator whether respondent ever children. results broadly similar terms coefficient estimates obtained Allison. Unlike Allison, good evidence asymmetric effect case spouse one case hours. Note mother never goes negative version variable dropped model message. match Allison, also used use.wave include wave variable wave.factor make factor variable.","code":"model <- asym_gee(pov ~ mother + spouse + inschool + hours, data = teen, family = binomial(link = \"logit\"),                    use.wave = TRUE, wave.factor = TRUE) ## mother does not decrease over time so -mother is not included in the model. ## Unordered factor wave variable was converted to ordered. You should check ## that the order is correct. summary(model) ## MODEL INFO: ## Entities: 1151 ## Time periods: 2-5 ## Dependent variable: pov ## Model family: binomial, Link: logit ## Variance: ar1 (alpha = 0.33) ## Specification: Asymmetric effects (via GEE) ##  ## MODEL FIT: ## QIC = 5898.64, QICu = 5897.59, CIC = 11.52 ##  ## ------------------------------------------------ ##                      Est.   S.E.   z val.      p ## ----------------- ------- ------ -------- ------ ## (Intercept)         -0.30   0.06    -5.19   0.00 ## +mother              0.72   0.11     6.63   0.00 ## +spouse             -0.70   0.14    -5.14   0.00 ## -spouse              0.43   0.25     1.71   0.09 ## +inschool           -0.02   0.16    -0.15   0.88 ## -inschool           -0.01   0.09    -0.09   0.93 ## +hours              -0.02   0.00    -8.17   0.00 ## -hours               0.01   0.00     1.61   0.11 ## wave.L               0.11   0.07     1.65   0.10 ## wave.Q              -0.00   0.05    -0.02   0.98 ## wave.C              -0.05   0.05    -0.97   0.33 ## ------------------------------------------------ ##  ## Tests of asymmetric effects: ## ----------------------------- ##                  chi^2      p ## -------------- ------- ------ ## spouse            1.10   0.29 ## inschool          0.04   0.85 ## hours            25.57   0.00 ## -----------------------------"},{"path":"/articles/wbm.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to the `panelr` package","text":"Allison, P. D. (2009). Fixed effects regression models. Thousand Oaks, CA: SAGE Publications. https://doi.org/10.4135/9781412993869.d33 Allison, P. D. (2019). Asymmetric fixed-effects models panel data. Socius, 5, 1–12. https://doi.org/10.1177/2378023119826441 Bell, ., & Jones, K. (2015). Explaining fixed effects: Random effects modeling time-series cross-sectional panel data. Political Science Research Methods, 3, 133–153. https://doi.org/10.1017/psrm.2014.7 Giesselmann, M., & Schmidt-Catran, . W. (2020). Interactions fixed effects regression models. Sociological Methods & Research, 1–28. https://doi.org/10.1177/0049124120914934 McNeish, D. (2019). Effect partitioning cross-sectionally clustered data without multilevel models. Multivariate Behavioral Research, Advance online publication. https://doi.org/10.1080/00273171.2019.1602504","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob . Long. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Long JA (2020). panelr: Regression Models Utilities Repeated Measures Panel Data. R package version 0.7.3, https://cran.r-project.org/package=panelr.","code":"@Manual{panelr,   title = {panelr: Regression Models and Utilities for Repeated Measures and Panel Data},   author = {Jacob A. Long},   year = {2020},   note = {R package version 0.7.3},   url = {https://cran.r-project.org/package=panelr}, }"},{"path":"/index.html","id":"panelr","dir":"","previous_headings":"","what":"Regression Models and Utilities for Repeated Measures and Panel Data","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"R package designed aid analysis panel data, designs group respondents/entities contacted/measured multiple times. panelr provides useful infrastructure, like panel_data object class, well automating emerging methods analyses data. wbm() automates “within-” (also known “-within” “hybrid”) specification combines desirable aspects fixed effects random effects econometric models fits using lme4 package backend. Bayesian estimation models supported interfacing brms package (wbm_stan()) GEE estimation via geepack (wbgee()). also automates fairly new “asymmetric effects” specification described Allison (2019) supports estimation via GLS linear asymmetric effects models (asym()) via GEE non-Gaussian models (asym_gee()).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"panelr now available via CRAN.","code":"install.packages(\"panelr\")"},{"path":[]},{"path":"/index.html","id":"panel_data-frames","dir":"","previous_headings":"Usage","what":"panel_data frames","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"strictly required, best way start declare data panel data. ’ll load example data WageData demonstrate. two key variables t id. t wave survey row data refers id survey respondent. perfectly balanced data set, 7 observations 595 respondents. use two pieces information create panel_data object. tell panel_data() column refers unique identifiers respondents/entities (latter something like countries companies instead people) column refers period/wave data collection. Note resulting panel_data object remember columns ID column wave column. also fight bit things might side effect dropping columns putting time order. panel_data frames modified tibbles (tibble package) grouped entity (.e., ID column). panel_data frames meant play nice tidyverse. ’s quick sample tidy workflow panelr can work:","code":"library(panelr) data(\"WageData\") colnames(WageData) [1] \"exp\"   \"wks\"   \"occ\"   \"ind\"   \"south\" \"smsa\"  \"ms\"    \"fem\"    [9] \"union\" \"ed\"    \"blk\"   \"lwage\" \"t\"     \"id\" wages <- panel_data(WageData, id = id, wave = t) wages # Panel data:    4,165 x 14 # entities:      id [595] # wave variable: t [1, 2, 3, ... (7 waves)]    id        t   exp   wks   occ   ind south  smsa    ms   fem union    ed    <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  1 1         1     3    32     0     0     1     0     1     0     0     9  2 1         2     4    43     0     0     1     0     1     0     0     9  3 1         3     5    40     0     0     1     0     1     0     0     9  4 1         4     6    39     0     0     1     0     1     0     0     9  5 1         5     7    42     0     1     1     0     1     0     0     9  6 1         6     8    35     0     1     1     0     1     0     0     9  7 1         7     9    32     0     1     1     0     1     0     0     9  8 2         1    30    34     1     0     0     0     1     0     0    11  9 2         2    31    27     1     0     0     0     1     0     0    11 10 2         3    32    33     1     1     0     0     1     0     1    11 # ... with 4,155 more rows, and 2 more variables: blk <dbl>, lwage <dbl> library(dplyr) data(\"WageData\") # Create `panel_data` object wages <- panel_data(WageData, id = id, wave = t) %>%   # Pass to mutate, which will calculate statistics groupwise when appropriate   mutate(     wage = exp(lwage), # reverse transform the log wage variable     mean_wage_individual = mean(wage), # means calculated separately by entity     lag_wage = lag(wage) # mutate() will calculate lagged values correctly   ) %>%   # Use `panelr`'s complete_data() to filter for entities that have   # enough observations   complete_data(wage, union, min.waves = 5) %>% # drop if there aren't 5 completions   # You can use unpanel() if you need to do rowwise or columnwise operations   unpanel() %>%   mutate(     mean_wage_grand = mean(wage)   ) %>%   # You'll need to convert back to panel_data if you want to keep using panelr functions   panel_data(id = id, wave = t)"},{"path":"/index.html","id":"wbm--the-within-between-model","dir":"","previous_headings":"Usage","what":"wbm() — the within-between model","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"Anyone can fit within-model without use package just particular specification multilevel model. said, ’s something require programming rather prone error. best case, cumbersome inefficient create necessary variables. wbm() primary model-fitting function ’ll use package fits within-models , utilizing lme4 backend estimation. three-part model syntax used goes like : dv ~ varying_variables | invariant_variables | cross_level_interactions/random effects works like typical formula otherwise. bars just tell panelr treat variables. Note also can specify random slopes using lme4-style syntax third part formula well. random intercept ID variable included default doesn’t need specified formula. Lagged variables supported well lag() function. Unlike base R, panelr lags variables correctly — wave 1 observations NA values lagged variable rather taking final wave value previous entity. specify model using wages data. predict logged wages (lwage) using two time-varying variables — lagged union membership (union) contemporaneous weeks worked (wks) — along time-invariant predictor, binary indicator black race (blk). demonstrative purposes, ’ll fit random slope lag(union) cross-level interaction blk wks. Note imean() internal function calculates individual-level mean, represents -subjects effects time-varying predictors. within effects time-varying predictors occasion level individual-level mean subtracted. want model specified occasion level predictors mean subtracted, use model = \"contextual\" argument. “contextual” label refers way terms normally interpreted specified way. may also use model = \"\" fit econometricians call random effects model, disaggregate within- -entity variation.","code":"model <- wbm(lwage ~ lag(union) + wks | blk | blk * wks + (lag(union) | id), data = wages) summary(model) MODEL INFO: Entities: 595 Time periods: 2-7 Dependent variable: lwage Model type: Linear mixed effects Specification: within-between  MODEL FIT: AIC = 1427.04, BIC = 1495.03 Pseudo-R² (fixed effects) = 0.05 Pseudo-R² (total) = 0.75 Entity ICC = 0.73  WITHIN EFFECTS: ---------------------------------------------------------                     Est.   S.E.   t val.      d.f.      p ---------------- ------- ------ -------- --------- ------ lag(union)          0.04   0.04     1.24     88.17   0.22 wks                -0.00   0.00    -1.51   2948.04   0.13 ---------------------------------------------------------  BETWEEN EFFECTS: ---------------------------------------------------------------                            Est.   S.E.   t val.     d.f.      p ----------------------- ------- ------ -------- -------- ------ (Intercept)                6.20   0.24    25.89   571.97   0.00 imean(lag(union))          0.03   0.04     0.72   593.27   0.47 imean(wks)                 0.01   0.01     2.30   571.29   0.02 blk                       -0.35   0.06    -5.65   591.87   0.00 ---------------------------------------------------------------  CROSS-LEVEL INTERACTIONS: ------------------------------------------------------                  Est.   S.E.   t val.      d.f.      p ------------- ------- ------ -------- --------- ------ wks:blk         -0.00   0.00    -1.06   2956.56   0.29 ------------------------------------------------------  p values calculated using Satterthwaite d.f.   RANDOM EFFECTS: -------------------------------------   Group      Parameter     Std. Dev.  ---------- -------------- -----------     id      (Intercept)     0.3785        id       lag(union)      0.24      Residual                   0.2291    -------------------------------------"},{"path":"/index.html","id":"widen_panel-and-long_panel","dir":"","previous_headings":"Usage","what":"widen_panel() and long_panel()","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"Two functions cover bases tricky business reshaping panel data included. Sometimes, like SEM-based analyses, need data wide format — .e., one row per entity. widen_panel() makes easy require minimal trial error thinking. Perhaps often, raw data already wide format need get long format cool stuff like use wbm(). can tricky, long_panel() (didn’t think lengthen_panel() longen_panel() quite worked names) cover situations. tell labels periods (e.g., range 1 5, \"\" \"E\", something else?), located (variable’s name?), kinds formatting go /. Check vignette details worked examples.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"’m happy receive bug reports, suggestions, questions, () contributions fix problems add features. prefer use Github issues system trying reach ways. Pull requests contributions encouraged. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Regression Models and Utilities for Repeated Measures and Panel Data","text":"source code package licensed MIT License.","code":""},{"path":"/reference/WageData.html","id":null,"dir":"Reference","previous_headings":"","what":"Earnings data from the Panel Study of Income Dynamics — WageData","title":"Earnings data from the Panel Study of Income Dynamics — WageData","text":"data come years 1976-1982 Panel Study Income Dynamics (PSID), information demographics earnings 595 individuals.","code":""},{"path":"/reference/WageData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Earnings data from the Panel Study of Income Dynamics — WageData","text":"","code":"WageData"},{"path":"/reference/WageData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Earnings data from the Panel Study of Income Dynamics — WageData","text":"data frame 4165 rows 14 variables: id Unique identifier survey respondent t number corresponding wave survey, 1 7 wks Weeks worked past year lwage Natural logarithm earnings past year union Binary indicator whether respondent member union (1 = union member) ms Binary indicator whether respondent married (1 = married) occ Binary indicator whether respondent blue collar (= 0) white collar (= 1) worker. ind Binary indicator whether respondent works manufacturing (= 1) south Binary indicator whether respondent lives South (= 1) smsa Binary indicator whether respondent lives standard metropolitan area (SMSA; = 1) fem Binary indicator whether respondent female (= 1) blk Binary indicator whether respondent African-American (= 1) ed Years education exp Years workforce.","code":""},{"path":"/reference/WageData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Earnings data from the Panel Study of Income Dynamics — WageData","text":"data place. particular file downloaded Richard Williams https://www3.nd.edu/~rwilliam/statafiles/wages.dta, though claim ownership data. data shared supplement Baltagi (2005) https://www.wiley.com/legacy/wileychi/baltagi3e/data_sets.html. also shared supplement Greene (2008) https://pages.stern.nyu.edu/~wgreene/Text/Edition6/tablelist6.htm. data also available numerous locations, including slightly different formats Wages plm package PSID7682 AER package.","code":""},{"path":"/reference/are_varying.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if variables are constant or variable over time. — are_varying","title":"Check if variables are constant or variable over time. — are_varying","text":"function designed use panel_data() objects.","code":""},{"path":"/reference/are_varying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if variables are constant or variable over time. — are_varying","text":"","code":"are_varying(data, ..., type = \"time\")"},{"path":"/reference/are_varying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if variables are constant or variable over time. — are_varying","text":"data data frame, typically panel_data() class. ... Variable names. none given, variables checked. type Check variance time across individuals? Default \"time\". \"individual\" considers variables like age non-varying everyone ages speed.","code":""},{"path":"/reference/are_varying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if variables are constant or variable over time. — are_varying","text":"named logical vector. TRUE, variable varying.","code":""},{"path":"/reference/are_varying.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if variables are constant or variable over time. — are_varying","text":"","code":"wages <- panel_data(WageData, id = id, wave = t) wages %>% are_varying(occ, ind, fem, blk) #>   occ   ind   fem   blk  #>  TRUE  TRUE FALSE FALSE"},{"path":"/reference/asym.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate asymmetric effects models using first differences — asym","title":"Estimate asymmetric effects models using first differences — asym","text":"function fits asymmetric effects first difference model described Allison (2019) using GLS estimation.","code":""},{"path":"/reference/asym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate asymmetric effects models using first differences — asym","text":"","code":"asym(   formula,   data,   id = NULL,   wave = NULL,   use.wave = FALSE,   min.waves = 1,   variance = c(\"toeplitz-1\", \"constrained\", \"unconstrained\"),   error.type = c(\"CR2\", \"CR1S\"),   ... )"},{"path":"/reference/asym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate asymmetric effects models using first differences — asym","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. use.wave wave included predictor? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. variance One \"toeplitz-1\", \"constrained\", \"unconstrained\". toeplitz variance specification estimates single error variance single lag-1 error correlation lags zero correlation. constrained model assumes autocorrelated errors heteroskedastic errors. unconstrained option allows separate variances every period well every lag autocorrelation. can computationally taxing periods increase inefficient necessary. See Allison (2019) . error.type Either \"CR2\" \"CR1S\". See clubSandwich package details. ... Ignored.","code":""},{"path":"/reference/asym.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate asymmetric effects models using first differences — asym","text":"Allison, P. D. (2019). Asymmetric fixed-effects models panel data. Socius, 5, 1-12. https://doi.org/10.1177/2378023119826441","code":""},{"path":"/reference/asym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate asymmetric effects models using first differences — asym","text":"","code":"if (FALSE) { data(\"teen_poverty\") # Convert to long format teen <- long_panel(teen_poverty, begin = 1, end = 5) model <- asym(hours ~ lag(pov) + spouse, data = teen) summary(model) }"},{"path":"/reference/asym_gee.html","id":null,"dir":"Reference","previous_headings":"","what":"Asymmetric effects models fit with GEE — asym_gee","title":"Asymmetric effects models fit with GEE — asym_gee","text":"Fit \"within-\" several regression variants panel data via generalized estimating equations.","code":""},{"path":"/reference/asym_gee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asymmetric effects models fit with GEE — asym_gee","text":"","code":"asym_gee(   formula,   data,   id = NULL,   wave = NULL,   cor.str = c(\"ar1\", \"exchangeable\", \"unstructured\"),   use.wave = FALSE,   wave.factor = FALSE,   min.waves = 1,   family = gaussian,   weights = NULL,   offset = NULL,   ... )"},{"path":"/reference/asym_gee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asymmetric effects models fit with GEE — asym_gee","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. cor.str correlation structure accepted geepack::geeglm(). Default \"ar1\", useful alternative \"exchangeable\". \"unstructured\" may cause problems due computational complexity. use.wave wave included predictor? Default FALSE. wave.factor wave variable treated unordered factor instead continuous? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. family Use specify GLM link families. Default gaussian, linear model. weights using weights, either name column data contains weights vector weights. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. ... Additional arguments provided geepack::geeglm().","code":""},{"path":"/reference/asym_gee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asymmetric effects models fit with GEE — asym_gee","text":"asym_gee object, inherits wbgee geeglm.","code":""},{"path":"/reference/asym_gee.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asymmetric effects models fit with GEE — asym_gee","text":"See documentation wbm() many details formula syntax arguments.","code":""},{"path":"/reference/asym_gee.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Asymmetric effects models fit with GEE — asym_gee","text":"Allison, P. D. (2019). Asymmetric fixed-effects models panel data. Socius, 5, 1-12. https://doi.org/10.1177/2378023119826441 McNeish, D. (2019). Effect partitioning cross-sectionally clustered data without multilevel models. Multivariate Behavioral Research, Advance online publication. https://doi.org/10.1080/00273171.2019.1602504 McNeish, D., Stapleton, L. M., & Silverman, R. D. (2016). unnecessary ubiquity hierarchical linear modeling. Psychological Methods, 22, 114-140. https://doi.org/10.1037/met0000078","code":""},{"path":"/reference/asym_gee.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asymmetric effects models fit with GEE — asym_gee","text":"Jacob . Long","code":""},{"path":"/reference/asym_gee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asymmetric effects models fit with GEE — asym_gee","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- asym_gee(lwage ~ lag(union) + wks, data = wages) #> Loading required namespace: geepack #> Registered S3 methods overwritten by 'broom': #>   method            from   #>   tidy.glht         jtools #>   tidy.summary.glht jtools #> Loading required namespace: car summary(model) #> MODEL INFO: #> Entities: 595 #> Time periods: 3-7 #> Dependent variable: lwage #> Model family: Linear  #> Variance: ar1 (alpha = -0.3) #> Specification: Asymmetric effects (via GEE) #>  #> MODEL FIT: #> QIC = 121.63, QICu = 117.85, CIC = 6.89 #>  #> ------------------------------------------------ #>                      Est.   S.E.   z val.      p #> ----------------- ------- ------ -------- ------ #> (Intercept)          0.10   0.00    39.46   0.00 #> +lag(union)          0.02   0.02     1.13   0.26 #> -lag(union)         -0.00   0.02    -0.08   0.94 #> +wks                -0.00   0.00    -0.45   0.65 #> -wks                -0.00   0.00    -0.49   0.63 #> ------------------------------------------------ #>  #> Tests of asymmetric effects: #> ------------------------------- #>                    chi^2      p #> ---------------- ------- ------ #> lag(union)          0.66   0.42 #> wks                 1.10   0.29 #> -------------------------------"},{"path":"/reference/complete_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out entities with too few observations — complete_data","title":"Filter out entities with too few observations — complete_data","text":"function allows define minimum number waves/periods exclude individuals fewer observations .","code":""},{"path":"/reference/complete_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out entities with too few observations — complete_data","text":"","code":"complete_data(data, ..., formula = NULL, vars = NULL, min.waves = \"all\")"},{"path":"/reference/complete_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out entities with too few observations — complete_data","text":"data panel_data() frame. ... Optionally, unquoted variable names/expressions separated commas passed dplyr::select(). Otherwise, columns included formula vars also NULL. formula formula, like one using specify model. vars alternative formula, vector variable names. min.waves minimum number observations kept? Default \"\", can number.","code":""},{"path":"/reference/complete_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out entities with too few observations — complete_data","text":"panel_data frame.","code":""},{"path":"/reference/complete_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter out entities with too few observations — complete_data","text":"... (, unquoted variable name(s)) included, formula vars ignored. Likewise, formula takes precedence vars. just different methods selecting variables can choose whichever prefer/comfortable . ... corresponds \"tidyverse\" way, formula useful programming working model formulas, vars \"standard\" evaluation method working strings.","code":""},{"path":"/reference/complete_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out entities with too few observations — complete_data","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) complete_data(wages, wks, lwage, min.waves = 3) #> # Panel data:    4,165 × 14 #> # entities:      id [595] #> # wave variable: t [1, 2, 3, ... (7 waves)] #>    id        t   exp   wks   occ   ind south  smsa    ms   fem union    ed   blk #>    <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 1         1     3    32     0     0     1     0     1     0     0     9     0 #>  2 1         2     4    43     0     0     1     0     1     0     0     9     0 #>  3 1         3     5    40     0     0     1     0     1     0     0     9     0 #>  4 1         4     6    39     0     0     1     0     1     0     0     9     0 #>  5 1         5     7    42     0     1     1     0     1     0     0     9     0 #>  6 1         6     8    35     0     1     1     0     1     0     0     9     0 #>  7 1         7     9    32     0     1     1     0     1     0     0     9     0 #>  8 2         1    30    34     1     0     0     0     1     0     0    11     0 #>  9 2         2    31    27     1     0     0     0     1     0     0    11     0 #> 10 2         3    32    33     1     1     0     0     1     0     1    11     0 #> # … with 4,155 more rows, and 1 more variable: lwage <dbl>"},{"path":"/reference/fdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate first differences models using GLS — fdm","title":"Estimate first differences models using GLS — fdm","text":"function fits first difference models using GLS estimation.","code":""},{"path":"/reference/fdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate first differences models using GLS — fdm","text":"","code":"fdm(   formula,   data,   id = NULL,   wave = NULL,   use.wave = FALSE,   min.waves = 1,   variance = c(\"toeplitz-1\", \"constrained\", \"unconstrained\"),   error.type = c(\"CR2\", \"CR1S\"),   ... )"},{"path":"/reference/fdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate first differences models using GLS — fdm","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. use.wave wave included predictor? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. variance One \"toeplitz-1\", \"constrained\", \"unconstrained\". toeplitz variance specification estimates single error variance single lag-1 error correlation lags zero correlation. constrained model assumes autocorrelated errors heteroskedastic errors. unconstrained option allows separate variances every period well every lag autocorrelation. can computationally taxing periods increase inefficient necessary. See Allison (2019) . error.type Either \"CR2\" \"CR1S\". See clubSandwich package details. ... Ignored.","code":""},{"path":"/reference/fdm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate first differences models using GLS — fdm","text":"Allison, P. D. (2019). Asymmetric fixed-effects models panel data. Socius, 5, 1-12. https://doi.org/10.1177/2378023119826441","code":""},{"path":"/reference/fdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate first differences models using GLS — fdm","text":"","code":"data(\"teen_poverty\") # Convert to long format teen <- long_panel(teen_poverty, begin = 1, end = 5) model <- fdm(hours ~ lag(pov) + spouse, data = teen) #> Loading required namespace: clubSandwich #> Registered S3 method overwritten by 'clubSandwich': #>   method    from     #>   bread.mlm sandwich summary(model) #> MODEL INFO: #> Entities: 1151 #> Time periods: 3-5 #> Dependent variable: hours #> Variance structure: toeplitz-1 (theta = -0.51)  #>  #> MODEL FIT: #> AIC = 28771.97, BIC = 28802.7 #>   #> Standard errors: CR2  #> ------------------------------------------------ #>                      Est.   S.E.   t val.      p #> ----------------- ------- ------ -------- ------ #> (Intercept)          2.09   0.19    10.89   0.00 #> lag_pov             -1.62   0.56    -2.91   0.00 #> spouse              -2.38   1.26    -1.89   0.06 #> ------------------------------------------------"},{"path":"/reference/fdm_tidiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy methods for fdm and asym models — tidy.asym","title":"Tidy methods for fdm and asym models — tidy.asym","text":"panelr provides methods access fdm asym data tidy format","code":""},{"path":"/reference/fdm_tidiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy methods for fdm and asym models — tidy.asym","text":"","code":"# S3 method for asym tidy(x, conf.int = FALSE, conf.level = 0.95, ...)  # S3 method for fdm tidy(x, conf.int = FALSE, conf.level = 0.95, ...)  # S3 method for fdm glance(x, ...)"},{"path":"/reference/fdm_tidiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy methods for fdm and asym models — tidy.asym","text":"x fdm asym object. conf.int Logical indicating whether include confidence interval tidied output. Defaults FALSE. conf.level confidence level use confidence interval conf.int = TRUE. Must strictly greater 0 less 1. Defaults 0.95, corresponds 95 percent confidence interval. ... Ignored","code":""},{"path":"/reference/fdm_tidiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy methods for fdm and asym models — tidy.asym","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- fdm(lwage ~ wks + union, data = wages) if (requireNamespace(\"generics\")) {   generics::tidy(model) } #> # A tibble: 3 × 5 #>   estimate std.error statistic   p.value term        #>      <dbl>     <dbl>     <dbl>     <dbl> <chr>       #> 1 0.0967    0.00176     54.9   1.09e-234 (Intercept) #> 2 0.000461  0.000974     0.473 6.36e-  1 wks         #> 3 0.0199    0.0221       0.904 3.67e-  1 union"},{"path":"/reference/formula.wbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve model formulas from wbm objects — formula.wbm","title":"Retrieve model formulas from wbm objects — formula.wbm","text":"S3 method allows retrieve formula used fit wbm objects.","code":""},{"path":"/reference/formula.wbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve model formulas from wbm objects — formula.wbm","text":"","code":"# S3 method for wbm formula(x, raw = FALSE, ...)"},{"path":"/reference/formula.wbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve model formulas from wbm objects — formula.wbm","text":"x R object, DF2formula() data.frame. raw Return formula used call lmerMod/glmerMod? Default FALSE. ... arguments passed methods.","code":""},{"path":"/reference/formula.wbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve model formulas from wbm objects — formula.wbm","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbm(lwage ~ lag(union) + wks, data = wages) # Returns the original model formula rather than the one sent to lme4 formula(model) #> lwage ~ lag(union) + wks #> <environment: 0x563d13586ae0>"},{"path":"/reference/get_wave.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve panel_data metadata — get_wave","title":"Retrieve panel_data metadata — get_wave","text":"get_id(), get_wave(), get_periods() extractor functions can used retrieve names id wave variables time periods panel_data frame.","code":""},{"path":"/reference/get_wave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve panel_data metadata — get_wave","text":"","code":"get_wave(data)  get_id(data)  get_periods(data)"},{"path":"/reference/get_wave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve panel_data metadata — get_wave","text":"data panel_data frame","code":""},{"path":"/reference/get_wave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve panel_data metadata — get_wave","text":"panel_data frame","code":""},{"path":"/reference/get_wave.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve panel_data metadata — get_wave","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) get_wave(wages) #> [1] \"t\" get_id(wages) #> [1] \"id\" get_periods(wages) #> [1] 1 2 3 4 5 6 7"},{"path":"/reference/heise.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Heise stability and reliability coefficients — heise","title":"Estimate Heise stability and reliability coefficients — heise","text":"function uses three waves data estimate stability reliability coefficients described Heise (1969).","code":""},{"path":"/reference/heise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Heise stability and reliability coefficients — heise","text":"","code":"heise(data, ..., waves = NULL)"},{"path":"/reference/heise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Heise stability and reliability coefficients — heise","text":"data panel_data frame. ... unquoted variable names passed dplyr::select() waves 3 waves used? NULL (default), first, middle, last waves used.","code":""},{"path":"/reference/heise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Heise stability and reliability coefficients — heise","text":"tibble reliability (rel), waves 1-3 stability (stab13), waves 1-2 stability (stab12), waves 2-3 stability (stab23) variable values refer (var).","code":""},{"path":"/reference/heise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Heise stability and reliability coefficients — heise","text":"Heise, D. R. (1969). Separating reliability stability test-retest correlation. American Sociological Review, 34, 93–101. https://doi.org/10.2307/2092790","code":""},{"path":"/reference/heise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Heise stability and reliability coefficients — heise","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) heise(wages, wks, lwage) # will use waves 1, 4, and 7 by default #> Using waves 1, 4, and 7 #> # A tibble: 2 × 5 #>   var   rel[,1] stab13[,1] stab12[,1] stab23[,1] #>   <chr>   <dbl>      <dbl>      <dbl>      <dbl> #> 1 wks     0.417      0.374      0.497      0.752 #> 2 lwage   0.922      0.871      0.918      0.949"},{"path":"/reference/is_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is panel_data — is_panel","title":"Check if object is panel_data — is_panel","text":"convenience function checks whether object panel_data object.","code":""},{"path":"/reference/is_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is panel_data — is_panel","text":"","code":"is_panel(x)"},{"path":"/reference/is_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is panel_data — is_panel","text":"x object.","code":""},{"path":"/reference/is_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is panel_data — is_panel","text":"","code":"data(\"WageData\")  is_panel(WageData) # FALSE #> [1] FALSE  wages <- panel_data(WageData, id = id, wave = t)  is_panel(wages) # TRUE #> [1] TRUE"},{"path":"/reference/line_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot trends in longitudinal variables — line_plot","title":"Plot trends in longitudinal variables — line_plot","text":"line_plot allows flexible visualization repeated measures variables panel_data frames.","code":""},{"path":"/reference/line_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot trends in longitudinal variables — line_plot","text":"","code":"line_plot(   data,   var,   id = NULL,   wave = NULL,   overlay = TRUE,   show.points = TRUE,   subset.ids = FALSE,   n.random.subset = 9,   add.mean = FALSE,   mean.function = \"lm\",   line.size = 1,   alpha = if (overlay) 0.5 else 1 )"},{"path":"/reference/line_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot trends in longitudinal variables — line_plot","text":"data Either panel_data frame another data frame. var unquoted name variable interest. id data panel_data object, id variable. wave data panel_data object, wave variable. overlay lines plotted panel facet/panel? Default TRUE, meaning plotted panel. show.points Plot point wave? Default TRUE. subset.ids Plot subset entities' lines? Default NULL, meaning plot ids. TRUE, random subset (number defined n.random.subset) plotted. may also supply vector ids choose . n.random.subset many entities randomly sample subset.ids TRUE. add.mean Add line representing mean trend? Default FALSE. combined overlay. mean.function mean function supply geom_smooth add.mean TRUE. Default \"lm\", another option interest \"loess\". line.size thickness plotted lines. Default: 0.5 alpha transparency lines points. overlay = TRUE, set 0.5, otherwise 1, means non-transparent.","code":""},{"path":"/reference/line_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot trends in longitudinal variables — line_plot","text":"ggplot object.","code":""},{"path":"/reference/line_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot trends in longitudinal variables — line_plot","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) line_plot(wages, lwage, add.mean = TRUE, subset.ids = TRUE, overlay = FALSE) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"/reference/long_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert wide panels to long format — long_panel","title":"Convert wide panels to long format — long_panel","text":"function takes wide format panels input converts long format.","code":""},{"path":"/reference/long_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert wide panels to long format — long_panel","text":"","code":"long_panel(   data,   prefix = NULL,   suffix = NULL,   begin = NULL,   end = NULL,   id = \"id\",   wave = \"wave\",   periods = NULL,   label_location = c(\"end\", \"beginning\"),   as_panel_data = TRUE,   match = \".*\",   use.regex = FALSE,   check.varying = TRUE )"},{"path":"/reference/long_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert wide panels to long format — long_panel","text":"data wide data frame. prefix character(s) go period indicator? none, set argument NULL. suffix character(s) go period indicator? none, set argument NULL. begin label first period? 1, \"\", anything can sequenced. end label final period? 2, \"B\", anything can sequenced lies along sequence begin argument. id name ID variable string. ID variable, name newly-created ID variable. wave name newly-created wave variable. periods period indicator lie sequence understood function, can supply vector instead. instance, give c(\"one\",\"three\",\"five\") variables labeled var_one, var_three, var_five. label_location period label go variable? variables labeled like var_1, var_2, etc., \"end\". labels like A_var, B_var, , \"beginning\". as_panel_data return object panel_data() object? Default TRUE. match regex match part variable names wave indicator. default match character amount times. Sometimes might know variable names start digit, instance, might use \"\\\\d.*\" instead. use.regex begin end arguments treated regular expressions? Default FALSE. check.varying function check make sure every variable wide data wave indicator actually time-varying? Default TRUE, meaning constant like \"race_W1\" measured wave 1 defined wave long data. large datasets, however, sometimes setting FALSE can save memory.","code":""},{"path":"/reference/long_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert wide panels to long format — long_panel","text":"Either data.frame panel_data frame.","code":""},{"path":"/reference/long_panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert wide panels to long format — long_panel","text":"easy way convert panel data wide long format formats basically non-standard applications. function can handle common case wide data frame regular labeling system period. key thing providing enough information function understand pattern. end, function calls stats::reshape() easier use able handle situations, label occurs beginning variable name. Also, just important, function built-utilities handle unbalanced data --- variables occur every single period, breaks stats::reshape().","code":""},{"path":[]},{"path":"/reference/long_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert wide panels to long format — long_panel","text":"","code":"## We need a wide data frame, so we will make one from the long-format  ## data included in the package.  # Convert WageData to panel_data object wages <- panel_data(WageData, id = id, wave = t) # Convert wages to wide format wide_wages <- widen_panel(wages)  # Note: wide_wages has variables in the following format: # var1_1, var1_2, var1_3, var2_1, var2_2, var2_3, etc. if (FALSE) { long_wages <- long_panel(wide_wages, prefix = \"_\", begin = 1, end = 7,                          id = \"id\", label_location = \"end\") } # Note that in this case, the prefix and label_location arguments are # the defaults but are included just for clarity."},{"path":"/reference/make_diff_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate differenced and asymmetric effects data — make_diff_data","title":"Generate differenced and asymmetric effects data — make_diff_data","text":"interface internal functions process data fdm(), asym(), asym_gee().","code":""},{"path":"/reference/make_diff_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate differenced and asymmetric effects data — make_diff_data","text":"","code":"make_diff_data(   formula,   data,   id = NULL,   wave = NULL,   use.wave = FALSE,   min.waves = 1,   weights = NULL,   offset = NULL,   asym = FALSE,   cumulative = FALSE,   escape.names = FALSE,   ... )"},{"path":"/reference/make_diff_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate differenced and asymmetric effects data — make_diff_data","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. use.wave wave included predictor? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. weights using weights, either name column data contains weights vector weights. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. asym Return asymmetric effects transformed data? Default FALSE. cumulative Return cumulative positive/negative differences, useful fixed effects estimation /generalized linear models? Default FALSE. escape.names Return syntactically valid variable names? Default FALSE. ... Ignored.","code":""},{"path":"/reference/make_diff_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate differenced and asymmetric effects data — make_diff_data","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) make_diff_data(wks ~ lwage + union, data = wages) #> # Panel data:    3,570 × 5 #> # entities:      id [595] #> # wave variable: t [2, 3, 4, ... (6 waves)] #>    id        t   wks  lwage union #>    <fct> <dbl> <dbl>  <dbl> <dbl> #>  1 1         2    11 0.160      0 #>  2 1         3    -3 0.276      0 #>  3 1         4    -1 0          0 #>  4 1         5     3 0.0650     0 #>  5 1         6    -7 0.112      0 #>  6 1         7    -3 0.0704     0 #>  7 2         2    -7 0.0513     0 #>  8 2         3     6 0.0488     1 #>  9 2         4    -3 0.281     -1 #> 10 2         5     0 0.153      0 #> # … with 3,560 more rows"},{"path":"/reference/make_wb_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for within-between modeling — make_wb_data","title":"Prepare data for within-between modeling — make_wb_data","text":"function allows users make changes data occur wbm() without fit model.","code":""},{"path":"/reference/make_wb_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for within-between modeling — make_wb_data","text":"","code":"make_wb_data(   formula,   data,   id = NULL,   wave = NULL,   model = \"w-b\",   detrend = FALSE,   use.wave = FALSE,   wave.factor = FALSE,   min.waves = 2,   balance.correction = FALSE,   dt.random = TRUE,   dt.order = 1,   weights = NULL,   offset = NULL,   interaction.style = c(\"double-demean\", \"demean\", \"raw\"),   ... )"},{"path":"/reference/make_wb_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for within-between modeling — make_wb_data","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. model One \"w-b\", \"within\", \"\", \"contextual\". See details options. detrend Adjust within-subject effects trends predictors? Default FALSE, research suggests better idea (see Curran Bauer (2011) reference). use.wave wave included predictor? Default FALSE. wave.factor wave variable treated unordered factor instead continuous? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. balance.correction Correct -subject effects unbalanced panels following procedure Curran Bauer (2011)? Default FALSE. dt.random detrending procedure performed random slope entity? Default TRUE short panels FALSE may better, fitting trend entities. dt.order detrending using detrend, order polynomial like specify relationship time predictors? Default 1, linear model. weights using weights, either name column data contains weights vector weights. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. interaction.style best way calculate interactions within models dispute. conventional way (\"demean\") first calculate product variables involved interaction variables means subtracted subtract mean product product term (see Schunk Perales (2017)). Giesselmann Schmidt-Catran (2020) show method carries -entity differences within models designed model . suggest alternate method (\"double-demean\") product term first calculated using de-meaned lower-order variables subject means subtracted product term. Another option simply use product term de-meaned variables (\"raw\"), Giesselmann Schmidt-Catran (2020) show method biases results towards zero effect. default \"double-demean\" emulating software goal, \"demean\" might preferred. ... Additional arguments provided lme4::lmer(), lme4::glmer(), lme4::glmer.nb().","code":""},{"path":"/reference/make_wb_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for within-between modeling — make_wb_data","text":"panel_data object requested specification.","code":""},{"path":"/reference/make_wb_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for within-between modeling — make_wb_data","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) make_wb_data(lwage ~ wks + union | fem, data = wages) #> # Panel data:    4,165 × 8 #> # entities:      id [595] #> # wave variable: t [1, 2, 3, ... (7 waves)] #>    id        t lwage   wks  union   fem `imean(wks)` `imean(union)` #>    <fct> <dbl> <dbl> <dbl>  <dbl> <dbl>        <dbl>          <dbl> #>  1 1         1  5.56 -5.57  0         0         37.6          0     #>  2 1         2  5.72  5.43  0         0         37.6          0     #>  3 1         3  6.00  2.43  0         0         37.6          0     #>  4 1         4  6.00  1.43  0         0         37.6          0     #>  5 1         5  6.06  4.43  0         0         37.6          0     #>  6 1         6  6.17 -2.57  0         0         37.6          0     #>  7 1         7  6.24 -5.57  0         0         37.6          0     #>  8 2         1  6.16  2.43 -0.143     0         31.6          0.143 #>  9 2         2  6.21 -4.57 -0.143     0         31.6          0.143 #> 10 2         3  6.26  1.43  0.857     0         31.6          0.143 #> # … with 4,155 more rows"},{"path":"/reference/model_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Make model frames for panel_data objects — model_frame","title":"Make model frames for panel_data objects — model_frame","text":"similar model.frame, designed specifically panel_data() data frames. workhorse wbm() may useful scripting use well.","code":""},{"path":"/reference/model_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make model frames for panel_data objects — model_frame","text":"","code":"model_frame(formula, data)"},{"path":"/reference/model_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make model frames for panel_data objects — model_frame","text":"formula formula. Note get individual-level mean incomplete data (e.g., panel attrition), use imean() rather mean(). data panel_data() frame.","code":""},{"path":"/reference/model_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make model frames for panel_data objects — model_frame","text":"panel_data() frame columns needed fit model described formula.","code":""},{"path":"/reference/model_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make model frames for panel_data objects — model_frame","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model_frame(lwage ~ wks + exp, data = wages) #> # Panel data:    4,165 × 5 #> # entities:      id [595] #> # wave variable: t [1, 2, 3, ... (7 waves)] #>    id        t lwage   wks   exp #>    <fct> <dbl> <dbl> <dbl> <dbl> #>  1 1         1  5.56    32     3 #>  2 1         2  5.72    43     4 #>  3 1         3  6.00    40     5 #>  4 1         4  6.00    39     6 #>  5 1         5  6.06    42     7 #>  6 1         6  6.17    35     8 #>  7 1         7  6.24    32     9 #>  8 2         1  6.16    34    30 #>  9 2         2  6.21    27    31 #> 10 2         3  6.26    33    32 #> # … with 4,155 more rows"},{"path":"/reference/nlsy.html","id":null,"dir":"Reference","previous_headings":"","what":"National Longitudinal Survey of Youth data — nlsy","title":"National Longitudinal Survey of Youth data — nlsy","text":"data come years 1990-1994 National Longitudinal Survey Youth, information 581 individuals. data \"wide\" format demonstration purposes.","code":""},{"path":"/reference/nlsy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"National Longitudinal Survey of Youth data — nlsy","text":"","code":"nlsy"},{"path":"/reference/nlsy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"National Longitudinal Survey of Youth data — nlsy","text":"data frame 581 rows 16 variables: momage Mother's age birth gender 0 boy, 1 girl momwork 1 mother works, 0 ) married 1 parents married, 0 hispanic 1 child Hispanic, 0 black 1 child black, 0 childage Child's age first interview anti90 measure anti-social behavior antisocial behavior measured scale 0 6, taken 1990 anti92 measure anti-social behavior antisocial behavior measured scale 0 6, taken 1992 anti94 measure anti-social behavior antisocial behavior measured scale 0 6, taken 1994 self90 measure self-esteem measured scale 6 24, taken 1990 self92 measure self-esteem measured scale 6 24, taken 1992 self94 measure self-esteem measured scale 6 24, taken 1994 pov90 1 family poverty, 0 , 1990 pov92 1 family poverty, 0 , 1992 pov94 1 family poverty, 0 , 1994","code":""},{"path":"/reference/nlsy.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"National Longitudinal Survey of Youth data — nlsy","text":"data originate U.S. Department Labor. particular subset used come Paul Allison via Statistical Horizons: https://statisticalhorizons.com/wp-content/uploads/nlsy.dta","code":""},{"path":"/reference/nobs.wbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of observations used in wbm models — nobs.wbm","title":"Number of observations used in wbm models — nobs.wbm","text":"S3 method allows retrieve either number observations number entities data used fit wbm objects.","code":""},{"path":"/reference/nobs.wbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of observations used in wbm models — nobs.wbm","text":"","code":"# S3 method for wbm nobs(object, entities = TRUE, ...)"},{"path":"/reference/nobs.wbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of observations used in wbm models — nobs.wbm","text":"object fitted model object. entities nobs return number entities panel number rows panel_data frame? Default TRUE, returning number entities. ... arguments passed methods.","code":""},{"path":"/reference/nobs.wbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of observations used in wbm models — nobs.wbm","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbm(lwage ~ lag(union) + wks, data = wages) nobs(model) #> [1] 595"},{"path":"/reference/panel_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create panel data frames — panel_data","title":"Create panel data frames — panel_data","text":"Format data use panelr.","code":""},{"path":"/reference/panel_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create panel data frames — panel_data","text":"","code":"panel_data(data, id = id, wave = wave, ...)  as_pdata.frame(data)  as_panel_data(data, ...)  # S3 method for default as_panel_data(data, id = id, wave = wave, ...)  # S3 method for pdata.frame as_panel_data(data, ...)  as_panel(data, ...)"},{"path":"/reference/panel_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create panel data frames — panel_data","text":"data data frame. id name column (unquoted) identifies participants/entities. new column created called id, overwriting column already name. wave name column (unquoted) identifies waves periods. new column created called wave, overwriting column already name. ... Attributes adding onto method. See tibble::new_tibble() run-logic.","code":""},{"path":"/reference/panel_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create panel data frames — panel_data","text":"panel_data object.","code":""},{"path":"/reference/panel_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create panel data frames — panel_data","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t)"},{"path":"/reference/predict.wbgee.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions and simulations from within-between GEE models — predict.wbgee","title":"Predictions and simulations from within-between GEE models — predict.wbgee","text":"methods facilitate fairly straightforward predictions wbgee models.","code":""},{"path":"/reference/predict.wbgee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions and simulations from within-between GEE models — predict.wbgee","text":"","code":"# S3 method for wbgee predict(   object,   newdata = NULL,   se.fit = FALSE,   raw = FALSE,   type = c(\"link\", \"response\"),   ... )"},{"path":"/reference/predict.wbgee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions and simulations from within-between GEE models — predict.wbgee","text":"object Object class inheriting \"lm\" newdata optional data frame look variables     predict.  omitted, fitted values used. se.fit switch indicating standard errors required. raw newdata geeglm model frame panel_data? TRUE indicates geeglm-style newdata, extra columns created wbgee. type Type prediction (response model term).  Can abbreviated. ... arguments passed methods.","code":""},{"path":"/reference/predict.wbgee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions and simulations from within-between GEE models — predict.wbgee","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbgee(lwage ~ lag(union) + wks, data = wages) # By default, assumes you're using the processed data for newdata predict(model) #> $fit #>        1        2        3        4        5        6        7        8  #> 6.589352 6.592908 6.594094 6.590537 6.598836 6.602393 6.534633 6.527519  #>        9       10       11       12       13       14       15       16  #> 6.545554 6.531076 6.522777 6.531076 6.774595 6.775780 6.773409 6.773409  #>       17       18       19       20       21       22       23       24  #> 6.773409 6.780522 6.716822 6.716822 6.713265 6.719193 6.709708 6.716822  #>       25       26       27       28       29       30       31       32  #> 6.728614 6.735727 6.723872 6.712950 6.712950 6.710579 6.690159 6.690159  #>       33       34       35       36       37       38       39       40  #> 6.690159 6.693715 6.692530 6.690159 6.738115 6.736930 6.740487 6.739301  #>       41       42       43       44       45       46       47       48  #> 6.739301 6.738115 6.764861 6.764861 6.764861 6.771975 6.763676 6.763676  #>       49       50       51       52       53       54       55       56  #> 6.716270 6.713899 6.716270 6.716270 6.721013 6.716270 6.657402 6.658588  #>       57       58       59       60       61       62       63       64  #> 6.660959 6.662144 6.672814 6.665701 6.674422 6.677979 6.677979 6.675608  #>       65       66       67       68       69       70       71       72  #> 6.711174 6.675608 6.733207 6.732022 6.732022 6.732022 6.732022 6.733207  #>       73       74       75       76       77       78       79       80  #> 6.712631 6.710260 6.712631 6.712631 6.715002 6.715002 6.674332 6.674332  #>       81       82       83       84       85       86       87       88  #> 6.675517 6.675517 6.675517 6.675517 6.702263 6.699892 6.702263 6.699892  #>       89       90       91       92       93       94       95       96  #> 6.708191 6.699892 6.730278 6.732649 6.732649 6.730278 6.730278 6.731463  #>       97       98       99      100      101      102      103      104  #> 6.723550 6.722364 6.721179 6.719993 6.725921 6.724735 6.705903 6.704717  #>      105      106      107      108      109      110      111      112  #> 6.704717 6.704717 6.703532 6.704717 6.671417 6.670231 6.673788 6.673788  #>      113      114      115      116      117      118      119      120  #> 6.699870 6.682087 6.724184 6.724184 6.725370 6.725370 6.724184 6.725370  #>      121      122      123      124      125      126      127      128  #> 6.722288 6.718732 6.718732 6.719917 6.723474 6.727031 6.701629 6.702814  #>      129      130      131      132      133      134      135      136  #> 6.700443 6.699258 6.694516 6.699258 6.732097 6.730912 6.732097 6.734469  #>      137      138      139      140      141      142      143      144  #> 6.735654 6.732097 6.711819 6.711819 6.710633 6.714190 6.711819 6.727482  #>      145      146      147      148      149      150      151      152  #> 6.641416 6.640231 6.642602 6.642602 6.641416 6.639045 6.713816 6.711445  #>      153      154      155      156      157      158      159      160  #> 6.712631 6.713816 6.713816 6.712631 6.678772 6.683514 6.681143 6.681143  #>      161      162      163      164      165      166      167      168  #> 6.687070 6.713152 6.735737 6.735737 6.735737 6.735737 6.736923 6.736923  #>      169      170      171      172      173      174      175      176  #> 6.729643 6.729643 6.729643 6.728458 6.729643 6.729643 6.713816 6.712631  #>      177      178      179      180      181      182      183      184  #> 6.711445 6.711445 6.716187 6.711445 6.698072 6.698072 6.699258 6.704000  #>      185      186      187      188      189      190      191      192  #> 6.699258 6.701629 6.720544 6.720544 6.721730 6.720544 6.722915 6.722915  #>      193      194      195      196      197      198      199      200  #> 6.730195 6.725453 6.730195 6.729009 6.726638 6.727824 6.718090 6.718090  #>      201      202      203      204      205      206      207      208  #> 6.716905 6.715719 6.718090 6.720461 6.685975 6.687161 6.685975 6.703758  #>      209      210      211      212      213      214      215      216  #> 6.687161 6.690717 6.721096 6.717539 6.717539 6.719910 6.717539 6.728209  #>      217      218      219      220      221      222      223      224  #> 6.733834 6.730278 6.731463 6.730278 6.732649 6.731463 6.751488 6.752674  #>      225      226      227      228      229      230      231      232  #> 6.752674 6.751488 6.752674 6.751488 6.736371 6.739928 6.737557 6.737557  #>      233      234      235      236      237      238      239      240  #> 6.735186 6.736371 6.677813 6.686111 6.682555 6.668328 6.670699 6.668328  #>      241      242      243      244      245      246      247      248  #> 6.730278 6.730278 6.730278 6.730278 6.732649 6.733834 6.728216 6.716361  #>      249      250      251      252      253      254      255      256  #> 6.717546 6.727031 6.717546 6.718732 6.711997 6.710811 6.709625 6.713182  #>      257      258      259      260      261      262      263      264  #> 6.714368 6.709625 6.703532 6.703532 6.704717 6.705903 6.705903 6.705903  #>      265      266      267      268      269      270      271      272  #> 6.735737 6.735737 6.735737 6.735737 6.735737 6.736923 6.728299 6.723557  #>      273      274      275      276      277      278      279      280  #> 6.724742 6.723557 6.724742 6.724742 6.715085 6.716270 6.716270 6.716270  #>      281      282      283      284      285      286      287      288  #> 6.717456 6.716270 6.717539 6.717539 6.717539 6.719910 6.728209 6.718725  #>      289      290      291      292      293      294      295      296  #> 6.711362 6.710177 6.708991 6.710177 6.707806 6.708991 6.670699 6.673070  #>      297      298      299      300      301      302      303      304  #> 6.667143 6.669514 6.686111 6.690854 6.699892 6.699892 6.701078 6.699892  #>      305      306      307      308      309      310      311      312  #> 6.701078 6.704634 6.716905 6.716905 6.718090 6.718090 6.718090 6.716905  #>      313      314      315      316      317      318      319      320  #> 6.715085 6.716270 6.715085 6.716270 6.717456 6.716270 6.766130 6.767315  #>      321      322      323      324      325      326      327      328  #> 6.767315 6.769687 6.769687 6.768501 6.744209 6.744209 6.746580 6.745395  #>      329      330      331      332      333      334      335      336  #> 6.746580 6.747766 6.744202 6.740645 6.740645 6.745387 6.743016 6.743016  #>      337      338      339      340      341      342      343      344  #> 6.716905 6.716905 6.716905 6.719276 6.718090 6.718090 6.731731 6.741216  #>      345      346      347      348      349      350      351      352  #> 6.731731 6.717254 6.731731 6.731731 6.707806 6.708991 6.710177 6.711362  #>      353      354      355      356      357      358      359      360  #> 6.708991 6.711362 6.721488 6.715560 6.709633 6.710818 6.712004 6.716746  #>      361      362      363      364      365      366      367      368  #> 6.648044 6.633567 6.634752 6.667947 6.645422 6.663205 6.733917 6.733917  #>      369      370      371      372      373      374      375      376  #> 6.733917 6.735103 6.735103 6.735103 6.731463 6.730278 6.731463 6.731463  #>      377      378      379      380      381      382      383      384  #> 6.732649 6.730278 6.705903 6.702346 6.703532 6.707088 6.704717 6.701161  #>      385      386      387      388      389      390      391      392  #> 6.699182 6.697997 6.696811 6.708666 6.697997 6.697997 6.709625 6.711997  #>      393      394      395      396      397      398      399      400  #> 6.709625 6.711997 6.715553 6.710811 6.735737 6.736923 6.735737 6.735737  #>      401      402      403      404      405      406      407      408  #> 6.735737 6.736923 6.708364 6.714292 6.710735 6.708364 6.708364 6.709550  #>      409      410      411      412      413      414      415      416  #> 6.711362 6.710177 6.710177 6.710177 6.708991 6.708991 6.721730 6.720544  #>      417      418      419      420      421      422      423      424  #> 6.720544 6.721730 6.721730 6.721730 6.715085 6.715085 6.716270 6.718642  #>      425      426      427      428      429      430      431      432  #> 6.716270 6.716270 6.662069 6.659697 6.662069 6.662069 6.662069 6.659697  #>      433      434      435      436      437      438      439      440  #> 6.746029 6.746029 6.747215 6.748400 6.748400 6.748400 6.738191 6.738191  #>      441      442      443      444      445      446      447      448  #> 6.745304 6.739377 6.739377 6.737006 6.665399 6.665399 6.697408 6.666584  #>      449      450      451      452      453      454      455      456  #> 6.665399 6.670141 6.728404 6.724848 6.727219 6.728404 6.742882 6.740511  #>      457      458      459      460      461      462      463      464  #> 6.660574 6.661759 6.662945 6.675986 6.687841 6.675986 6.716988 6.724101  #>      465      466      467      468      469      470      471      472  #> 6.721730 6.720544 6.719359 6.719359 6.715719 6.715719 6.715719 6.731131  #>      473      474      475      476      477      478      479      480  #> 6.715719 6.715719 6.735737 6.735737 6.735737 6.735737 6.735737 6.735737  #>      481      482      483      484      485      486      487      488  #> 6.745365 6.746551 6.744180 6.744180 6.729702 6.728517 6.709633 6.715560  #>      489      490      491      492      493      494      495      496  #> 6.722674 6.709633 6.708447 6.725045 6.725928 6.724742 6.730670 6.723557  #>      497      498      499      500      501      502      503      504  #> 6.724742 6.725928 6.667355 6.650757 6.653128 6.649572 6.667355 6.651943  #>      505      506      507      508      509      510      511      512  #> 6.766047 6.764861 6.764861 6.767232 6.764861 6.766047 6.669590 6.682631  #>      513      514      515      516      517      518      519      520  #> 6.669590 6.681445 6.667218 6.670775 6.709633 6.729787 6.708447 6.713189  #>      521      522      523      524      525      526      527      528  #> 6.709633 6.709633 6.718090 6.718090 6.718090 6.718090 6.719276 6.716905  #>      529      530      531      532      533      534      535      536  #> 6.728375 6.724818 6.724818 6.726004 6.726004 6.726004 6.714451 6.714451  #>      537      538      539      540      541      542      543      544  #> 6.714451 6.715636 6.715636 6.713265 6.686414 6.663888 6.652033 6.652033  #>      545      546      547      548      549      550      551      552  #> 6.660332 6.661517 6.666852 6.671595 6.679893 6.668038 6.704790 6.654746  #>      553      554      555      556      557      558      559      560  #> 6.712828 6.678196 6.679382 6.693859 6.698601 6.716385 6.621315 6.618944  #>      561      562      563      564      565      566      567      568  #> 6.621315 6.618944 6.615388 6.623687 6.714458 6.729870 6.715643 6.716829  #>      569      570      571      572      573      574      575      576  #> 6.715643 6.715643 6.730278 6.730278 6.731463 6.731463 6.732649 6.731463  #>      577      578      579      580      581      582      583      584  #> 6.710260 6.710260 6.711445 6.711445 6.711445 6.712631 6.747925 6.747925  #>      585      586      587      588      589      590      591      592  #> 6.747925 6.750296 6.750296 6.750296 6.711445 6.710260 6.716187 6.713816  #>      593      594      595      596      597      598      599      600  #> 6.716187 6.711445 6.736371 6.736371 6.736371 6.737557 6.736371 6.736371  #>      601      602      603      604      605      606      607      608  #> 6.666501 6.679542 6.667687 6.671243 6.670058 6.668872 6.728458 6.729643  #>      609      610      611      612      613      614      615      616  #> 6.730829 6.729643 6.729643 6.729643 6.637052 6.626382 6.627568 6.628753  #>      617      618      619      620      621      622      623      624  #> 6.628753 6.627568 6.738191 6.739377 6.739377 6.739377 6.740562 6.741748  #>      625      626      627      628      629      630      631      632  #> 6.712631 6.713816 6.712631 6.711445 6.715002 6.713816 6.729092 6.730278  #>      633      634      635      636      637      638      639      640  #> 6.731463 6.731463 6.732649 6.731463 6.683514 6.683514 6.687070 6.691813  #>      641      642      643      644      645      646      647      648  #> 6.690627 6.684699 6.704517 6.697153 6.706888 6.708074 6.709259 6.711630  #>      649      650      651      652      653      654      655      656  #> 6.729853 6.715375 6.716561 6.716561 6.716561 6.714190 6.718649 6.718649  #>      657      658      659      660      661      662      663      664  #> 6.718649 6.717463 6.717463 6.725762 6.738742 6.738742 6.738742 6.736371  #>      665      666      667      668      669      670      671      672  #> 6.735186 6.738742 6.713265 6.713265 6.714451 6.716822 6.716822 6.714451  #>      673      674      675      676      677      678      679      680  #> 6.663164 6.646566 6.648937 6.648937 6.659607 6.659607 6.733917 6.733917  #>      681      682      683      684      685      686      687      688  #> 6.733917 6.735103 6.735103 6.735103 6.726004 6.726004 6.726004 6.726004  #>      689      690      691      692      693      694      695      696  #> 6.726004 6.727189 6.759402 6.760587 6.761773 6.759402 6.760587 6.761773  #>      697      698      699      700      701      702      703      704  #> 6.613192 6.624113 6.620557 6.624113 6.638340 6.619371 6.708998 6.708998  #>      705      706      707      708      709      710      711      712  #> 6.710184 6.717297 6.714926 6.710184 6.743016 6.741831 6.744202 6.740645  #>      713      714      715      716      717      718      719      720  #> 6.743016 6.743016 6.737557 6.737557 6.738742 6.737557 6.737557 6.738742  #>      721      722      723      724      725      726      727      728  #> 6.731463 6.731463 6.732649 6.731463 6.730278 6.731463 6.756314 6.756314  #>      729      730      731      732      733      734      735      736  #> 6.755128 6.756314 6.755128 6.753942 6.691269 6.682970 6.686526 6.686526  #>      737      738      739      740      741      742      743      744  #> 6.696011 6.707866 6.724818 6.726004 6.726004 6.726004 6.726004 6.728375  #>      745      746      747      748      749      750      751      752  #> 6.738750 6.738750 6.738750 6.738750 6.738750 6.738750 6.723633 6.726004  #>      753      754      755      756      757      758      759      760  #> 6.723633 6.723633 6.724818 6.722447 6.729016 6.729016 6.732573 6.729016  #>      761      762      763      764      765      766      767      768  #> 6.727831 6.742057 6.701273 6.677562 6.692039 6.693225 6.701524 6.702709  #>      769      770      771      772      773      774      775      776  #> 6.758133 6.756948 6.756948 6.756948 6.756948 6.756948 6.723474 6.722288  #>      777      778      779      780      781      782      783      784  #> 6.722288 6.722288 6.722288 6.722288 6.687629 6.685258 6.685258 6.687629  #>      785      786      787      788      789      790      791      792  #> 6.693557 6.690000 6.736371 6.737557 6.737557 6.736371 6.742299 6.737557  #>      793      794      795      796      797      798      799      800  #> 6.753942 6.753942 6.753942 6.753942 6.753942 6.765798 6.756314 6.752757  #>      801      802      803      804      805      806      807      808  #> 6.755128 6.755128 6.756314 6.755128 6.716905 6.719276 6.718090 6.718090  #>      809      810      811      812      813      814      815      816  #> 6.718090 6.718090 6.727272 6.728458 6.727272 6.729643 6.732015 6.730829  #>      817      818      819      820      821      822      823      824  #> 6.731463 6.731463 6.731463 6.730278 6.731463 6.730278 6.708991 6.708991  #>      825      826      827      828      829      830      831      832  #> 6.707806 6.712548 6.708991 6.710177 6.741831 6.741831 6.743016 6.741831  #>      833      834      835      836      837      838      839      840  #> 6.744202 6.744202 6.730836 6.730836 6.729651 6.730836 6.742692 6.726094  #>      841      842      843      844      845      846      847      848  #> 6.719193 6.718007 6.710894 6.712080 6.712080 6.713265 6.705269 6.701712  #>      849      850      851      852      853      854      855      856  #> 6.702897 6.702897 6.702897 6.702897 6.724184 6.724184 6.724184 6.725370  #>      857      858      859      860      861      862      863      864  #> 6.725370 6.725370 6.724818 6.726004 6.726004 6.726004 6.727189 6.727189  #>      865      866      867      868      869      870      871      872  #> 6.726004 6.726004 6.726004 6.726004 6.726004 6.726004 6.716270 6.716270  #>      873      874      875      876      877      878      879      880  #> 6.716270 6.716270 6.716270 6.716270 6.712631 6.712631 6.712631 6.713816  #>      881      882      883      884      885      886      887      888  #> 6.711445 6.713816 6.724818 6.724818 6.728375 6.723633 6.724818 6.726004  #>      889      890      891      892      893      894      895      896  #> 6.615856 6.615856 6.615856 6.612299 6.615856 6.614670 6.605571 6.611499  #>      897      898      899      900      901      902      903      904  #> 6.593716 6.602015 6.599644 6.643509 6.719359 6.724101 6.720544 6.719359  #>      905      906      907      908      909      910      911      912  #> 6.721730 6.724101 6.531752 6.527010 6.532938 6.576803 6.576803 6.542422  #>      913      914      915      916      917      918      919      920  #> 6.669258 6.655031 6.656217 6.687041 6.653846 6.656217 6.715553 6.708440  #>      921      922      923      924      925      926      927      928  #> 6.714368 6.715553 6.707254 6.709625 6.716822 6.714451 6.714451 6.714451  #>      929      930      931      932      933      934      935      936  #> 6.714451 6.714451 6.710177 6.710177 6.710177 6.708991 6.708991 6.708991  #>      937      938      939      940      941      942      943      944  #> 6.763676 6.766047 6.766047 6.764861 6.764861 6.764861 6.702897 6.702897  #>      945      946      947      948      949      950      951      952  #> 6.702897 6.702897 6.702897 6.702897 6.733283 6.733283 6.729726 6.734469  #>      953      954      955      956      957      958      959      960  #> 6.732097 6.733283 6.632952 6.634137 6.635323 6.634137 6.634137 6.638879  #>      961      962      963      964      965      966      967      968  #> 6.747925 6.747925 6.747925 6.747925 6.755038 6.747925 6.729946 6.716905  #>      969      970      971      972      973      974      975      976  #> 6.716905 6.714534 6.714534 6.716905 6.767950 6.769135 6.771506 6.771506  #>      977      978      979      980      981      982      983      984  #> 6.770321 6.771506 6.702263 6.697521 6.697521 6.702263 6.703449 6.708191  #>      985      986      987      988      989      990      991      992  #> 6.739384 6.739384 6.739384 6.751239 6.741755 6.745312 6.710811 6.710811  #>      993      994      995      996      997      998      999     1000  #> 6.711997 6.716739 6.709625 6.710811 6.597485 6.590371 6.571403 6.571403  #>     1001     1002     1003     1004     1005     1006     1007     1008  #> 6.598670 6.585629 6.699755 6.697384 6.707120 6.707120 6.692642 6.690271  #>     1009     1010     1011     1012     1013     1014     1015     1016  #> 6.743016 6.741831 6.741831 6.741831 6.744202 6.743016 6.715636 6.713265  #>     1017     1018     1019     1020     1021     1022     1023     1024  #> 6.712080 6.709708 6.713265 6.713265 6.694516 6.695701 6.696887 6.701629  #>     1025     1026     1027     1028     1029     1030     1031     1032  #> 6.693330 6.721783 6.715636 6.715636 6.716822 6.714451 6.713265 6.712080  #>     1033     1034     1035     1036     1037     1038     1039     1040  #> 6.696804 6.696804 6.693247 6.699175 6.694433 6.700360 6.669348 6.682389  #>     1041     1042     1043     1044     1045     1046     1047     1048  #> 6.662235 6.659863 6.658678 6.659863 6.726638 6.729009 6.727824 6.729009  #>     1049     1050     1051     1052     1053     1054     1055     1056  #> 6.726638 6.727824 6.732097 6.732097 6.732097 6.732097 6.733283 6.735654  #>     1057     1058     1059     1060     1061     1062     1063     1064  #> 6.730912 6.734469 6.733283 6.735654 6.729726 6.732097 6.729009 6.727824  #>     1065     1066     1067     1068     1069     1070     1071     1072  #> 6.726638 6.725453 6.730195 6.727824 6.717456 6.715085 6.713899 6.718642  #>     1073     1074     1075     1076     1077     1078     1079     1080  #> 6.716270 6.715085 6.736288 6.733917 6.733917 6.732732 6.733917 6.733917  #>     1081     1082     1083     1084     1085     1086     1087     1088  #> 6.695881 6.652950 6.654136 6.654136 6.654136 6.674290 6.745470 6.745470  #>     1089     1090     1091     1092     1093     1094     1095     1096  #> 6.746656 6.746656 6.746656 6.745470 6.594011 6.590454 6.594011 6.595197  #>     1097     1098     1099     1100     1101     1102     1103     1104  #> 6.591640 6.588083 6.707462 6.707462 6.707462 6.707462 6.707462 6.721939  #>     1105     1106     1107     1108     1109     1110     1111     1112  #> 6.738750 6.739935 6.739935 6.742306 6.742306 6.741121 6.652494 6.652494  #>     1113     1114     1115     1116     1117     1118     1119     1120  #> 6.651308 6.653680 6.653680 6.670277 6.642300 6.647042 6.669567 6.674309  #>     1121     1122     1123     1124     1125     1126     1127     1128  #> 6.643485 6.650598 6.712631 6.712631 6.712631 6.713816 6.715002 6.712631  #>     1129     1130     1131     1132     1133     1134     1135     1136  #> 6.719910 6.718725 6.719910 6.719910 6.719910 6.718725 6.740011 6.741197  #>     1137     1138     1139     1140     1141     1142     1143     1144  #> 6.741197 6.742382 6.741197 6.741197 6.732739 6.732739 6.732739 6.741038  #>     1145     1146     1147     1148     1149     1150     1151     1152  #> 6.744594 6.743409 6.660498 6.668797 6.700806 6.666425 6.662869 6.666425  #>     1153     1154     1155     1156     1157     1158     1159     1160  #> 6.733283 6.732097 6.734469 6.733283 6.729726 6.732097 6.750771 6.747215  #>     1161     1162     1163     1164     1165     1166     1167     1168  #> 6.747215 6.747215 6.743658 6.746029 6.748476 6.748476 6.748476 6.748476  #>     1169     1170     1171     1172     1173     1174     1175     1176  #> 6.747290 6.746105 6.708440 6.709625 6.710811 6.708440 6.708440 6.720295  #>     1177     1178     1179     1180     1181     1182     1183     1184  #> 6.713899 6.713899 6.713899 6.715085 6.716270 6.726940 6.690793 6.691979  #>     1185     1186     1187     1188     1189     1190     1191     1192  #> 6.694350 6.694350 6.694350 6.694350 6.730278 6.732649 6.730278 6.731463  #>     1193     1194     1195     1196     1197     1198     1199     1200  #> 6.732649 6.730278 6.602588 6.604959 6.604959 6.604959 6.618251 6.617066  #>     1201     1202     1203     1204     1205     1206     1207     1208  #> 6.735661 6.734476 6.735661 6.735661 6.738032 6.735661 6.739377 6.738191  #>     1209     1210     1211     1212     1213     1214     1215     1216  #> 6.738191 6.741748 6.739377 6.739377 6.742465 6.743651 6.744836 6.743651  #>     1217     1218     1219     1220     1221     1222     1223     1224  #> 6.743651 6.742465 6.677137 6.680694 6.674515 6.700848 6.681879 6.679508  #>     1225     1226     1227     1228     1229     1230     1231     1232  #> 6.658044 6.665157 6.672270 6.658044 6.674641 6.674641 6.724818 6.724818  #>     1233     1234     1235     1236     1237     1238     1239     1240  #> 6.726004 6.726004 6.726004 6.728375 6.748061 6.727907 6.727907 6.727907  #>     1241     1242     1243     1244     1245     1246     1247     1248  #> 6.727907 6.729092 6.661361 6.656619 6.672283 6.671097 6.681767 6.666104  #>     1249     1250     1251     1252     1253     1254     1255     1256  #> 6.658422 6.653680 6.654865 6.657236 6.658422 6.656051 6.718098 6.718098  #>     1257     1258     1259     1260     1261     1262     1263     1264  #> 6.718098 6.719283 6.721654 6.721654 6.730829 6.729643 6.729643 6.726087  #>     1265     1266     1267     1268     1269     1270     1271     1272  #> 6.729643 6.730829 6.723550 6.722364 6.722364 6.724735 6.722364 6.722364  #>     1273     1274     1275     1276     1277     1278     1279     1280  #> 6.726004 6.726004 6.723633 6.727189 6.726004 6.727189 6.727189 6.726004  #>     1281     1282     1283     1284     1285     1286     1287     1288  #> 6.726004 6.726004 6.726004 6.726004 6.733917 6.733917 6.738659 6.731546  #>     1289     1290     1291     1292     1293     1294     1295     1296  #> 6.732732 6.733917 6.720544 6.720544 6.720544 6.722915 6.721730 6.721730  #>     1297     1298     1299     1300     1301     1302     1303     1304  #> 6.735737 6.735737 6.734552 6.735737 6.736923 6.736923 6.728020 6.684155  #>     1305     1306     1307     1308     1309     1310     1311     1312  #> 6.684155 6.685341 6.684155 6.684155 6.725867 6.719939 6.734417 6.719939  #>     1313     1314     1315     1316     1317     1318     1319     1320  #> 6.732046 6.717568 6.691820 6.689449 6.690634 6.691820 6.687078 6.685892  #>     1321     1322     1323     1324     1325     1326     1327     1328  #> 6.704225 6.705410 6.723445 6.722259 6.722259 6.722259 6.674966 6.678523  #>     1329     1330     1331     1332     1333     1334     1335     1336  #> 6.686821 6.677337 6.673780 6.669038 6.731463 6.730278 6.731463 6.730278  #>     1337     1338     1339     1340     1341     1342     1343     1344  #> 6.731463 6.732649 6.647729 6.642987 6.635874 6.620462 6.626390 6.616905  #>     1345     1346     1347     1348     1349     1350     1351     1352  #> 6.727824 6.727824 6.727824 6.727824 6.727824 6.727824 6.724267 6.725453  #>     1353     1354     1355     1356     1357     1358     1359     1360  #> 6.729009 6.726638 6.734937 6.726638 6.707889 6.718559 6.712631 6.712631  #>     1361     1362     1363     1364     1365     1366     1367     1368  #> 6.712631 6.712631 6.737557 6.737557 6.737557 6.737557 6.737557 6.738742  #>     1369     1370     1371     1372     1373     1374     1375     1376  #> 6.649271 6.634793 6.649271 6.635979 6.632422 6.632422 6.770321 6.770321  #>     1377     1378     1379     1380     1381     1382     1383     1384  #> 6.770321 6.770321 6.770321 6.770321 6.721730 6.720544 6.721730 6.720544  #>     1385     1386     1387     1388     1389     1390     1391     1392  #> 6.721730 6.721730 6.690532 6.690532 6.692903 6.694089 6.706195 6.691718  #>     1393     1394     1395     1396     1397     1398     1399     1400  #> 6.725086 6.727458 6.723901 6.723901 6.715351 6.736942 6.732022 6.730836  #>     1401     1402     1403     1404     1405     1406     1407     1408  #> 6.730836 6.728465 6.730836 6.732022 6.698072 6.700443 6.698072 6.700443  #>     1409     1410     1411     1412     1413     1414     1415     1416  #> 6.707557 6.696887 6.720544 6.720544 6.720544 6.721730 6.721730 6.721730  #>     1417     1418     1419     1420     1421     1422     1423     1424  #> 6.604930 6.596631 6.604930 6.600188 6.600188 6.604930 6.756599 6.739750  #>     1425     1426     1427     1428     1429     1430     1431     1432  #> 6.742121 6.742121 6.744492 6.744492 6.708357 6.708357 6.708357 6.708357  #>     1433     1434     1435     1436     1437     1438     1439     1440  #> 6.708357 6.705986 6.756948 6.756948 6.756948 6.756948 6.756948 6.758133  #>     1441     1442     1443     1444     1445     1446     1447     1448  #> 6.685073 6.689815 6.692186 6.685073 6.691000 6.712591 6.705276 6.704090  #>     1449     1450     1451     1452     1453     1454     1455     1456  #> 6.710018 6.701719 6.705276 6.712389 6.722205 6.725762 6.722205 6.713907  #>     1457     1458     1459     1460     1461     1462     1463     1464  #> 6.715092 6.716278 6.718090 6.718090 6.724018 6.713348 6.713348 6.713348  #>     1465     1466     1467     1468     1469     1470     1471     1472  #> 6.704634 6.703449 6.697521 6.697521 6.697521 6.709376 6.668643 6.656536  #>     1473     1474     1475     1476     1477     1478     1479     1480  #> 6.653230 6.639004 6.647303 6.644932 6.733751 6.726638 6.726638 6.726638  #>     1481     1482     1483     1484     1485     1486     1487     1488  #> 6.726638 6.727824 6.722998 6.732483 6.721813 6.720627 6.722998 6.726555  #>     1489     1490     1491     1492     1493     1494     1495     1496  #> 6.714451 6.714451 6.715636 6.714451 6.715636 6.714451 6.746580 6.745395  #>     1497     1498     1499     1500     1501     1502     1503     1504  #> 6.745395 6.745395 6.745395 6.745395 6.733283 6.733283 6.732097 6.733283  #>     1505     1506     1507     1508     1509     1510     1511     1512  #> 6.732097 6.733283 6.719276 6.716905 6.718090 6.716905 6.718090 6.719276  #>     1513     1514     1515     1516     1517     1518     1519     1520  #> 6.720688 6.700534 6.700534 6.718317 6.700534 6.700534 6.670775 6.671961  #>     1521     1522     1523     1524     1525     1526     1527     1528  #> 6.670775 6.670775 6.670775 6.699228 6.677407 6.661061 6.645649 6.657504  #>     1529     1530     1531     1532     1533     1534     1535     1536  #> 6.649206 6.645649 6.678789 6.680225 6.680225 6.680225 6.681411 6.682596  #>     1537     1538     1539     1540     1541     1542     1543     1544  #> 6.735661 6.735661 6.735661 6.735661 6.735661 6.735661 6.690710 6.688339  #>     1545     1546     1547     1548     1549     1550     1551     1552  #> 6.689525 6.691896 6.683597 6.690710 6.703615 6.730882 6.704800 6.703615  #>     1553     1554     1555     1556     1557     1558     1559     1560  #> 6.704800 6.702429 6.724818 6.726004 6.726004 6.727189 6.727189 6.726004  #>     1561     1562     1563     1564     1565     1566     1567     1568  #> 6.704808 6.705993 6.720220 6.708364 6.710735 6.705993 6.727824 6.729009  #>     1569     1570     1571     1572     1573     1574     1575     1576  #> 6.727824 6.727824 6.726638 6.727824 6.675820 6.663964 6.660408 6.658036  #>     1577     1578     1579     1580     1581     1582     1583     1584  #> 6.656851 6.658036 6.644331 6.638404 6.643146 6.652630 6.625363 6.626548  #>     1585     1586     1587     1588     1589     1590     1591     1592  #> 6.745312 6.741755 6.740570 6.742941 6.741755 6.742941 6.686360 6.683989  #>     1593     1594     1595     1596     1597     1598     1599     1600  #> 6.686360 6.682804 6.683989 6.685175 6.746029 6.746029 6.747215 6.747215  #>     1601     1602     1603     1604     1605     1606     1607     1608  #> 6.748400 6.749586 6.750930 6.750930 6.752115 6.750930 6.749744 6.750930  #>     1609     1610     1611     1612     1613     1614     1615     1616  #> 6.775780 6.773409 6.774595 6.774595 6.776966 6.775780 6.713265 6.715636  #>     1617     1618     1619     1620     1621     1622     1623     1624  #> 6.715636 6.715636 6.715636 6.715636 6.739377 6.739377 6.739377 6.739377  #>     1625     1626     1627     1628     1629     1630     1631     1632  #> 6.739377 6.739377 6.735103 6.732732 6.735103 6.735103 6.733917 6.733917  #>     1633     1634     1635     1636     1637     1638     1639     1640  #> 6.743960 6.732105 6.735661 6.734476 6.734476 6.736847 6.721730 6.720544  #>     1641     1642     1643     1644     1645     1646     1647     1648  #> 6.721730 6.720544 6.721730 6.721730 6.701161 6.701161 6.701161 6.701161  #>     1649     1650     1651     1652     1653     1654     1655     1656  #> 6.701161 6.702346 6.757031 6.758216 6.767701 6.759402 6.761773 6.760587  #>     1657     1658     1659     1660     1661     1662     1663     1664  #> 6.703532 6.705903 6.704717 6.704717 6.704717 6.704717 6.729643 6.729643  #>     1665     1666     1667     1668     1669     1670     1671     1672  #> 6.729643 6.730829 6.728458 6.730829 6.759953 6.758768 6.758768 6.758768  #>     1673     1674     1675     1676     1677     1678     1679     1680  #> 6.758768 6.758768 6.762324 6.756397 6.758768 6.759953 6.761139 6.757582  #>     1681     1682     1683     1684     1685     1686     1687     1688  #> 6.741204 6.742389 6.741204 6.741204 6.741204 6.742389 6.714451 6.713265  #>     1689     1690     1691     1692     1693     1694     1695     1696  #> 6.713265 6.714451 6.718007 6.714451 6.767315 6.768501 6.768501 6.768501  #>     1697     1698     1699     1700     1701     1702     1703     1704  #> 6.769687 6.769687 6.753225 6.749669 6.750854 6.749669 6.749669 6.750854  #>     1705     1706     1707     1708     1709     1710     1711     1712  #> 6.721096 6.718725 6.718725 6.719910 6.719910 6.719910 6.740830 6.740830  #>     1713     1714     1715     1716     1717     1718     1719     1720  #> 6.739645 6.740830 6.726353 6.743202 6.694274 6.688346 6.688346 6.687161  #>     1721     1722     1723     1724     1725     1726     1727     1728  #> 6.699016 6.696645 6.718725 6.718725 6.718725 6.718725 6.721096 6.722281  #>     1729     1730     1731     1732     1733     1734     1735     1736  #> 6.728458 6.729643 6.729643 6.729643 6.729643 6.730829 6.736923 6.734552  #>     1737     1738     1739     1740     1741     1742     1743     1744  #> 6.735737 6.735737 6.736923 6.736923 6.718642 6.713899 6.715085 6.716270  #>     1745     1746     1747     1748     1749     1750     1751     1752  #> 6.717456 6.717456 6.710811 6.711997 6.711997 6.710811 6.711997 6.710811  #>     1753     1754     1755     1756     1757     1758     1759     1760  #> 6.733925 6.733925 6.733925 6.733925 6.733925 6.733925 6.734476 6.742775  #>     1761     1762     1763     1764     1765     1766     1767     1768  #> 6.733290 6.735661 6.734476 6.735661 6.738115 6.738115 6.740487 6.739301  #>     1769     1770     1771     1772     1773     1774     1775     1776  #> 6.739301 6.739301 6.735632 6.719969 6.719969 6.745116 6.732075 6.732075  #>     1777     1778     1779     1780     1781     1782     1783     1784  #> 6.699951 6.716548 6.715614 6.714429 6.715614 6.714429 6.733917 6.733917  #>     1785     1786     1787     1788     1789     1790     1791     1792  #> 6.735103 6.736288 6.733917 6.733917 6.735737 6.736923 6.735737 6.735737  #>     1793     1794     1795     1796     1797     1798     1799     1800  #> 6.735737 6.735737 6.725453 6.725453 6.730195 6.727824 6.730195 6.730195  #>     1801     1802     1803     1804     1805     1806     1807     1808  #> 6.713265 6.713265 6.714451 6.716822 6.716822 6.714451 6.610397 6.609211  #>     1809     1810     1811     1812     1813     1814     1815     1816  #> 6.608025 6.611582 6.611582 6.610397 6.732097 6.733283 6.733283 6.730912  #>     1817     1818     1819     1820     1821     1822     1823     1824  #> 6.733283 6.734469 6.780054 6.780054 6.780054 6.780054 6.780054 6.780054  #>     1825     1826     1827     1828     1829     1830     1831     1832  #> 6.726004 6.726004 6.726004 6.724818 6.728375 6.727189 6.732097 6.732097  #>     1833     1834     1835     1836     1837     1838     1839     1840  #> 6.733283 6.733283 6.733283 6.733283 6.755211 6.757582 6.761139 6.758768  #>     1841     1842     1843     1844     1845     1846     1847     1848  #> 6.761139 6.756397 6.707179 6.709550 6.709550 6.709550 6.716663 6.714292  #>     1849     1850     1851     1852     1853     1854     1855     1856  #> 6.686385 6.689941 6.684948 6.663608 6.679020 6.663608 6.735110 6.750522  #>     1857     1858     1859     1860     1861     1862     1863     1864  #> 6.735110 6.735110 6.735110 6.736296 6.699400 6.719554 6.715063 6.715063  #>     1865     1866     1867     1868     1869     1870     1871     1872  #> 6.723362 6.715063 6.729651 6.732022 6.729651 6.730836 6.729651 6.729651  #>     1873     1874     1875     1876     1877     1878     1879     1880  #> 6.722998 6.722998 6.724184 6.725370 6.725370 6.727741 6.738540 6.760131  #>     1881     1882     1883     1884     1885     1886     1887     1888  #> 6.753018 6.753018 6.754203 6.753018 6.651943 6.664984 6.651943 6.650757  #>     1889     1890     1891     1892     1893     1894     1895     1896  #> 6.662613 6.650757 6.738825 6.742382 6.741197 6.742382 6.741197 6.741197  #>     1897     1898     1899     1900     1901     1902     1903     1904  #> 6.627183 6.646151 6.644966 6.628368 6.630739 6.656821 6.675974 6.672417  #>     1905     1906     1907     1908     1909     1910     1911     1912  #> 6.677159 6.716533 6.674788 6.675974 6.717463 6.721020 6.717463 6.717463  #>     1913     1914     1915     1916     1917     1918     1919     1920  #> 6.717463 6.725762 6.725370 6.722998 6.722998 6.727741 6.721813 6.727741  #>     1921     1922     1923     1924     1925     1926     1927     1928  #> 6.763042 6.763042 6.763042 6.763042 6.765413 6.764227 6.713899 6.716270  #>     1929     1930     1931     1932     1933     1934     1935     1936  #> 6.717456 6.716270 6.716270 6.717456 6.722364 6.721179 6.722364 6.721179  #>     1937     1938     1939     1940     1941     1942     1943     1944  #> 6.725921 6.724735 6.659312 6.674724 6.668797 6.680652 6.662869 6.661683  #>     1945     1946     1947     1948     1949     1950     1951     1952  #> 6.739377 6.739377 6.739377 6.739377 6.739377 6.739377 6.706537 6.706537  #>     1953     1954     1955     1956     1957     1958     1959     1960  #> 6.706537 6.706537 6.706537 6.706537 6.600478 6.598107 6.602849 6.602849  #>     1961     1962     1963     1964     1965     1966     1967     1968  #> 6.618512 6.604035 6.729038 6.729038 6.742331 6.743516 6.726667 6.727853  #>     1969     1970     1971     1972     1973     1974     1975     1976  #> 6.718090 6.718090 6.718090 6.718090 6.718090 6.718090 6.588552 6.588552  #>     1977     1978     1979     1980     1981     1982     1983     1984  #> 6.589737 6.589737 6.589737 6.588552 6.711504 6.733095 6.712690 6.728353  #>     1985     1986     1987     1988     1989     1990     1991     1992  #> 6.727167 6.728353 6.676235 6.675049 6.678606 6.677420 6.678606 6.676235  #>     1993     1994     1995     1996     1997     1998     1999     2000  #> 6.748400 6.744843 6.749586 6.747215 6.747215 6.747215 6.729092 6.729092  #>     2001     2002     2003     2004     2005     2006     2007     2008  #> 6.730278 6.738576 6.729092 6.731463 6.697521 6.701078 6.703449 6.698707  #>     2009     2010     2011     2012     2013     2014     2015     2016  #> 6.702263 6.699892 6.733283 6.732097 6.734469 6.729726 6.732097 6.735654  #>     2017     2018     2019     2020     2021     2022     2023     2024  #> 6.744285 6.744285 6.746656 6.745470 6.746656 6.746656 6.746029 6.746029  #>     2025     2026     2027     2028     2029     2030     2031     2032  #> 6.747215 6.748400 6.748400 6.748400 6.724818 6.726004 6.727189 6.726004  #>     2033     2034     2035     2036     2037     2038     2039     2040  #> 6.728375 6.727189 6.688815 6.682887 6.682887 6.682887 6.682887 6.682887  #>     2041     2042     2043     2044     2045     2046     2047     2048  #> 6.721730 6.720544 6.721730 6.720544 6.721730 6.720544 6.715375 6.716561  #>     2049     2050     2051     2052     2053     2054     2055     2056  #> 6.715375 6.729853 6.715375 6.716561 6.687444 6.688629 6.703107 6.688629  #>     2057     2058     2059     2060     2061     2062     2063     2064  #> 6.689815 6.692186 6.724101 6.719359 6.722915 6.719359 6.720544 6.721730  #>     2065     2066     2067     2068     2069     2070     2071     2072  #> 6.763042 6.763042 6.763042 6.764227 6.764227 6.764227 6.642768 6.645139  #>     2073     2074     2075     2076     2077     2078     2079     2080  #> 6.651067 6.648696 6.652252 6.647510 6.595914 6.599470 6.598285 6.595914  #>     2081     2082     2083     2084     2085     2086     2087     2088  #> 6.595914 6.599470 6.651943 6.649572 6.650757 6.650757 6.666169 6.678025  #>     2089     2090     2091     2092     2093     2094     2095     2096  #> 6.733283 6.732097 6.732097 6.733283 6.734469 6.733283 6.696272 6.686787  #>     2097     2098     2099     2100     2101     2102     2103     2104  #> 6.672310 6.686787 6.689158 6.690344 6.729702 6.730888 6.741809 6.746551  #>     2105     2106     2107     2108     2109     2110     2111     2112  #> 6.750108 6.742994 6.724184 6.724184 6.725370 6.724184 6.725370 6.725370  #>     2113     2114     2115     2116     2117     2118     2119     2120  #> 6.701712 6.705269 6.702897 6.702897 6.702897 6.702897 6.750220 6.749034  #>     2121     2122     2123     2124     2125     2126     2127     2128  #> 6.747849 6.747849 6.751405 6.747849 6.743046 6.743046 6.756338 6.758709  #>     2129     2130     2131     2132     2133     2134     2135     2136  #> 6.741860 6.741860 6.741197 6.741197 6.741197 6.741197 6.740011 6.741197  #>     2137     2138     2139     2140     2141     2142     2143     2144  #> 6.736930 6.740487 6.738115 6.738115 6.738115 6.738115 6.622211 6.618654  #>     2145     2146     2147     2148     2149     2150     2151     2152  #> 6.608919 6.619840 6.621025 6.622211 6.718732 6.729402 6.719917 6.718732  #>     2153     2154     2155     2156     2157     2158     2159     2160  #> 6.730587 6.719917 6.712631 6.711445 6.712631 6.713816 6.715002 6.712631  #>     2161     2162     2163     2164     2165     2166     2167     2168  #> 6.680591 6.718529 6.682963 6.684148 6.685334 6.681777 6.757024 6.758209  #>     2169     2170     2171     2172     2173     2174     2175     2176  #> 6.758209 6.757024 6.757024 6.758209 6.711453 6.711453 6.719751 6.729236  #>     2177     2178     2179     2180     2181     2182     2183     2184  #> 6.713824 6.713824 6.711997 6.710811 6.711997 6.710811 6.711997 6.711997  #>     2185     2186     2187     2188     2189     2190     2191     2192  #> 6.722364 6.722364 6.721179 6.723550 6.724735 6.722364 6.733917 6.732732  #>     2193     2194     2195     2196     2197     2198     2199     2200  #> 6.738659 6.731546 6.732732 6.733917 6.705186 6.696887 6.698072 6.709928  #>     2201     2202     2203     2204     2205     2206     2207     2208  #> 6.695701 6.696887 6.720544 6.720544 6.722915 6.720544 6.721730 6.721730  #>     2209     2210     2211     2212     2213     2214     2215     2216  #> 6.763042 6.763042 6.764227 6.763042 6.764227 6.765413 6.749669 6.749669  #>     2217     2218     2219     2220     2221     2222     2223     2224  #> 6.749669 6.752040 6.750854 6.752040 6.733842 6.733842 6.733842 6.733842  #>     2225     2226     2227     2228     2229     2230     2231     2232  #> 6.733842 6.733842 6.715085 6.717456 6.716270 6.716270 6.717456 6.716270  #>     2233     2234     2235     2236     2237     2238     2239     2240  #> 6.726638 6.726638 6.726638 6.726638 6.727824 6.730195 6.735737 6.736923  #>     2241     2242     2243     2244     2245     2246     2247     2248  #> 6.735737 6.735737 6.735737 6.736923 6.657931 6.662674 6.663859 6.651752  #>     2249     2250     2251     2252     2253     2254     2255     2256  #> 6.661488 6.654124 6.712631 6.712631 6.712631 6.713816 6.711445 6.713816  #>     2257     2258     2259     2260     2261     2262     2263     2264  #> 6.741197 6.742382 6.741197 6.738825 6.741197 6.741197 6.738742 6.735186  #>     2265     2266     2267     2268     2269     2270     2271     2272  #> 6.737557 6.737557 6.737557 6.739928 6.730829 6.729643 6.728458 6.729643  #>     2273     2274     2275     2276     2277     2278     2279     2280  #> 6.728458 6.729643 6.764861 6.764861 6.764861 6.766047 6.767232 6.767232  #>     2281     2282     2283     2284     2285     2286     2287     2288  #> 6.738115 6.738115 6.741672 6.739301 6.738115 6.739301 6.766047 6.766047  #>     2289     2290     2291     2292     2293     2294     2295     2296  #> 6.766047 6.764861 6.764861 6.763676 6.699733 6.694991 6.696177 6.694991  #>     2297     2298     2299     2300     2301     2302     2303     2304  #> 6.700919 6.698548 6.760587 6.759402 6.759402 6.765330 6.759402 6.760587  #>     2305     2306     2307     2308     2309     2310     2311     2312  #> 6.766130 6.768501 6.769687 6.767315 6.768501 6.768501 6.729643 6.729643  #>     2313     2314     2315     2316     2317     2318     2319     2320  #> 6.729643 6.728458 6.729643 6.729643 6.733283 6.729726 6.733283 6.733283  #>     2321     2322     2323     2324     2325     2326     2327     2328  #> 6.732097 6.730912 6.672512 6.673697 6.671326 6.672512 6.674883 6.674883  #>     2329     2330     2331     2332     2333     2334     2335     2336  #> 6.755211 6.755211 6.759953 6.755211 6.757582 6.757582 6.702897 6.704083  #>     2337     2338     2339     2340     2341     2342     2343     2344  #> 6.702897 6.702897 6.702897 6.704083 6.749059 6.749059 6.738138 6.738138  #>     2345     2346     2347     2348     2349     2350     2351     2352  #> 6.738138 6.739323 6.681143 6.681143 6.682328 6.687070 6.679957 6.710781  #>     2353     2354     2355     2356     2357     2358     2359     2360  #> 6.737398 6.732656 6.735027 6.732656 6.732656 6.735027 6.737557 6.737557  #>     2361     2362     2363     2364     2365     2366     2367     2368  #> 6.737557 6.737557 6.737557 6.737557 6.707813 6.729153 6.708998 6.713741  #>     2369     2370     2371     2372     2373     2374     2375     2376  #> 6.712555 6.706627 6.717456 6.716270 6.715085 6.719827 6.713899 6.711528  #>     2377     2378     2379     2380     2381     2382     2383     2384  #> 6.738191 6.739377 6.739377 6.739377 6.738191 6.740562 6.712631 6.711445  #>     2385     2386     2387     2388     2389     2390     2391     2392  #> 6.715002 6.713816 6.712631 6.713816 6.714458 6.714458 6.715643 6.715643  #>     2393     2394     2395     2396     2397     2398     2399     2400  #> 6.725128 6.715643 6.688429 6.690800 6.689615 6.693171 6.708583 6.687244  #>     2401     2402     2403     2404     2405     2406     2407     2408  #> 6.658744 6.675341 6.649008 6.651630 6.647823 6.641895 6.743568 6.740011  #>     2409     2410     2411     2412     2413     2414     2415     2416  #> 6.741197 6.742382 6.738825 6.740011 6.770321 6.770321 6.770321 6.770321  #>     2417     2418     2419     2420     2421     2422     2423     2424  #> 6.770321 6.770321 6.741204 6.745946 6.751874 6.742389 6.742389 6.742389  #>     2425     2426     2427     2428     2429     2430     2431     2432  #> 6.715085 6.715085 6.716270 6.716270 6.717456 6.717456 6.731304 6.725377  #>     2433     2434     2435     2436     2437     2438     2439     2440  #> 6.726562 6.730119 6.727748 6.725377 6.702814 6.700443 6.700443 6.701629  #>     2441     2442     2443     2444     2445     2446     2447     2448  #> 6.700443 6.699258 6.624729 6.640141 6.638955 6.638955 6.634213 6.636584  #>     2449     2450     2451     2452     2453     2454     2455     2456  #> 6.768472 6.769657 6.768472 6.766101 6.753994 6.752808 6.677337 6.667853  #>     2457     2458     2459     2460     2461     2462     2463     2464  #> 6.667853 6.670224 6.677337 6.672595 6.717456 6.718642 6.715085 6.716270  #>     2465     2466     2467     2468     2469     2470     2471     2472  #> 6.716270 6.717456 6.715085 6.715085 6.716270 6.722198 6.713899 6.717456  #>     2473     2474     2475     2476     2477     2478     2479     2480  #> 6.709928 6.698072 6.698072 6.698072 6.698072 6.696887 6.744760 6.744760  #>     2481     2482     2483     2484     2485     2486     2487     2488  #> 6.738833 6.744760 6.744760 6.744760 6.702905 6.699348 6.701719 6.701719  #>     2489     2490     2491     2492     2493     2494     2495     2496  #> 6.710018 6.705276 6.722205 6.718649 6.718649 6.718649 6.718649 6.718649  #>     2497     2498     2499     2500     2501     2502     2503     2504  #> 6.665399 6.680811 6.680811 6.672512 6.668955 6.674883 6.726562 6.726562  #>     2505     2506     2507     2508     2509     2510     2511     2512  #> 6.727748 6.727748 6.728933 6.727748 6.702429 6.704800 6.702429 6.704800  #>     2513     2514     2515     2516     2517     2518     2519     2520  #> 6.704800 6.704800 6.730278 6.730278 6.733834 6.730278 6.731463 6.731463  #>     2521     2522     2523     2524     2525     2526     2527     2528  #> 6.588635 6.592191 6.589820 6.592191 6.591006 6.589820 6.745395 6.744209  #>     2529     2530     2531     2532     2533     2534     2535     2536  #> 6.744209 6.744209 6.746580 6.750137 6.701690 6.708803 6.711174 6.701690  #>     2537     2538     2539     2540     2541     2542     2543     2544  #> 6.701439 6.684841 6.643205 6.655311 6.650569 6.631349 6.647012 6.655311  #>     2545     2546     2547     2548     2549     2550     2551     2552  #> 6.752674 6.751488 6.752674 6.752674 6.752674 6.752674 6.747932 6.750303  #>     2553     2554     2555     2556     2557     2558     2559     2560  #> 6.752674 6.755045 6.753860 6.753860 6.719827 6.713899 6.718642 6.713899  #>     2561     2562     2563     2564     2565     2566     2567     2568  #> 6.712714 6.716270 6.590703 6.604930 6.603744 6.604930 6.603744 6.604930  #>     2569     2570     2571     2572     2573     2574     2575     2576  #> 6.650047 6.655975 6.645305 6.648862 6.669016 6.646491 6.702097 6.703283  #>     2577     2578     2579     2580     2581     2582     2583     2584  #> 6.693798 6.689056 6.691427 6.692613 6.736140 6.736140 6.749181 6.751803  #>     2585     2586     2587     2588     2589     2590     2591     2592  #> 6.752989 6.755360 6.773326 6.769770 6.772141 6.772141 6.772141 6.772141  #>     2593     2594     2595     2596     2597     2598     2599     2600  #> 6.727824 6.727824 6.727824 6.727824 6.727824 6.727824 6.632068 6.637996  #>     2601     2602     2603     2604     2605     2606     2607     2608  #> 6.605986 6.608357 6.613100 6.613100 6.719117 6.721488 6.713189 6.708447  #>     2609     2610     2611     2612     2613     2614     2615     2616  #> 6.710818 6.714375 6.746105 6.750847 6.749661 6.748476 6.746105 6.746105  #>     2617     2618     2619     2620     2621     2622     2623     2624  #> 6.680516 6.679330 6.679330 6.679330 6.710154 6.706598 6.737949 6.730836  #>     2625     2626     2627     2628     2629     2630     2631     2632  #> 6.729651 6.729651 6.729651 6.739135 6.742306 6.743492 6.737564 6.741121  #>     2633     2634     2635     2636     2637     2638     2639     2640  #> 6.743492 6.738750 6.743651 6.743651 6.743651 6.744836 6.744836 6.744836  #>     2641     2642     2643     2644     2645     2646     2647     2648  #> 6.730912 6.730912 6.730912 6.730912 6.730912 6.730912 6.721813 6.722998  #>     2649     2650     2651     2652     2653     2654     2655     2656  #> 6.724184 6.725370 6.728926 6.725370 6.733283 6.732097 6.732097 6.732097  #>     2657     2658     2659     2660     2661     2662     2663     2664  #> 6.733283 6.733283 6.706461 6.707647 6.707647 6.701719 6.699348 6.707647  #>     2665     2666     2667     2668     2669     2670     2671     2672  #> 6.642051 6.643236 6.643236 6.643236 6.644422 6.645607 6.678689 6.678689  #>     2673     2674     2675     2676     2677     2678     2679     2680  #> 6.681060 6.689359 6.688173 6.686987 6.753384 6.753384 6.753384 6.753384  #>     2681     2682     2683     2684     2685     2686     2687     2688  #> 6.753384 6.753384 6.754577 6.758133 6.754577 6.754577 6.758133 6.764061  #>     2689     2690     2691     2692     2693     2694     2695     2696  #> 6.720657 6.723028 6.730141 6.724213 6.737505 6.745804 6.752674 6.757416  #>     2697     2698     2699     2700     2701     2702     2703     2704  #> 6.750303 6.750303 6.752674 6.751488 6.743024 6.743024 6.743024 6.743024  #>     2705     2706     2707     2708     2709     2710     2711     2712  #> 6.745395 6.758436 6.679874 6.681060 6.683431 6.678689 6.679874 6.683431  #>     2713     2714     2715     2716     2717     2718     2719     2720  #> 6.709021 6.710206 6.725869 6.707835 6.709021 6.725869 6.758821 6.760007  #>     2721     2722     2723     2724     2725     2726     2727     2728  #> 6.762378 6.761192 6.747900 6.747900 6.733283 6.733283 6.732097 6.733283  #>     2729     2730     2731     2732     2733     2734     2735     2736  #> 6.733283 6.730912 6.716270 6.718642 6.716270 6.716270 6.716270 6.715085  #>     2737     2738     2739     2740     2741     2742     2743     2744  #> 6.775780 6.775780 6.774595 6.775780 6.775780 6.775780 6.657236 6.654865  #>     2745     2746     2747     2748     2749     2750     2751     2752  #> 6.657236 6.656051 6.658422 6.645381 6.701078 6.701078 6.702263 6.701078  #>     2753     2754     2755     2756     2757     2758     2759     2760  #> 6.701078 6.702263 6.711838 6.708281 6.701168 6.708281 6.709467 6.709467  #>     2761     2762     2763     2764     2765     2766     2767     2768  #> 6.729643 6.729643 6.729643 6.729643 6.729643 6.729643 6.646400 6.668926  #>     2769     2770     2771     2772     2773     2774     2775     2776  #> 6.638101 6.639287 6.640473 6.654699 6.708440 6.710811 6.710811 6.711997  #>     2777     2778     2779     2780     2781     2782     2783     2784  #> 6.711997 6.714368 6.733366 6.736923 6.735737 6.735737 6.736923 6.736923  #>     2785     2786     2787     2788     2789     2790     2791     2792  #> 6.626858 6.630414 6.626858 6.629229 6.628043 6.628043 6.712650 6.699609  #>     2793     2794     2795     2796     2797     2798     2799     2800  #> 6.700795 6.699609 6.686317 6.722134 6.754577 6.756948 6.756948 6.756948  #>     2801     2802     2803     2804     2805     2806     2807     2808  #> 6.756948 6.756948 6.727189 6.727189 6.726004 6.726004 6.726004 6.724818  #>     2809     2810     2811     2812     2813     2814     2815     2816  #> 6.607935 6.603193 6.602008 6.603193 6.604379 6.605564 6.744836 6.746022  #>     2817     2818     2819     2820     2821     2822     2823     2824  #> 6.742465 6.743651 6.744836 6.743651 6.699892 6.699892 6.702263 6.699892  #>     2825     2826     2827     2828     2829     2830     2831     2832  #> 6.704634 6.704634 6.657870 6.649572 6.649572 6.655499 6.651943 6.650757  #>     2833     2834     2835     2836     2837     2838     2839     2840  #> 6.750854 6.750854 6.752040 6.748483 6.749669 6.753225 6.753935 6.751564  #>     2841     2842     2843     2844     2845     2846     2847     2848  #> 6.752750 6.753935 6.752750 6.751564 6.758216 6.759402 6.760587 6.759402  #>     2849     2850     2851     2852     2853     2854     2855     2856  #> 6.761773 6.761773 6.652265 6.665306 6.700872 6.644900 6.634230 6.634230  #>     2857     2858     2859     2860     2861     2862     2863     2864  #> 6.729621 6.703539 6.703539 6.703539 6.705910 6.702353 6.755128 6.756314  #>     2865     2866     2867     2868     2869     2870     2871     2872  #> 6.757499 6.755128 6.755128 6.753942 6.714451 6.714451 6.714451 6.714451  #>     2873     2874     2875     2876     2877     2878     2879     2880  #> 6.714451 6.715636 6.722133 6.722133 6.722133 6.738981 6.742538 6.746095  #>     2881     2882     2883     2884     2885     2886     2887     2888  #> 6.726638 6.726638 6.726638 6.729009 6.729009 6.727824 6.716905 6.715719  #>     2889     2890     2891     2892     2893     2894     2895     2896  #> 6.716905 6.718090 6.718090 6.716905 6.750303 6.751488 6.752674 6.755045  #>     2897     2898     2899     2900     2901     2902     2903     2904  #> 6.751488 6.753860 6.720552 6.725294 6.720552 6.722923 6.720552 6.732407  #>     2905     2906     2907     2908     2909     2910     2911     2912  #> 6.756948 6.756948 6.756948 6.756948 6.756948 6.758133 6.755211 6.757582  #>     2913     2914     2915     2916     2917     2918     2919     2920  #> 6.756397 6.765881 6.757582 6.758768 6.735110 6.736296 6.736296 6.737481  #>     2921     2922     2923     2924     2925     2926     2927     2928  #> 6.738667 6.742223 6.642851 6.660634 6.644036 6.646408 6.645222 6.671304  #>     2929     2930     2931     2932     2933     2934     2935     2936  #> 6.743016 6.743016 6.743016 6.741831 6.743016 6.741831 6.711653 6.709282  #>     2937     2938     2939     2940     2941     2942     2943     2944  #> 6.721388 6.709282 6.709282 6.706910 6.675288 6.646834 6.644463 6.645649  #>     2945     2946     2947     2948     2949     2950     2951     2952  #> 6.645649 6.635913 6.744760 6.743575 6.742389 6.743575 6.744760 6.744760  #>     2953     2954     2955     2956     2957     2958     2959     2960  #> 6.728458 6.730829 6.729643 6.729643 6.729643 6.729643 6.716278 6.731690  #>     2961     2962     2963     2964     2965     2966     2967     2968  #> 6.716278 6.716278 6.716278 6.716278 6.730722 6.723608 6.733344 6.734529  #>     2969     2970     2971     2972     2973     2974     2975     2976  #> 6.734529 6.736901 6.712555 6.710184 6.711370 6.714926 6.710184 6.711370  #>     2977     2978     2979     2980     2981     2982     2983     2984  #> 6.718725 6.718725 6.719910 6.719910 6.719910 6.721096 6.671409 6.672595  #>     2985     2986     2987     2988     2989     2990     2991     2992  #> 6.671409 6.671409 6.688007 6.686821 6.652584 6.653770 6.656141 6.657326  #>     2993     2994     2995     2996     2997     2998     2999     3000  #> 6.653770 6.653770 6.718090 6.718090 6.716905 6.716905 6.716905 6.718090  #>     3001     3002     3003     3004     3005     3006     3007     3008  #> 6.710184 6.710184 6.711370 6.711370 6.720854 6.712555 6.678320 6.692798  #>     3009     3010     3011     3012     3013     3014     3015     3016  #> 6.692798 6.692798 6.692798 6.696355 6.725762 6.719834 6.718649 6.717463  #>     3017     3018     3019     3020     3021     3022     3023     3024  #> 6.718649 6.715092 6.706830 6.694723 6.695909 6.703022 6.695909 6.693537  #>     3025     3026     3027     3028     3029     3030     3031     3032  #> 6.713816 6.712631 6.712631 6.712631 6.712631 6.713816 6.745470 6.745470  #>     3033     3034     3035     3036     3037     3038     3039     3040  #> 6.745470 6.744285 6.745470 6.751398 6.702814 6.709928 6.708742 6.693330  #>     3041     3042     3043     3044     3045     3046     3047     3048  #> 6.694516 6.694516 6.729643 6.728458 6.729643 6.728458 6.730829 6.728458  #>     3049     3050     3051     3052     3053     3054     3055     3056  #> 6.724818 6.726004 6.726004 6.727189 6.727189 6.727189 6.737557 6.737557  #>     3057     3058     3059     3060     3061     3062     3063     3064  #> 6.737557 6.737557 6.738742 6.737557 6.687153 6.685968 6.688339 6.708493  #>     3065     3066     3067     3068     3069     3070     3071     3072  #> 6.685968 6.688339 6.716934 6.719305 6.719305 6.719305 6.734968 6.732597  #>     3073     3074     3075     3076     3077     3078     3079     3080  #> 6.735737 6.735737 6.735737 6.735737 6.738108 6.735737 6.660166 6.651867  #>     3081     3082     3083     3084     3085     3086     3087     3088  #> 6.654238 6.654238 6.655424 6.661351 6.740645 6.741831 6.743016 6.743016  #>     3089     3090     3091     3092     3093     3094     3095     3096  #> 6.743016 6.744202 6.721125 6.719939 6.721125 6.722311 6.734417 6.733232  #>     3097     3098     3099     3100     3101     3102     3103     3104  #> 6.727741 6.722998 6.724184 6.722998 6.725370 6.725370 6.744836 6.744836  #>     3105     3106     3107     3108     3109     3110     3111     3112  #> 6.743651 6.743651 6.743651 6.743651 6.772141 6.769770 6.770955 6.773326  #>     3113     3114     3115     3116     3117     3118     3119     3120  #> 6.770955 6.773326 6.707784 6.706598 6.706598 6.740979 6.692120 6.689749  #>     3121     3122     3123     3124     3125     3126     3127     3128  #> 6.757867 6.745761 6.746946 6.745761 6.745761 6.745761 6.713324 6.709767  #>     3129     3130     3131     3132     3133     3134     3135     3136  #> 6.727801 6.727801 6.744399 6.733729 6.739935 6.737564 6.738750 6.737564  #>     3137     3138     3139     3140     3141     3142     3143     3144  #> 6.738750 6.741121 6.723467 6.718725 6.718725 6.718725 6.716353 6.717539  #>     3145     3146     3147     3148     3149     3150     3151     3152  #> 6.733290 6.733290 6.733290 6.740404 6.736847 6.739218 6.702346 6.704717  #>     3153     3154     3155     3156     3157     3158     3159     3160  #> 6.703532 6.698790 6.702346 6.702346 6.735737 6.735737 6.735737 6.736923  #>     3161     3162     3163     3164     3165     3166     3167     3168  #> 6.736923 6.735737 6.584195 6.578267 6.580638 6.578267 6.580638 6.578267  #>     3169     3170     3171     3172     3173     3174     3175     3176  #> 6.706566 6.706566 6.706566 6.723415 6.721044 6.703010 6.701712 6.702897  #>     3177     3178     3179     3180     3181     3182     3183     3184  #> 6.706454 6.704083 6.702897 6.704083 6.720544 6.719359 6.720544 6.721730  #>     3185     3186     3187     3188     3189     3190     3191     3192  #> 6.721730 6.724101 6.691427 6.689056 6.691427 6.690242 6.694984 6.691427  #>     3193     3194     3195     3196     3197     3198     3199     3200  #> 6.724818 6.727189 6.727189 6.726004 6.727189 6.726004 6.747207 6.743651  #>     3201     3202     3203     3204     3205     3206     3207     3208  #> 6.743651 6.743651 6.744836 6.743651 6.743016 6.741831 6.743016 6.744202  #>     3209     3210     3211     3212     3213     3214     3215     3216  #> 6.741831 6.743016 6.740011 6.742382 6.741197 6.741197 6.740011 6.742382  #>     3217     3218     3219     3220     3221     3222     3223     3224  #> 6.732097 6.732097 6.732097 6.732097 6.733283 6.733283 6.734552 6.735737  #>     3225     3226     3227     3228     3229     3230     3231     3232  #> 6.739294 6.734552 6.735737 6.734552 6.729643 6.728458 6.729643 6.730829  #>     3233     3234     3235     3236     3237     3238     3239     3240  #> 6.728458 6.730829 6.691979 6.691979 6.693164 6.694350 6.694350 6.694350  #>     3241     3242     3243     3244     3245     3246     3247     3248  #> 6.759402 6.759402 6.760587 6.761773 6.761773 6.760587 6.699258 6.700443  #>     3249     3250     3251     3252     3253     3254     3255     3256  #> 6.701629 6.699258 6.696887 6.700443 6.749744 6.750930 6.750930 6.752115  #>     3257     3258     3259     3260     3261     3262     3263     3264  #> 6.750930 6.750930 6.753279 6.753279 6.753279 6.738801 6.753279 6.738801  #>     3265     3266     3267     3268     3269     3270     3271     3272  #> 6.679240 6.680425 6.682797 6.682797 6.686353 6.680425 6.692330 6.701814  #>     3273     3274     3275     3276     3277     3278     3279     3280  #> 6.680223 6.717226 6.695886 6.693515 6.737564 6.741121 6.745863 6.741121  #>     3281     3282     3283     3284     3285     3286     3287     3288  #> 6.739935 6.739935 6.715085 6.715085 6.715085 6.715085 6.717456 6.718642  #>     3289     3290     3291     3292     3293     3294     3295     3296  #> 6.746656 6.745470 6.746656 6.745470 6.745470 6.745470 6.744843 6.748400  #>     3297     3298     3299     3300     3301     3302     3303     3304  #> 6.746029 6.747215 6.748400 6.748400 6.631600 6.629229 6.628043 6.626858  #>     3305     3306     3307     3308     3309     3310     3311     3312  #> 6.626858 6.629229 6.642863 6.640492 6.645234 6.644048 6.640492 6.614159  #>     3313     3314     3315     3316     3317     3318     3319     3320  #> 6.636584 6.637770 6.637770 6.637770 6.637770 6.636584 6.724452 6.708789  #>     3321     3322     3323     3324     3325     3326     3327     3328  #> 6.725638 6.723267 6.726823 6.736308 6.708357 6.707171 6.708357 6.708357  #>     3329     3330     3331     3332     3333     3334     3335     3336  #> 6.707171 6.708357 6.720544 6.720544 6.720544 6.720544 6.722915 6.724101  #>     3337     3338     3339     3340     3341     3342     3343     3344  #> 6.733656 6.737213 6.738399 6.736027 6.733656 6.749320 6.725370 6.724184  #>     3345     3346     3347     3348     3349     3350     3351     3352  #> 6.724184 6.724184 6.724184 6.725370 6.705352 6.706537 6.705352 6.706537  #>     3353     3354     3355     3356     3357     3358     3359     3360  #> 6.705352 6.710094 6.693830 6.679352 6.688837 6.724654 6.680538 6.680538  #>     3361     3362     3363     3364     3365     3366     3367     3368  #> 6.695701 6.725340 6.693330 6.693330 6.693330 6.695701 6.697521 6.697521  #>     3369     3370     3371     3372     3373     3374     3375     3376  #> 6.701078 6.697521 6.698707 6.698707 6.675525 6.673153 6.676710 6.673153  #>     3377     3378     3379     3380     3381     3382     3383     3384  #> 6.702792 6.670782 6.767025 6.769396 6.767025 6.768211 6.756104 6.770582  #>     3385     3386     3387     3388     3389     3390     3391     3392  #> 6.760072 6.737296 6.738482 6.736110 6.737296 6.739667 6.673146 6.668404  #>     3393     3394     3395     3396     3397     3398     3399     3400  #> 6.670775 6.671961 6.671961 6.670775 6.683597 6.684782 6.696638 6.701380  #>     3401     3402     3403     3404     3405     3406     3407     3408  #> 6.695452 6.683597 6.742389 6.742389 6.744760 6.744760 6.745946 6.743575  #>     3409     3410     3411     3412     3413     3414     3415     3416  #> 6.737557 6.736371 6.738742 6.738742 6.738742 6.736371 6.722281 6.718725  #>     3417     3418     3419     3420     3421     3422     3423     3424  #> 6.718725 6.718725 6.718725 6.719910 6.770321 6.769135 6.770321 6.771506  #>     3425     3426     3427     3428     3429     3430     3431     3432  #> 6.770321 6.770321 6.679323 6.681694 6.681694 6.691178 6.678137 6.679323  #>     3433     3434     3435     3436     3437     3438     3439     3440  #> 6.770031 6.772402 6.771216 6.771216 6.771216 6.755553 6.723550 6.723550  #>     3441     3442     3443     3444     3445     3446     3447     3448  #> 6.722364 6.722364 6.722364 6.723550 6.728458 6.729643 6.729643 6.729643  #>     3449     3450     3451     3452     3453     3454     3455     3456  #> 6.729643 6.729643 6.730278 6.736205 6.732649 6.729092 6.729092 6.730278  #>     3457     3458     3459     3460     3461     3462     3463     3464  #> 6.711528 6.711528 6.713899 6.712714 6.712714 6.713899 6.700526 6.700526  #>     3465     3466     3467     3468     3469     3470     3471     3472  #> 6.700526 6.699341 6.704083 6.705269 6.737557 6.737557 6.737557 6.741114  #>     3473     3474     3475     3476     3477     3478     3479     3480  #> 6.737557 6.736371 6.745229 6.738115 6.739301 6.736930 6.738115 6.740487  #>     3481     3482     3483     3484     3485     3486     3487     3488  #> 6.658429 6.657243 6.665542 6.646574 6.658429 6.660800 6.714587 6.697989  #>     3489     3490     3491     3492     3493     3494     3495     3496  #> 6.690876 6.693247 6.692062 6.690876 6.697521 6.702263 6.701078 6.705820  #>     3497     3498     3499     3500     3501     3502     3503     3504  #> 6.704634 6.701078 6.740011 6.742382 6.741197 6.742382 6.741197 6.741197  #>     3505     3506     3507     3508     3509     3510     3511     3512  #> 6.732732 6.736288 6.732732 6.736288 6.733917 6.735103 6.710894 6.710894  #>     3513     3514     3515     3516     3517     3518     3519     3520  #> 6.710894 6.710894 6.712080 6.735790 6.755762 6.756948 6.756948 6.758133  #>     3521     3522     3523     3524     3525     3526     3527     3528  #> 6.758133 6.758133 6.735737 6.736923 6.736923 6.736923 6.735737 6.735737  #>     3529     3530     3531     3532     3533     3534     3535     3536  #> 6.732022 6.733207 6.732022 6.732022 6.733207 6.733207 6.697997 6.699182  #>     3537     3538     3539     3540     3541     3542     3543     3544  #> 6.700368 6.699182 6.700368 6.699182 6.700451 6.705193 6.709935 6.700451  #>     3545     3546     3547     3548     3549     3550     3551     3552  #> 6.701636 6.700451 6.687422 6.670573 6.687422 6.683865 6.685051 6.687422  #>     3553     3554     3555     3556     3557     3558     3559     3560  #> 6.621640 6.631125 6.644165 6.631125 6.621640 6.631125 6.743575 6.743575  #>     3561     3562     3563     3564     3565     3566     3567     3568  #> 6.743575 6.747132 6.742389 6.744760 6.741197 6.741197 6.742382 6.741197  #>     3569     3570  #> 6.741197 6.741197  #>  #> $se.fit #>          1          2          3          4          5          6          7  #> 0.06451779 0.06410551 0.06403795 0.06434563 0.06411962 0.06454864 0.09404200  #>          8          9         10         11         12         13         14  #> 0.09379615 0.09662594 0.09381106 0.09411230 0.09381106 0.03379993 0.03379386  #>         15         16         17         18         19         20         21  #> 0.03387263 0.03387263 0.03387263 0.03443078 0.02308670 0.02308670 0.02298711  #>         22         23         24         25         26         27         28  #> 0.02363477 0.02375722 0.02308670 0.01719089 0.01986139 0.01788165 0.01756783  #>         29         30         31         32         33         34         35  #> 0.01756783 0.01774238 0.02594646 0.02594646 0.02594646 0.02603608 0.02591940  #>         36         37         38         39         40         41         42  #> 0.02594646 0.02128187 0.02141134 0.02133992 0.02125794 0.02125794 0.02128187  #>         43         44         45         46         47         48         49  #> 0.02981560 0.02981560 0.02981560 0.03095281 0.02988705 0.02988705 0.02291670  #>         50         51         52         53         54         55         56  #> 0.02311623 0.02291670 0.02291670 0.02368376 0.02291670 0.03574128 0.03553754  #>         57         58         59         60         61         62         63  #> 0.03531856 0.03530449 0.03795253 0.03564383 0.02788929 0.02684810 0.02684810  #>         64         65         66         67         68         69         70  #> 0.02746462 0.04632556 0.02746462 0.01994469 0.01992157 0.01992157 0.01992157  #>         71         72         73         74         75         76         77  #> 0.01992157 0.01994469 0.02295919 0.02321378 0.02295919 0.02295919 0.02309562  #>         78         79         80         81         82         83         84  #> 0.02309562 0.03060786 0.03060786 0.03060193 0.03060193 0.03060193 0.03060193  #>         85         86         87         88         89         90         91  #> 0.02401568 0.02407209 0.02401568 0.02407209 0.02547331 0.02407209 0.02419816  #>         92         93         94         95         96         97         98  #> 0.02424731 0.02424731 0.02419816 0.02419816 0.02417616 0.02320812 0.02320311  #>         99        100        101        102        103        104        105  #> 0.02329509 0.02348293 0.02350767 0.02331006 0.02360389 0.02355758 0.02355758  #>        106        107        108        109        110        111        112  #> 0.02355758 0.02360690 0.02355758 0.02901318 0.02957927 0.02808836 0.02808836  #>        113        114        115        116        117        118        119  #> 0.03739778 0.02731627 0.02333912 0.02333912 0.02335786 0.02335786 0.02333912  #>        120        121        122        123        124        125        126  #> 0.02335786 0.01883452 0.01941827 0.01941827 0.01910801 0.01887631 0.01970027  #>        127        128        129        130        131        132        133  #> 0.02436167 0.02455130 0.02426366 0.02425838 0.02515037 0.02425838 0.02446353  #>        134        135        136        137        138        139        140  #> 0.02456411 0.02446353 0.02453834 0.02471290 0.02446353 0.02010683 0.02010683  #>        141        142        143        144        145        146        147  #> 0.02051674 0.01960892 0.02010683 0.02512276 0.04284473 0.04287799 0.04286408  #>        148        149        150        151        152        153        154  #> 0.04286408 0.04284473 0.04296374 0.02297849 0.02303795 0.02295919 0.02297849  #>        155        156        157        158        159        160        161  #> 0.02297849 0.02295919 0.02886996 0.02740079 0.02798428 0.02798428 0.02713209  #>        162        163        164        165        166        167        168  #> 0.04322999 0.02507240 0.02507240 0.02507240 0.02507240 0.02508961 0.02508961  #>        169        170        171        172        173        174        175  #> 0.02392439 0.02392439 0.02392439 0.02396003 0.02392439 0.02392439 0.02297849  #>        176        177        178        179        180        181        182  #> 0.02295919 0.02303795 0.02303795 0.02330909 0.02303795 0.02434590 0.02434590  #>        183        184        185        186        187        188        189  #> 0.02425838 0.02483044 0.02425838 0.02436167 0.02309759 0.02309759 0.02308872  #>        190        191        192        193        194        195        196  #> 0.02309759 0.02317732 0.02317732 0.02388599 0.02389391 0.02388599 0.02374597  #>        197        198        199        200        201        202        203  #> 0.02374995 0.02370044 0.02294271 0.02294271 0.02297962 0.02311423 0.02294271  #>        204        205        206        207        208        209        210  #> 0.02316261 0.02438728 0.02390022 0.02438728 0.02674820 0.02390022 0.02297220  #>        211        212        213        214        215        216        217  #> 0.02307516 0.02314348 0.02314348 0.02300013 0.02314348 0.02545400 0.02441080  #>        218        219        220        221        222        223        224  #> 0.02419816 0.02417616 0.02419816 0.02424731 0.02417616 0.02505172 0.02504399  #>        225        226        227        228        229        230        231  #> 0.02504399 0.02505172 0.02504399 0.02505172 0.02547307 0.02556159 0.02541404  #>        232        233        234        235        236        237        238  #> 0.02541404 0.02562012 0.02547307 0.02924563 0.03242796 0.03066596 0.03002629  #>        239        240        241        242        243        244        245  #> 0.02937606 0.03002629 0.02419816 0.02419816 0.02419816 0.02419816 0.02424731  #>        246        247        248        249        250        251        252  #> 0.02441080 0.02019195 0.02035936 0.01983763 0.01970027 0.01983763 0.01941827  #>        253        254        255        256        257        258        259  #> 0.02303282 0.02302752 0.02311994 0.02313579 0.02333513 0.02311994 0.02360690  #>        260        261        262        263        264        265        266  #> 0.02360690 0.02355758 0.02360389 0.02360389 0.02360389 0.02507240 0.02507240  #>        267        268        269        270        271        272        273  #> 0.02507240 0.02507240 0.02507240 0.02508961 0.01932722 0.01926438 0.01910388  #>        274        275        276        277        278        279        280  #> 0.01926438 0.01910388 0.01910388 0.02296764 0.02291670 0.02291670 0.02291670  #>        281        282        283        284        285        286        287  #> 0.02296404 0.02291670 0.02314348 0.02314348 0.02314348 0.02300013 0.02545400  #>        288        289        290        291        292        293        294  #> 0.02302300 0.02320704 0.02311829 0.02312691 0.02311829 0.02323277 0.02312691  #>        295        296        297        298        299        300        301  #> 0.02937606 0.02902354 0.03045744 0.02966498 0.03242796 0.03553780 0.02407209  #>        302        303        304        305        306        307        308  #> 0.02407209 0.02399697 0.02407209 0.02399697 0.02433267 0.02297962 0.02297962  #>        309        310        311        312        313        314        315  #> 0.02294271 0.02294271 0.02294271 0.02297962 0.02296764 0.02291670 0.02296764  #>        316        317        318        319        320        321        322  #> 0.02291670 0.02296404 0.02291670 0.03127319 0.03115320 0.03115320 0.03112989  #>        323        324        325        326        327        328        329  #> 0.03112989 0.03110533 0.02305335 0.02305335 0.02302286 0.02298912 0.02302286  #>        330        331        332        333        334        335        336  #> 0.02315413 0.02664060 0.02670112 0.02670112 0.02678927 0.02657608 0.02657608  #>        337        338        339        340        341        342        343  #> 0.02297962 0.02297962 0.02297962 0.02300396 0.02294271 0.02294271 0.01724378  #>        344        345        346        347        348        349        350  #> 0.02002989 0.01724378 0.02382970 0.01724378 0.01724378 0.02323277 0.02312691  #>        351        352        353        354        355        356        357  #> 0.02311829 0.02320704 0.02312691 0.02320704 0.02102012 0.01896939 0.01976283  #>        358        359        360        361        362        363        364  #> 0.01937534 0.01909838 0.01916298 0.04603352 0.04173036 0.04125107 0.04918266  #>        365        366        367        368        369        370        371  #> 0.03932730 0.04582581 0.02475525 0.02475525 0.02475525 0.02475971 0.02475971  #>        372        373        374        375        376        377        378  #> 0.02475971 0.02417616 0.02419816 0.02417616 0.02417616 0.02424731 0.02419816  #>        379        380        381        382        383        384        385  #> 0.02360389 0.02375123 0.02360690 0.02374525 0.02355758 0.02398888 0.02112488  #>        386        387        388        389        390        391        392  #> 0.02119365 0.02136798 0.02419349 0.02119365 0.02119365 0.02311994 0.02303282  #>        393        394        395        396        397        398        399  #> 0.02311994 0.02303282 0.02362840 0.02302752 0.02507240 0.02508961 0.02507240  #>        400        401        402        403        404        405        406  #> 0.02507240 0.02507240 0.02508961 0.01943433 0.01963751 0.01916611 0.01943433  #>        407        408        409        410        411        412        413  #> 0.01943433 0.01924219 0.02320704 0.02311829 0.02311829 0.02311829 0.02312691  #>        414        415        416        417        418        419        420  #> 0.02312691 0.02308872 0.02309759 0.02309759 0.02308872 0.02308872 0.02308872  #>        421        422        423        424        425        426        427  #> 0.02296764 0.02296764 0.02291670 0.02310906 0.02291670 0.02291670 0.03425247  #>        428        429        430        431        432        433        434  #> 0.03430805 0.03425247 0.03425247 0.03425247 0.03430805 0.02352280 0.02352280  #>        435        436        437        438        439        440        441  #> 0.02347355 0.02352026 0.02352026 0.02352026 0.02582495 0.02582495 0.02684036  #>        442        443        444        445        446        447        448  #> 0.02577919 0.02577919 0.02595763 0.03274180 0.03274180 0.04355673 0.03231041  #>        449        450        451        452        453        454        455  #> 0.03274180 0.03141387 0.01935532 0.01930959 0.01922315 0.01935532 0.02142667  #>        456        457        458        459        460        461        462  #> 0.02143277 0.03445039 0.03395544 0.03352050 0.03314253 0.03935769 0.03314253  #>        463        464        465        466        467        468        469  #> 0.02370203 0.02336231 0.02308872 0.02309759 0.02320384 0.02320384 0.02311423  #>        470        471        472        473        474        475        476  #> 0.02311423 0.02311423 0.02837877 0.02311423 0.02311423 0.02507240 0.02507240  #>        477        478        479        480        481        482        483  #> 0.02507240 0.02507240 0.02507240 0.02507240 0.01882651 0.01889228 0.01888032  #>        484        485        486        487        488        489        490  #> 0.01888032 0.02285956 0.02293737 0.01976283 0.01896939 0.02172040 0.01976283  #>        491        492        493        494        495        496        497  #> 0.02025450 0.02334877 0.01906068 0.01910388 0.02004523 0.01926438 0.01910388  #>        498        499        500        501        502        503        504  #> 0.01906068 0.03951654 0.03800817 0.03751281 0.03834176 0.03951654 0.03773143  #>        505        506        507        508        509        510        511  #> 0.02981969 0.02981560 0.02981560 0.02989928 0.02981560 0.02981969 0.03135903  #>        512        513        514        515        516        517        518  #> 0.03207805 0.03135903 0.03165923 0.03215152 0.03106425 0.01976283 0.02731408  #>        519        520        521        522        523        524        525  #> 0.02025450 0.01893678 0.01976283 0.01976283 0.02294271 0.02294271 0.02294271  #>        526        527        528        529        530        531        532  #> 0.02294271 0.02300396 0.02297962 0.02366506 0.02356867 0.02356867 0.02350511  #>        533        534        535        536        537        538        539  #> 0.02350511 0.02350511 0.02292220 0.02292220 0.02292220 0.02295553 0.02295553  #>        540        541        542        543        544        545        546  #> 0.02298711 0.04475329 0.03357356 0.03633446 0.03633446 0.03373034 0.03361114  #>        547        548        549        550        551        552        553  #> 0.03007272 0.02849949 0.02871554 0.02957309 0.04677056 0.03181702 0.02472559  #>        554        555        556        557        558        559        560  #> 0.02357429 0.02302880 0.02126969 0.01959358 0.02774315 0.05269071 0.05268939  #>        561        562        563        564        565        566        567  #> 0.05269071 0.05268939 0.05300741 0.05286292 0.01915604 0.02443113 0.01890986  #>        568        569        570        571        572        573        574  #> 0.01878088 0.01890986 0.01890986 0.02419816 0.02419816 0.02417616 0.02417616  #>        575        576        577        578        579        580        581  #> 0.02424731 0.02417616 0.02321378 0.02321378 0.02303795 0.02303795 0.02303795  #>        582        583        584        585        586        587        588  #> 0.02295919 0.02843577 0.02843577 0.02843577 0.02840900 0.02840900 0.02840900  #>        589        590        591        592        593        594        595  #> 0.02303795 0.02321378 0.02330909 0.02297849 0.02330909 0.02303795 0.02547307  #>        596        597        598        599        600        601        602  #> 0.02547307 0.02547307 0.02541404 0.02547307 0.02547307 0.03259811 0.03444207  #>        603        604        605        606        607        608        609  #> 0.03242417 0.03231803 0.03228368 0.03231914 0.02396003 0.02392439 0.02398289  #>        610        611        612        613        614        615        616  #> 0.02392439 0.02392439 0.02392439 0.04898997 0.04854371 0.04840753 0.04831766  #>        617        618        619        620        621        622        623  #> 0.04831766 0.04840753 0.02582495 0.02577919 0.02577919 0.02577919 0.02582083  #>        624        625        626        627        628        629        630  #> 0.02594944 0.02295919 0.02297849 0.02295919 0.02303795 0.02309562 0.02297849  #>        631        632        633        634        635        636        637  #> 0.02431306 0.02419816 0.02417616 0.02417616 0.02424731 0.02417616 0.02740079  #>        638        639        640        641        642        643        644  #> 0.02740079 0.02713209 0.02792395 0.02760586 0.02722883 0.01912143 0.02288185  #>        645        646        647        648        649        650        651  #> 0.01791005 0.01746724 0.01714494 0.01688687 0.02478805 0.01952912 0.01956459  #>        652        653        654        655        656        657        658  #> 0.01956459 0.01956459 0.01960892 0.01876031 0.01876031 0.01876031 0.01887241  #>        659        660        661        662        663        664        665  #> 0.01887241 0.02052652 0.02544365 0.02544365 0.02544365 0.02547307 0.02562012  #>        666        667        668        669        670        671        672  #> 0.02544365 0.02298711 0.02298711 0.02292220 0.02308670 0.02308670 0.02292220  #>        673        674        675        676        677        678        679  #> 0.03918290 0.03941608 0.03868972 0.03868972 0.03827295 0.03827295 0.02475525  #>        680        681        682        683        684        685        686  #> 0.02475525 0.02475525 0.02475971 0.02475971 0.02475971 0.02350511 0.02350511  #>        687        688        689        690        691        692        693  #> 0.02350511 0.02350511 0.02350511 0.02353737 0.02796338 0.02793325 0.02798379  #>        694        695        696        697        698        699        700  #> 0.02796338 0.02793325 0.02798379 0.05140195 0.05039309 0.05077860 0.05039309  #>        701        702        703        704        705        706        707  #> 0.05281397 0.05099497 0.01953962 0.01953962 0.01924833 0.01993510 0.01924578  #>        708        709        710        711        712        713        714  #> 0.01924833 0.02657608 0.02659632 0.02664060 0.02670112 0.02657608 0.02657608  #>        715        716        717        718        719        720        721  #> 0.02541404 0.02541404 0.02544365 0.02541404 0.02541404 0.02544365 0.02417616  #>        722        723        724        725        726        727        728  #> 0.02417616 0.02424731 0.02417616 0.02419816 0.02417616 0.02617676 0.02617676  #>        729        730        731        732        733        734        735  #> 0.02615960 0.02617676 0.02615960 0.02622854 0.02330743 0.02548000 0.02401556  #>        736        737        738        739        740        741        742  #> 0.02401556 0.02412217 0.03153026 0.02356867 0.02350511 0.02350511 0.02350511  #>        743        744        745        746        747        748        749  #> 0.02350511 0.02366506 0.02178372 0.02178372 0.02178372 0.02178372 0.02178372  #>        750        751        752        753        754        755        756  #> 0.02178372 0.02372728 0.02350511 0.02372728 0.02372728 0.02356867 0.02397905  #>        757        758        759        760        761        762        763  #> 0.01977256 0.01977256 0.01979372 0.01977256 0.01999236 0.02434021 0.03124799  #>        764        765        766        767        768        769        770  #> 0.02346724 0.02181607 0.02124644 0.02014873 0.02043327 0.02676567 0.02673687  #>        771        772        773        774        775        776        777  #> 0.02673687 0.02673687 0.02673687 0.02673687 0.01887631 0.01883452 0.01883452  #>        778        779        780        781        782        783        784  #> 0.01883452 0.01883452 0.01883452 0.02432081 0.02453178 0.02453178 0.02432081  #>        785        786        787        788        789        790        791  #> 0.02539004 0.02447926 0.02547307 0.02541404 0.02541404 0.02547307 0.02605676  #>        792        793        794        795        796        797        798  #> 0.02541404 0.02622854 0.02622854 0.02622854 0.02622854 0.02622854 0.02923616  #>        799        800        801        802        803        804        805  #> 0.02617676 0.02638290 0.02615960 0.02615960 0.02617676 0.02615960 0.02297962  #>        806        807        808        809        810        811        812  #> 0.02300396 0.02294271 0.02294271 0.02294271 0.02294271 0.02408941 0.02396003  #>        813        814        815        816        817        818        819  #> 0.02408941 0.02392439 0.02413486 0.02398289 0.02417616 0.02417616 0.02417616  #>        820        821        822        823        824        825        826  #> 0.02419816 0.02417616 0.02419816 0.02312691 0.02312691 0.02323277 0.02339204  #>        827        828        829        830        831        832        833  #> 0.02312691 0.02311829 0.02659632 0.02659632 0.02657608 0.02659632 0.02664060  #>        834        835        836        837        838        839        840  #> 0.02664060 0.02001142 0.02001142 0.02021273 0.02001142 0.02382244 0.02144539  #>        841        842        843        844        845        846        847  #> 0.02363477 0.02331403 0.02340719 0.02314945 0.02314945 0.02298711 0.02392230  #>        848        849        850        851        852        853        854  #> 0.02382547 0.02376309 0.02376309 0.02376309 0.02376309 0.02333912 0.02333912  #>        855        856        857        858        859        860        861  #> 0.02333912 0.02335786 0.02335786 0.02335786 0.02356867 0.02350511 0.02350511  #>        862        863        864        865        866        867        868  #> 0.02350511 0.02353737 0.02353737 0.02350511 0.02350511 0.02350511 0.02350511  #>        869        870        871        872        873        874        875  #> 0.02350511 0.02350511 0.02291670 0.02291670 0.02291670 0.02291670 0.02291670  #>        876        877        878        879        880        881        882  #> 0.02291670 0.02295919 0.02295919 0.02295919 0.02297849 0.02303795 0.02297849  #>        883        884        885        886        887        888        889  #> 0.02356867 0.02356867 0.02366506 0.02372728 0.02356867 0.02350511 0.05498902  #>        890        891        892        893        894        895        896  #> 0.05498902 0.05498902 0.05510110 0.05498902 0.05498541 0.05888954 0.05915229  #>        897        898        899        900        901        902        903  #> 0.06118959 0.05919023 0.05957938 0.07493078 0.02320384 0.02336231 0.02309759  #>        904        905        906        907        908        909        910  #> 0.02320384 0.02308872 0.02336231 0.08977429 0.09105480 0.08951429 0.09725384  #>        911        912        913        914        915        916        917  #> 0.09725384 0.08833027 0.03653964 0.03633198 0.03600655 0.04761568 0.03671600  #>        918        919        920        921        922        923        924  #> 0.03600655 0.02362840 0.02330894 0.02333513 0.02362840 0.02359219 0.02311994  #>        925        926        927        928        929        930        931  #> 0.02308670 0.02292220 0.02292220 0.02292220 0.02292220 0.02292220 0.02311829  #>        932        933        934        935        936        937        938  #> 0.02311829 0.02311829 0.02312691 0.02312691 0.02312691 0.02988705 0.02981969  #>        939        940        941        942        943        944        945  #> 0.02981969 0.02981560 0.02981560 0.02981560 0.02376309 0.02376309 0.02376309  #>        946        947        948        949        950        951        952  #> 0.02376309 0.02376309 0.02376309 0.02445491 0.02445491 0.02475554 0.02453834  #>        953        954        955        956        957        958        959  #> 0.02446353 0.02445491 0.04589692 0.04583782 0.04582787 0.04583782 0.04583782  #>        960        961        962        963        964        965        966  #> 0.04609246 0.02843577 0.02843577 0.02843577 0.02843577 0.02929409 0.02843577  #>        967        968        969        970        971        972        973  #> 0.02752170 0.02297962 0.02297962 0.02334485 0.02334485 0.02297962 0.03190894  #>        974        975        976        977        978        979        980  #> 0.03180146 0.03179884 0.03179884 0.03176468 0.03179884 0.02401568 0.02449931  #>        981        982        983        984        985        986        987  #> 0.02449931 0.02401568 0.02412802 0.02547331 0.02237885 0.02237885 0.02237885  #>        988        989        990        991        992        993        994  #> 0.02482389 0.02208662 0.02240869 0.02302752 0.02302752 0.02303282 0.02401216  #>        995        996        997        998        999       1000       1001  #> 0.02311994 0.02302752 0.06790610 0.06710238 0.07076058 0.07076058 0.06815503  #>       1002       1003       1004       1005       1006       1007       1008  #> 0.06723527 0.01999774 0.01932724 0.02285436 0.02285436 0.01936292 0.02006665  #>       1009       1010       1011       1012       1013       1014       1015  #> 0.02657608 0.02659632 0.02659632 0.02659632 0.02664060 0.02657608 0.02295553  #>       1016       1017       1018       1019       1020       1021       1022  #> 0.02298711 0.02314945 0.02375722 0.02298711 0.02298711 0.02515037 0.02479433  #>       1023       1024       1025       1026       1027       1028       1029  #> 0.02452521 0.02436167 0.02558970 0.03693879 0.02295553 0.02295553 0.02308670  #>       1030       1031       1032       1033       1034       1035       1036  #> 0.02292220 0.02298711 0.02314945 0.02483959 0.02483959 0.02517183 0.02506942  #>       1037       1038       1039       1040       1041       1042       1043  #> 0.02497144 0.02531749 0.03158654 0.03643433 0.03237026 0.03317558 0.03367159  #>       1044       1045       1046       1047       1048       1049       1050  #> 0.03317558 0.02374995 0.02374597 0.02370044 0.02374597 0.02374995 0.02370044  #>       1051       1052       1053       1054       1055       1056       1057  #> 0.02446353 0.02446353 0.02446353 0.02446353 0.02445491 0.02471290 0.02456411  #>       1058       1059       1060       1061       1062       1063       1064  #> 0.02453834 0.02445491 0.02471290 0.02475554 0.02446353 0.02374597 0.02370044  #>       1065       1066       1067       1068       1069       1070       1071  #> 0.02374995 0.02389391 0.02388599 0.02370044 0.02296404 0.02296764 0.02311623  #>       1072       1073       1074       1075       1076       1077       1078  #> 0.02310906 0.02291670 0.02296764 0.02485505 0.02475525 0.02475525 0.02484172  #>       1079       1080       1081       1082       1083       1084       1085  #> 0.02475525 0.02475525 0.04453073 0.03403945 0.03361320 0.03361320 0.03361320  #>       1086       1087       1088       1089       1090       1091       1092  #> 0.03646355 0.02745143 0.02745143 0.02745523 0.02745523 0.02745523 0.02745143  #>       1093       1094       1095       1096       1097       1098       1099  #> 0.06557017 0.06559129 0.06557017 0.06563188 0.06554986 0.06577698 0.01970090  #>       1100       1101       1102       1103       1104       1105       1106  #> 0.01970090 0.01970090 0.01970090 0.01970090 0.02517912 0.02178372 0.02167131  #>       1107       1108       1109       1110       1111       1112       1113  #> 0.02167131 0.02175787 0.02175787 0.02166265 0.03802126 0.03802126 0.03818637  #>       1114       1115       1116       1117       1118       1119       1120  #> 0.03791494 0.03791494 0.04240306 0.04016542 0.03852998 0.04311116 0.04631147  #>       1121       1122       1123       1124       1125       1126       1127  #> 0.03967772 0.03788646 0.02295919 0.02295919 0.02295919 0.02297849 0.02309562  #>       1128       1129       1130       1131       1132       1133       1134  #> 0.02295919 0.02300013 0.02302300 0.02300013 0.02300013 0.02300013 0.02302300  #>       1135       1136       1137       1138       1139       1140       1141  #> 0.02619969 0.02616687 0.02616687 0.02622014 0.02616687 0.02616687 0.02167196  #>       1142       1143       1144       1145       1146       1147       1148  #> 0.02167196 0.02167196 0.02140214 0.02281917 0.02225572 0.03298068 0.03090026  #>       1149       1150       1151       1152       1153       1154       1155  #> 0.05012103 0.03114882 0.03205005 0.03114882 0.02445491 0.02446353 0.02453834  #>       1156       1157       1158       1159       1160       1161       1162  #> 0.02445491 0.02475554 0.02446353 0.02389814 0.02347355 0.02347355 0.02347355  #>       1163       1164       1165       1166       1167       1168       1169  #> 0.02390565 0.02352280 0.02792325 0.02792325 0.02792325 0.02792325 0.02790800  #>       1170       1171       1172       1173       1174       1175       1176  #> 0.02797346 0.02330894 0.02311994 0.02302752 0.02330894 0.02330894 0.02566105  #>       1177       1178       1179       1180       1181       1182       1183  #> 0.02311623 0.02311623 0.02311623 0.02296764 0.02291670 0.02659074 0.02569441  #>       1184       1185       1186       1187       1188       1189       1190  #> 0.02556128 0.02555896 0.02555896 0.02555896 0.02555896 0.02419816 0.02424731  #>       1191       1192       1193       1194       1195       1196       1197  #> 0.02419816 0.02417616 0.02424731 0.02419816 0.05654549 0.05662075 0.05662075  #>       1198       1199       1200       1201       1202       1203       1204  #> 0.05662075 0.05908270 0.05909091 0.02053033 0.02058634 0.02053033 0.02053033  #>       1205       1206       1207       1208       1209       1210       1211  #> 0.02074651 0.02053033 0.02577919 0.02582495 0.02582495 0.02594944 0.02577919  #>       1212       1213       1214       1215       1216       1217       1218  #> 0.02577919 0.02710522 0.02701389 0.02700586 0.02701389 0.02701389 0.02710522  #>       1219       1220       1221       1222       1223       1224       1225  #> 0.02614824 0.02512016 0.02952068 0.03315077 0.02494939 0.02537877 0.03387436  #>       1226       1227       1228       1229       1230       1231       1232  #> 0.03223938 0.03307004 0.03387436 0.03387901 0.03387901 0.02356867 0.02356867  #>       1233       1234       1235       1236       1237       1238       1239  #> 0.02350511 0.02350511 0.02350511 0.02366506 0.03229695 0.02451956 0.02451956  #>       1240       1241       1242       1243       1244       1245       1246  #> 0.02451956 0.02451956 0.02431306 0.02804650 0.02955450 0.03047345 0.03098526  #>       1247       1248       1249       1250       1251       1252       1253  #> 0.02897132 0.02778304 0.03808338 0.03791494 0.03786791 0.03795233 0.03808338  #>       1254       1255       1256       1257       1258       1259       1260  #> 0.03788039 0.01908622 0.01908622 0.01908622 0.01887321 0.01880306 0.01880306  #>       1261       1262       1263       1264       1265       1266       1267  #> 0.02398289 0.02392439 0.02392439 0.02431102 0.02392439 0.02398289 0.02320812  #>       1268       1269       1270       1271       1272       1273       1274  #> 0.02320311 0.02320311 0.02331006 0.02320311 0.02320311 0.02350511 0.02350511  #>       1275       1276       1277       1278       1279       1280       1281  #> 0.02372728 0.02353737 0.02350511 0.02353737 0.02353737 0.02350511 0.02350511  #>       1282       1283       1284       1285       1286       1287       1288  #> 0.02350511 0.02350511 0.02350511 0.02475525 0.02475525 0.02531330 0.02501819  #>       1289       1290       1291       1292       1293       1294       1295  #> 0.02484172 0.02475525 0.02309759 0.02309759 0.02309759 0.02317732 0.02308872  #>       1296       1297       1298       1299       1300       1301       1302  #> 0.02308872 0.02507240 0.02507240 0.02514501 0.02507240 0.02508961 0.02508961  #>       1303       1304       1305       1306       1307       1308       1309  #> 0.05224922 0.02491104 0.02491104 0.02442127 0.02491104 0.02491104 0.01962278  #>       1310       1311       1312       1313       1314       1315       1316  #> 0.01809182 0.02067326 0.01809182 0.02101916 0.01832444 0.02399299 0.02380434  #>       1317       1318       1319       1320       1321       1322       1323  #> 0.02385163 0.02399299 0.02399308 0.02422690 0.01960217 0.01939576 0.01566159  #>       1324       1325       1326       1327       1328       1329       1330  #> 0.01558144 0.01558144 0.01558144 0.03013413 0.03014804 0.03269093 0.03006851  #>       1331       1332       1333       1334       1335       1336       1337  #> 0.03027879 0.03157309 0.02417616 0.02419816 0.02417616 0.02419816 0.02417616  #>       1338       1339       1340       1341       1342       1343       1344  #> 0.02424731 0.05002616 0.04816048 0.04668985 0.04934216 0.04739718 0.05100644  #>       1345       1346       1347       1348       1349       1350       1351  #> 0.02370044 0.02370044 0.02370044 0.02370044 0.02370044 0.02370044 0.02413064  #>       1352       1353       1354       1355       1356       1357       1358  #> 0.02389391 0.02374597 0.02374995 0.02534394 0.02374995 0.02384686 0.02401363  #>       1359       1360       1361       1362       1363       1364       1365  #> 0.02295919 0.02295919 0.02295919 0.02295919 0.02541404 0.02541404 0.02541404  #>       1366       1367       1368       1369       1370       1371       1372  #> 0.02541404 0.02541404 0.02544365 0.04474393 0.04197232 0.04474393 0.04203413  #>       1373       1374       1375       1376       1377       1378       1379  #> 0.04200974 0.04200974 0.03176468 0.03176468 0.03176468 0.03176468 0.03176468  #>       1380       1381       1382       1383       1384       1385       1386  #> 0.03176468 0.02308872 0.02309759 0.02308872 0.02309759 0.02308872 0.02308872  #>       1387       1388       1389       1390       1391       1392       1393  #> 0.02214213 0.02214213 0.02172167 0.02166504 0.02743860 0.02188144 0.01693229  #>       1394       1395       1396       1397       1398       1399       1400  #> 0.01651461 0.01733354 0.01733354 0.02338303 0.01993079 0.01992157 0.02001142  #>       1401       1402       1403       1404       1405       1406       1407  #> 0.02001142 0.02052222 0.02001142 0.01992157 0.02434590 0.02426366 0.02434590  #>       1408       1409       1410       1411       1412       1413       1414  #> 0.02426366 0.02617180 0.02452521 0.02309759 0.02309759 0.02309759 0.02308872  #>       1415       1416       1417       1418       1419       1420       1421  #> 0.02308872 0.02308872 0.06102688 0.06137499 0.06102688 0.06100468 0.06100468  #>       1422       1423       1424       1425       1426       1427       1428  #> 0.06102688 0.02784716 0.02439611 0.02422679 0.02422679 0.02442832 0.02442832  #>       1429       1430       1431       1432       1433       1434       1435  #> 0.02323457 0.02323457 0.02323457 0.02323457 0.02323457 0.02337598 0.02673687  #>       1436       1437       1438       1439       1440       1441       1442  #> 0.02673687 0.02673687 0.02673687 0.02673687 0.02676567 0.02343846 0.02286490  #>       1443       1444       1445       1446       1447       1448       1449  #> 0.02316425 0.02343846 0.02296602 0.03006231 0.01984288 0.01996471 0.02048018  #>       1450       1451       1452       1453       1454       1455       1456  #> 0.02053819 0.01984288 0.02143232 0.01914028 0.02052652 0.01914028 0.01989678  #>       1457       1458       1459       1460       1461       1462       1463  #> 0.01944567 0.01910226 0.02294271 0.02294271 0.02419785 0.02366867 0.02366867  #>       1464       1465       1466       1467       1468       1469       1470  #> 0.02366867 0.02433267 0.02412802 0.02449931 0.02449931 0.02449931 0.02601626  #>       1471       1472       1473       1474       1475       1476       1477  #> 0.04345681 0.04701221 0.03814262 0.04160553 0.03861358 0.03920504 0.02485171  #>       1478       1479       1480       1481       1482       1483       1484  #> 0.02374995 0.02374995 0.02374995 0.02374995 0.02370044 0.02341686 0.02540751  #>       1485       1486       1487       1488       1489       1490       1491  #> 0.02359011 0.02385680 0.02341686 0.02347284 0.02292220 0.02292220 0.02295553  #>       1492       1493       1494       1495       1496       1497       1498  #> 0.02292220 0.02295553 0.02292220 0.02302286 0.02298912 0.02298912 0.02298912  #>       1499       1500       1501       1502       1503       1504       1505  #> 0.02298912 0.02298912 0.02445491 0.02445491 0.02446353 0.02445491 0.02446353  #>       1506       1507       1508       1509       1510       1511       1512  #> 0.02445491 0.02300396 0.02297962 0.02294271 0.02297962 0.02294271 0.02300396  #>       1513       1514       1515       1516       1517       1518       1519  #> 0.02722258 0.02098084 0.02098084 0.02525922 0.02098084 0.02098084 0.03106425  #>       1520       1521       1522       1523       1524       1525       1526  #> 0.03083984 0.03106425 0.03106425 0.03106425 0.04331550 0.05884800 0.03624421  #>       1527       1528       1529       1530       1531       1532       1533  #> 0.03872751 0.03590213 0.03727214 0.03872751 0.02792205 0.02530612 0.02530612  #>       1534       1535       1536       1537       1538       1539       1540  #> 0.02530612 0.02472305 0.02421917 0.02053033 0.02053033 0.02053033 0.02053033  #>       1541       1542       1543       1544       1545       1546       1547  #> 0.02053033 0.02053033 0.02630238 0.02635344 0.02628507 0.02640521 0.02745900  #>       1548       1549       1550       1551       1552       1553       1554  #> 0.02630238 0.02389699 0.03710649 0.02359018 0.02389699 0.02359018 0.02429290  #>       1555       1556       1557       1558       1559       1560       1561  #> 0.02356867 0.02350511 0.02350511 0.02353737 0.02353737 0.02350511 0.02066507  #>       1562       1563       1564       1565       1566       1567       1568  #> 0.02015155 0.02250133 0.01943433 0.01916611 0.02015155 0.02370044 0.02374597  #>       1569       1570       1571       1572       1573       1574       1575  #> 0.02370044 0.02370044 0.02374995 0.02370044 0.03804789 0.03468611 0.03489568  #>       1576       1577       1578       1579       1580       1581       1582  #> 0.03535503 0.03567741 0.03535503 0.04632823 0.04543322 0.04605280 0.04950441  #>       1583       1584       1585       1586       1587       1588       1589  #> 0.04775290 0.04730899 0.02240869 0.02208662 0.02218245 0.02209267 0.02208662  #>       1590       1591       1592       1593       1594       1595       1596  #> 0.02209267 0.02550901 0.02540763 0.02550901 0.02548983 0.02540763 0.02541405  #>       1597       1598       1599       1600       1601       1602       1603  #> 0.02352280 0.02352280 0.02347355 0.02347355 0.02352026 0.02366235 0.02887461  #>       1604       1605       1606       1607       1608       1609       1610  #> 0.02887461 0.02891159 0.02887461 0.02891567 0.02887461 0.03379386 0.03387263  #>       1611       1612       1613       1614       1615       1616       1617  #> 0.03379993 0.03379993 0.03385445 0.03379386 0.02298711 0.02295553 0.02295553  #>       1618       1619       1620       1621       1622       1623       1624  #> 0.02295553 0.02295553 0.02295553 0.02577919 0.02577919 0.02577919 0.02577919  #>       1625       1626       1627       1628       1629       1630       1631  #> 0.02577919 0.02577919 0.02475971 0.02484172 0.02475971 0.02475971 0.02475525  #>       1632       1633       1634       1635       1636       1637       1638  #> 0.02475525 0.02305738 0.02102218 0.02053033 0.02058634 0.02058634 0.02058400  #>       1639       1640       1641       1642       1643       1644       1645  #> 0.02308872 0.02309759 0.02308872 0.02309759 0.02308872 0.02308872 0.02398888  #>       1646       1647       1648       1649       1650       1651       1652  #> 0.02398888 0.02398888 0.02398888 0.02398888 0.02375123 0.02826388 0.02807390  #>       1653       1654       1655       1656       1657       1658       1659  #> 0.02940858 0.02796338 0.02798379 0.02793325 0.02360690 0.02360389 0.02355758  #>       1660       1661       1662       1663       1664       1665       1666  #> 0.02355758 0.02355758 0.02355758 0.02392439 0.02392439 0.02392439 0.02398289  #>       1667       1668       1669       1670       1671       1672       1673  #> 0.02396003 0.02398289 0.02736830 0.02732839 0.02732839 0.02732839 0.02732839  #>       1674       1675       1676       1677       1678       1679       1680  #> 0.02732839 0.02769331 0.02749551 0.02732839 0.02736830 0.02749030 0.02737092  #>       1681       1682       1683       1684       1685       1686       1687  #> 0.02278477 0.02260611 0.02278477 0.02278477 0.02278477 0.02260611 0.02292220  #>       1688       1689       1690       1691       1692       1693       1694  #> 0.02298711 0.02298711 0.02292220 0.02331403 0.02292220 0.03115320 0.03110533  #>       1695       1696       1697       1698       1699       1700       1701  #> 0.03110533 0.03110533 0.03112989 0.03112989 0.02473516 0.02452321 0.02450221  #>       1702       1703       1704       1705       1706       1707       1708  #> 0.02452321 0.02452321 0.02450221 0.02307516 0.02302300 0.02302300 0.02300013  #>       1709       1710       1711       1712       1713       1714       1715  #> 0.02300013 0.02300013 0.01895761 0.01895761 0.01906543 0.01895761 0.02541011  #>       1716       1717       1718       1719       1720       1721       1722  #> 0.01909767 0.02290873 0.02349918 0.02349918 0.02390022 0.02416736 0.02335415  #>       1723       1724       1725       1726       1727       1728       1729  #> 0.02302300 0.02302300 0.02302300 0.02302300 0.02307516 0.02324714 0.02396003  #>       1730       1731       1732       1733       1734       1735       1736  #> 0.02392439 0.02392439 0.02392439 0.02392439 0.02398289 0.02508961 0.02514501  #>       1737       1738       1739       1740       1741       1742       1743  #> 0.02507240 0.02507240 0.02508961 0.02508961 0.02310906 0.02311623 0.02296764  #>       1744       1745       1746       1747       1748       1749       1750  #> 0.02291670 0.02296404 0.02296404 0.02302752 0.02303282 0.02303282 0.02302752  #>       1751       1752       1753       1754       1755       1756       1757  #> 0.02303282 0.02302752 0.02131864 0.02131864 0.02131864 0.02131864 0.02131864  #>       1758       1759       1760       1761       1762       1763       1764  #> 0.02131864 0.02058634 0.02241381 0.02075114 0.02053033 0.02058634 0.02053033  #>       1765       1766       1767       1768       1769       1770       1771  #> 0.02128187 0.02128187 0.02133992 0.02125794 0.02125794 0.02125794 0.01655841  #>       1772       1773       1774       1775       1776       1777       1778  #> 0.02063230 0.02063230 0.02062838 0.01708314 0.01708314 0.01953145 0.02674515  #>       1779       1780       1781       1782       1783       1784       1785  #> 0.01605012 0.01631101 0.01605012 0.01631101 0.02475525 0.02475525 0.02475971  #>       1786       1787       1788       1789       1790       1791       1792  #> 0.02485505 0.02475525 0.02475525 0.02507240 0.02508961 0.02507240 0.02507240  #>       1793       1794       1795       1796       1797       1798       1799  #> 0.02507240 0.02507240 0.02389391 0.02389391 0.02388599 0.02370044 0.02388599  #>       1800       1801       1802       1803       1804       1805       1806  #> 0.02388599 0.02298711 0.02298711 0.02292220 0.02308670 0.02308670 0.02292220  #>       1807       1808       1809       1810       1811       1812       1813  #> 0.05730863 0.05732199 0.05737465 0.05733461 0.05733461 0.05730863 0.02446353  #>       1814       1815       1816       1817       1818       1819       1820  #> 0.02445491 0.02445491 0.02456411 0.02445491 0.02453834 0.03586841 0.03586841  #>       1821       1822       1823       1824       1825       1826       1827  #> 0.03586841 0.03586841 0.03586841 0.03586841 0.02350511 0.02350511 0.02350511  #>       1828       1829       1830       1831       1832       1833       1834  #> 0.02356867 0.02366506 0.02353737 0.02446353 0.02446353 0.02445491 0.02445491  #>       1835       1836       1837       1838       1839       1840       1841  #> 0.02445491 0.02445491 0.02770106 0.02737092 0.02749030 0.02732839 0.02749030  #>       1842       1843       1844       1845       1846       1847       1848  #> 0.02749551 0.01973916 0.01924219 0.01924219 0.01924219 0.02050303 0.01963751  #>       1849       1850       1851       1852       1853       1854       1855  #> 0.02924053 0.02941789 0.03073481 0.02807262 0.02746960 0.02807262 0.02106668  #>       1856       1857       1858       1859       1860       1861       1862  #> 0.02674592 0.02106668 0.02106668 0.02106668 0.02091973 0.02003623 0.02791778  #>       1863       1864       1865       1866       1867       1868       1869  #> 0.01649235 0.01649235 0.01674909 0.01649235 0.02021273 0.01992157 0.02021273  #>       1870       1871       1872       1873       1874       1875       1876  #> 0.02001142 0.02021273 0.02021273 0.02341686 0.02341686 0.02333912 0.02335786  #>       1877       1878       1879       1880       1881       1882       1883  #> 0.02335786 0.02368267 0.02901386 0.02414667 0.02315662 0.02315662 0.02308161  #>       1884       1885       1886       1887       1888       1889       1890  #> 0.02315662 0.03773143 0.03861006 0.03773143 0.03800817 0.03792037 0.03800817  #>       1891       1892       1893       1894       1895       1896       1897  #> 0.02631828 0.02622014 0.02616687 0.02622014 0.02616687 0.02616687 0.04701323  #>       1898       1899       1900       1901       1902       1903       1904  #> 0.04567811 0.04539166 0.04656917 0.04581597 0.05024149 0.02601426 0.02745267  #>       1905       1906       1907       1908       1909       1910       1911  #> 0.02569290 0.03987155 0.02641719 0.02601426 0.01887241 0.01889551 0.01887241  #>       1912       1913       1914       1915       1916       1917       1918  #> 0.01887241 0.01887241 0.02052652 0.02335786 0.02341686 0.02341686 0.02368267  #>       1919       1920       1921       1922       1923       1924       1925  #> 0.02359011 0.02368267 0.02918650 0.02918650 0.02918650 0.02918650 0.02925002  #>       1926       1927       1928       1929       1930       1931       1932  #> 0.02917967 0.02311623 0.02291670 0.02296404 0.02291670 0.02291670 0.02296404  #>       1933       1934       1935       1936       1937       1938       1939  #> 0.02320311 0.02329509 0.02320311 0.02329509 0.02350767 0.02331006 0.03353728  #>       1940       1941       1942       1943       1944       1945       1946  #> 0.03154657 0.03090026 0.03388636 0.03205005 0.03248401 0.02577919 0.02577919  #>       1947       1948       1949       1950       1951       1952       1953  #> 0.02577919 0.02577919 0.02577919 0.02577919 0.02338119 0.02338119 0.02338119  #>       1954       1955       1956       1957       1958       1959       1960  #> 0.02338119 0.02338119 0.02338119 0.05887286 0.05902769 0.05887102 0.05887102  #>       1961       1962       1963       1964       1965       1966       1967  #> 0.06235005 0.05892753 0.01958815 0.01958815 0.02167331 0.02163306 0.01964031  #>       1968       1969       1970       1971       1972       1973       1974  #> 0.01955669 0.02294271 0.02294271 0.02294271 0.02294271 0.02294271 0.02294271  #>       1975       1976       1977       1978       1979       1980       1981  #> 0.06787149 0.06787149 0.06791691 0.06791691 0.06791691 0.06787149 0.01987116  #>       1982       1983       1984       1985       1986       1987       1988  #> 0.01665054 0.01973280 0.01574559 0.01587036 0.01574559 0.02940279 0.02968161  #>       1989       1990       1991       1992       1993       1994       1995  #> 0.02907070 0.02919863 0.02907070 0.02940279 0.02352026 0.02366741 0.02366235  #>       1996       1997       1998       1999       2000       2001       2002  #> 0.02347355 0.02347355 0.02347355 0.02431306 0.02431306 0.02419816 0.02593843  #>       2003       2004       2005       2006       2007       2008       2009  #> 0.02431306 0.02417616 0.02449931 0.02399697 0.02412802 0.02424017 0.02401568  #>       2010       2011       2012       2013       2014       2015       2016  #> 0.02407209 0.02445491 0.02446353 0.02453834 0.02475554 0.02446353 0.02471290  #>       2017       2018       2019       2020       2021       2022       2023  #> 0.02752965 0.02752965 0.02745523 0.02745143 0.02745523 0.02745523 0.02352280  #>       2024       2025       2026       2027       2028       2029       2030  #> 0.02352280 0.02347355 0.02352026 0.02352026 0.02352026 0.02356867 0.02350511  #>       2031       2032       2033       2034       2035       2036       2037  #> 0.02353737 0.02350511 0.02366506 0.02353737 0.02435392 0.02510285 0.02510285  #>       2038       2039       2040       2041       2042       2043       2044  #> 0.02510285 0.02510285 0.02510285 0.02308872 0.02309759 0.02308872 0.02309759  #>       2045       2046       2047       2048       2049       2050       2051  #> 0.02308872 0.02309759 0.01952912 0.01956459 0.01952912 0.02478805 0.01952912  #>       2052       2053       2054       2055       2056       2057       2058  #> 0.01956459 0.02295786 0.02286217 0.02828912 0.02286217 0.02286490 0.02316425  #>       2059       2060       2061       2062       2063       2064       2065  #> 0.02336231 0.02320384 0.02317732 0.02320384 0.02309759 0.02308872 0.02918650  #>       2066       2067       2068       2069       2070       2071       2072  #> 0.02918650 0.02918650 0.02917967 0.02917967 0.02917967 0.04049517 0.04009650  #>       2073       2074       2075       2076       2077       2078       2079  #> 0.04007897 0.03991688 0.04024390 0.03992040 0.06326411 0.06328792 0.06324434  #>       2080       2081       2082       2083       2084       2085       2086  #> 0.06326411 0.06326411 0.06328792 0.03773143 0.03834176 0.03800817 0.03800817  #>       2087       2088       2089       2090       2091       2092       2093  #> 0.03903706 0.04586363 0.02445491 0.02446353 0.02446353 0.02445491 0.02453834  #>       2094       2095       2096       2097       2098       2099       2100  #> 0.02445491 0.02376794 0.02285964 0.02677653 0.02285964 0.02249653 0.02246382  #>       2101       2102       2103       2104       2105       2106       2107  #> 0.02285956 0.02288024 0.01934045 0.01889228 0.01978429 0.01905269 0.02333912  #>       2108       2109       2110       2111       2112       2113       2114  #> 0.02333912 0.02335786 0.02333912 0.02335786 0.02335786 0.02382547 0.02392230  #>       2115       2116       2117       2118       2119       2120       2121  #> 0.02376309 0.02376309 0.02376309 0.02376309 0.02403743 0.02397833 0.02401318  #>       2122       2123       2124       2125       2126       2127       2128  #> 0.02401318 0.02418977 0.02401318 0.02380546 0.02380546 0.02516993 0.02506145  #>       2129       2130       2131       2132       2133       2134       2135  #> 0.02384753 0.02384753 0.02616687 0.02616687 0.02616687 0.02616687 0.02619969  #>       2136       2137       2138       2139       2140       2141       2142  #> 0.02616687 0.02141134 0.02133992 0.02128187 0.02128187 0.02128187 0.02128187  #>       2143       2144       2145       2146       2147       2148       2149  #> 0.05272391 0.05276372 0.05368475 0.05270769 0.05269441 0.05272391 0.01941827  #>       2150       2151       2152       2153       2154       2155       2156  #> 0.02078073 0.01910801 0.01941827 0.02145862 0.01910801 0.02295919 0.02303795  #>       2157       2158       2159       2160       2161       2162       2163  #> 0.02295919 0.02297849 0.02309562 0.02295919 0.02839167 0.04675010 0.02751394  #>       2164       2165       2166       2167       2168       2169       2170  #> 0.02718909 0.02694412 0.02791589 0.03099451 0.03099769 0.03099769 0.03099451  #>       2171       2172       2173       2174       2175       2176       2177  #> 0.03099451 0.03099769 0.01962089 0.01962089 0.01944273 0.02531089 0.01898533  #>       2178       2179       2180       2181       2182       2183       2184  #> 0.01898533 0.02303282 0.02302752 0.02303282 0.02302752 0.02303282 0.02303282  #>       2185       2186       2187       2188       2189       2190       2191  #> 0.02320311 0.02320311 0.02329509 0.02320812 0.02331006 0.02320311 0.02475525  #>       2192       2193       2194       2195       2196       2197       2198  #> 0.02484172 0.02531330 0.02501819 0.02484172 0.02475525 0.02519614 0.02452521  #>       2199       2200       2201       2202       2203       2204       2205  #> 0.02434590 0.02744301 0.02479433 0.02452521 0.02309759 0.02309759 0.02317732  #>       2206       2207       2208       2209       2210       2211       2212  #> 0.02309759 0.02308872 0.02308872 0.02918650 0.02918650 0.02917967 0.02918650  #>       2213       2214       2215       2216       2217       2218       2219  #> 0.02917967 0.02925002 0.02452321 0.02452321 0.02452321 0.02457313 0.02450221  #>       2220       2221       2222       2223       2224       2225       2226  #> 0.02457313 0.02021037 0.02021037 0.02021037 0.02021037 0.02021037 0.02021037  #>       2227       2228       2229       2230       2231       2232       2233  #> 0.02296764 0.02296404 0.02291670 0.02291670 0.02296404 0.02291670 0.02374995  #>       2234       2235       2236       2237       2238       2239       2240  #> 0.02374995 0.02374995 0.02374995 0.02370044 0.02388599 0.02507240 0.02508961  #>       2241       2242       2243       2244       2245       2246       2247  #> 0.02507240 0.02507240 0.02507240 0.02508961 0.03480244 0.03426071 0.03428872  #>       2248       2249       2250       2251       2252       2253       2254  #> 0.03513033 0.03429847 0.03571412 0.02295919 0.02295919 0.02295919 0.02297849  #>       2255       2256       2257       2258       2259       2260       2261  #> 0.02303795 0.02297849 0.02616687 0.02622014 0.02616687 0.02631828 0.02616687  #>       2262       2263       2264       2265       2266       2267       2268  #> 0.02616687 0.02544365 0.02562012 0.02541404 0.02541404 0.02541404 0.02556159  #>       2269       2270       2271       2272       2273       2274       2275  #> 0.02398289 0.02392439 0.02396003 0.02392439 0.02396003 0.02392439 0.02981560  #>       2276       2277       2278       2279       2280       2281       2282  #> 0.02981560 0.02981560 0.02981969 0.02989928 0.02989928 0.02128187 0.02128187  #>       2283       2284       2285       2286       2287       2288       2289  #> 0.02152658 0.02125794 0.02128187 0.02125794 0.02981969 0.02981969 0.02981969  #>       2290       2291       2292       2293       2294       2295       2296  #> 0.02981560 0.02981560 0.02988705 0.02166822 0.02178769 0.02160188 0.02178769  #>       2297       2298       2299       2300       2301       2302       2303  #> 0.02189721 0.02154171 0.02793325 0.02796338 0.02796338 0.02861166 0.02796338  #>       2304       2305       2306       2307       2308       2309       2310  #> 0.02793325 0.03127319 0.03110533 0.03112989 0.03115320 0.03110533 0.03110533  #>       2311       2312       2313       2314       2315       2316       2317  #> 0.02392439 0.02392439 0.02392439 0.02396003 0.02392439 0.02392439 0.02445491  #>       2318       2319       2320       2321       2322       2323       2324  #> 0.02475554 0.02445491 0.02445491 0.02446353 0.02456411 0.03116555 0.03114941  #>       2325       2326       2327       2328       2329       2330       2331  #> 0.03125390 0.03116555 0.03120561 0.03120561 0.02770106 0.02770106 0.02736830  #>       2332       2333       2334       2335       2336       2337       2338  #> 0.02770106 0.02737092 0.02737092 0.02376309 0.02379550 0.02376309 0.02376309  #>       2339       2340       2341       2342       2343       2344       2345  #> 0.02376309 0.02379550 0.02353382 0.02353382 0.02182208 0.02182208 0.02182208  #>       2346       2347       2348       2349       2350       2351       2352  #> 0.02202629 0.02798428 0.02798428 0.02765333 0.02713209 0.02839089 0.04093494  #>       2353       2354       2355       2356       2357       2358       2359  #> 0.02065625 0.02028311 0.02024903 0.02028311 0.02028311 0.02024903 0.02541404  #>       2360       2361       2362       2363       2364       2365       2366  #> 0.02541404 0.02541404 0.02541404 0.02541404 0.02541404 0.01994003 0.02833771  #>       2367       2368       2369       2370       2371       2372       2373  #> 0.01953962 0.01906987 0.01901131 0.02044315 0.02296404 0.02291670 0.02296764  #>       2374       2375       2376       2377       2378       2379       2380  #> 0.02334994 0.02311623 0.02369775 0.02582495 0.02577919 0.02577919 0.02577919  #>       2381       2382       2383       2384       2385       2386       2387  #> 0.02582495 0.02582083 0.02295919 0.02303795 0.02309562 0.02297849 0.02295919  #>       2388       2389       2390       2391       2392       2393       2394  #> 0.02297849 0.01915604 0.01915604 0.01890986 0.01890986 0.02109410 0.01890986  #>       2395       2396       2397       2398       2399       2400       2401  #> 0.02396198 0.02291723 0.02339729 0.02223199 0.02707114 0.02460547 0.03732926  #>       2402       2403       2404       2405       2406       2407       2408  #> 0.04195955 0.03632347 0.03881633 0.03613834 0.03614621 0.02635899 0.02619969  #>       2409       2410       2411       2412       2413       2414       2415  #> 0.02616687 0.02622014 0.02631828 0.02619969 0.03176468 0.03176468 0.03176468  #>       2416       2417       2418       2419       2420       2421       2422  #> 0.03176468 0.03176468 0.03176468 0.02278477 0.02266641 0.02466794 0.02260611  #>       2423       2424       2425       2426       2427       2428       2429  #> 0.02260611 0.02260611 0.02296764 0.02296764 0.02291670 0.02291670 0.02296404  #>       2430       2431       2432       2433       2434       2435       2436  #> 0.02296404 0.01984444 0.01939804 0.01925535 0.01952637 0.01922921 0.01939804  #>       2437       2438       2439       2440       2441       2442       2443  #> 0.02455130 0.02426366 0.02426366 0.02436167 0.02426366 0.02425838 0.04805247  #>       2444       2445       2446       2447       2448       2449       2450  #> 0.04650237 0.04633236 0.04633236 0.04613731 0.04613730 0.02704396 0.02708935  #>       2451       2452       2453       2454       2455       2456       2457  #> 0.02704396 0.02720276 0.03063768 0.03062262 0.03006851 0.03206474 0.03206474  #>       2458       2459       2460       2461       2462       2463       2464  #> 0.03114614 0.03006851 0.03049680 0.02296404 0.02310906 0.02296764 0.02291670  #>       2465       2466       2467       2468       2469       2470       2471  #> 0.02291670 0.02296404 0.02296764 0.02296764 0.02291670 0.02410665 0.02311623  #>       2472       2473       2474       2475       2476       2477       2478  #> 0.02296404 0.02744301 0.02434590 0.02434590 0.02434590 0.02434590 0.02452521  #>       2479       2480       2481       2482       2483       2484       2485  #> 0.02254654 0.02254654 0.02342847 0.02254654 0.02254654 0.02254654 0.02019774  #>       2486       2487       2488       2489       2490       2491       2492  #> 0.02151938 0.02053819 0.02053819 0.02048018 0.01984288 0.01914028 0.01876031  #>       2493       2494       2495       2496       2497       2498       2499  #> 0.01876031 0.01876031 0.01876031 0.01876031 0.03274180 0.03254157 0.03254157  #>       2500       2501       2502       2503       2504       2505       2506  #> 0.03116555 0.03164436 0.03120561 0.01925535 0.01925535 0.01922921 0.01922921  #>       2507       2508       2509       2510       2511       2512       2513  #> 0.01932009 0.01922921 0.02429290 0.02359018 0.02429290 0.02359018 0.02359018  #>       2514       2515       2516       2517       2518       2519       2520  #> 0.02359018 0.02419816 0.02419816 0.02441080 0.02419816 0.02417616 0.02417616  #>       2521       2522       2523       2524       2525       2526       2527  #> 0.06637065 0.06633525 0.06632487 0.06633525 0.06631306 0.06632487 0.02298912  #>       2528       2529       2530       2531       2532       2533       2534  #> 0.02305335 0.02305335 0.02305335 0.02302286 0.02370162 0.01873596 0.01846721  #>       2535       2536       2537       2538       2539       2540       2541  #> 0.01933343 0.01873596 0.02494845 0.02185949 0.03955920 0.03884791 0.03883143  #>       2542       2543       2544       2545       2546       2547       2548  #> 0.03971242 0.03942424 0.03884791 0.02504399 0.02505172 0.02504399 0.02504399  #>       2549       2550       2551       2552       2553       2554       2555  #> 0.02504399 0.02504399 0.02560873 0.02514926 0.02504399 0.02529736 0.02512616  #>       2556       2557       2558       2559       2560       2561       2562  #> 0.02512616 0.02334994 0.02311623 0.02310906 0.02311623 0.02336058 0.02291670  #>       2563       2564       2565       2566       2567       2568       2569  #> 0.06271055 0.06102688 0.06096588 0.06102688 0.06096588 0.06102688 0.03752085  #>       2570       2571       2572       2573       2574       2575       2576  #> 0.03706972 0.03893466 0.03778986 0.04119437 0.03849831 0.02679523 0.02734739  #>       2577       2578       2579       2580       2581       2582       2583  #> 0.02519889 0.02620623 0.02553147 0.02532124 0.02355218 0.02355218 0.02661396  #>       2584       2585       2586       2587       2588       2589       2590  #> 0.02221997 0.02206076 0.02204781 0.03247625 0.03255447 0.03243290 0.03243290  #>       2591       2592       2593       2594       2595       2596       2597  #> 0.03243290 0.03243290 0.02370044 0.02370044 0.02370044 0.02370044 0.02370044  #>       2598       2599       2600       2601       2602       2603       2604  #> 0.02370044 0.05229633 0.05436805 0.05569514 0.05457462 0.05277675 0.05277675  #>       2605       2606       2607       2608       2609       2610       2611  #> 0.01988752 0.02102012 0.01893678 0.02025450 0.01937534 0.01889351 0.02797346  #>       2612       2613       2614       2615       2616       2617       2618  #> 0.02819468 0.02801909 0.02792325 0.02797346 0.02797346 0.02601031 0.02657992  #>       2619       2620       2621       2622       2623       2624       2625  #> 0.02657992 0.02657992 0.03732633 0.03403575 0.02113227 0.02001142 0.02021273  #>       2626       2627       2628       2629       2630       2631       2632  #> 0.02021273 0.02021273 0.02168047 0.02175787 0.02195561 0.02199830 0.02166265  #>       2633       2634       2635       2636       2637       2638       2639  #> 0.02195561 0.02178372 0.02701389 0.02701389 0.02701389 0.02700586 0.02700586  #>       2640       2641       2642       2643       2644       2645       2646  #> 0.02700586 0.02456411 0.02456411 0.02456411 0.02456411 0.02456411 0.02456411  #>       2647       2648       2649       2650       2651       2652       2653  #> 0.02359011 0.02341686 0.02333912 0.02335786 0.02398484 0.02335786 0.02445491  #>       2654       2655       2656       2657       2658       2659       2660  #> 0.02446353 0.02446353 0.02446353 0.02445491 0.02445491 0.01983432 0.01993915  #>       2661       2662       2663       2664       2665       2666       2667  #> 0.01993915 0.02053819 0.02151938 0.01993915 0.04213234 0.04210612 0.04210612  #>       2668       2669       2670       2671       2672       2673       2674  #> 0.04210612 0.04213343 0.04221417 0.02863498 0.02863498 0.02817968 0.02907937  #>       2675       2676       2677       2678       2679       2680       2681  #> 0.02871797 0.02843138 0.02992487 0.02992487 0.02992487 0.02992487 0.02992487  #>       2682       2683       2684       2685       2686       2687       2688  #> 0.02992487 0.02693154 0.02676567 0.02693154 0.02693154 0.02676567 0.02813802  #>       2689       2690       2691       2692       2693       2694       2695  #> 0.01959792 0.01901116 0.02004223 0.01889077 0.02140042 0.02235878 0.02504399  #>       2696       2697       2698       2699       2700       2701       2702  #> 0.02589883 0.02514926 0.02514926 0.02504399 0.02505172 0.02321473 0.02321473  #>       2703       2704       2705       2706       2707       2708       2709  #> 0.02321473 0.02321473 0.02298912 0.02817097 0.02836853 0.02817968 0.02804042  #>       2710       2711       2712       2713       2714       2715       2716  #> 0.02863498 0.02836853 0.02804042 0.01753116 0.01749329 0.02054871 0.01769683  #>       2717       2718       2719       2720       2721       2722       2723  #> 0.01753116 0.02054871 0.02471803 0.02453261 0.02443590 0.02443821 0.02819147  #>       2724       2725       2726       2727       2728       2729       2730  #> 0.02819147 0.02445491 0.02445491 0.02446353 0.02445491 0.02445491 0.02456411  #>       2731       2732       2733       2734       2735       2736       2737  #> 0.02291670 0.02310906 0.02291670 0.02291670 0.02291670 0.02296764 0.03379386  #>       2738       2739       2740       2741       2742       2743       2744  #> 0.03379386 0.03379993 0.03379386 0.03379386 0.03379386 0.03795233 0.03786791  #>       2745       2746       2747       2748       2749       2750       2751  #> 0.03795233 0.03788039 0.03808338 0.03985923 0.02399697 0.02399697 0.02401568  #>       2752       2753       2754       2755       2756       2757       2758  #> 0.02399697 0.02399697 0.02401568 0.02029194 0.01959075 0.02120438 0.01959075  #>       2759       2760       2761       2762       2763       2764       2765  #> 0.01971319 0.01971319 0.02392439 0.02392439 0.02392439 0.02392439 0.02392439  #>       2766       2767       2768       2769       2770       2771       2772  #> 0.02392439 0.04063010 0.04801454 0.04266160 0.04221742 0.04182247 0.04126218  #>       2773       2774       2775       2776       2777       2778       2779  #> 0.02330894 0.02302752 0.02302752 0.02303282 0.02303282 0.02333513 0.02530667  #>       2780       2781       2782       2783       2784       2785       2786  #> 0.02508961 0.02507240 0.02507240 0.02508961 0.02508961 0.04888415 0.04891567  #>       2787       2788       2789       2790       2791       2792       2793  #> 0.04888415 0.04885904 0.04884852 0.04884852 0.02054983 0.01936124 0.01888444  #>       2794       2795       2796       2797       2798       2799       2800  #> 0.01936124 0.02394763 0.02827587 0.02693154 0.02673687 0.02673687 0.02673687  #>       2801       2802       2803       2804       2805       2806       2807  #> 0.02673687 0.02673687 0.02353737 0.02353737 0.02350511 0.02350511 0.02350511  #>       2808       2809       2810       2811       2812       2813       2814  #> 0.02356867 0.06038270 0.06018930 0.06023452 0.06018930 0.06018154 0.06021123  #>       2815       2816       2817       2818       2819       2820       2821  #> 0.02700586 0.02708122 0.02710522 0.02701389 0.02700586 0.02701389 0.02407209  #>       2822       2823       2824       2825       2826       2827       2828  #> 0.02407209 0.02401568 0.02407209 0.02433267 0.02433267 0.03723582 0.03834176  #>       2829       2830       2831       2832       2833       2834       2835  #> 0.03834176 0.03725372 0.03773143 0.03800817 0.02450221 0.02450221 0.02457313  #>       2836       2837       2838       2839       2840       2841       2842  #> 0.02463589 0.02452321 0.02473516 0.02943014 0.02941232 0.02938289 0.02943014  #>       2843       2844       2845       2846       2847       2848       2849  #> 0.02938289 0.02941232 0.02807390 0.02796338 0.02793325 0.02796338 0.02798379  #>       2850       2851       2852       2853       2854       2855       2856  #> 0.02798379 0.03850136 0.03682710 0.06152782 0.03529047 0.03852501 0.03852501  #>       2857       2858       2859       2860       2861       2862       2863  #> 0.03406441 0.02023968 0.02023968 0.02023968 0.01969015 0.02067318 0.02615960  #>       2864       2865       2866       2867       2868       2869       2870  #> 0.02617676 0.02627985 0.02615960 0.02615960 0.02622854 0.02292220 0.02292220  #>       2871       2872       2873       2874       2875       2876       2877  #> 0.02292220 0.02292220 0.02292220 0.02295553 0.01934517 0.01934517 0.01934517  #>       2878       2879       2880       2881       2882       2883       2884  #> 0.01830648 0.01872816 0.02017293 0.02374995 0.02374995 0.02374995 0.02374597  #>       2885       2886       2887       2888       2889       2890       2891  #> 0.02374597 0.02370044 0.02297962 0.02311423 0.02297962 0.02294271 0.02294271  #>       2892       2893       2894       2895       2896       2897       2898  #> 0.02297962 0.02514926 0.02505172 0.02504399 0.02529736 0.02505172 0.02512616  #>       2899       2900       2901       2902       2903       2904       2905  #> 0.01946032 0.01898738 0.01946032 0.01898929 0.01946032 0.02164562 0.02673687  #>       2906       2907       2908       2909       2910       2911       2912  #> 0.02673687 0.02673687 0.02673687 0.02673687 0.02676567 0.02770106 0.02737092  #>       2913       2914       2915       2916       2917       2918       2919  #> 0.02749551 0.02876776 0.02737092 0.02732839 0.02106668 0.02091973 0.02091973  #>       2920       2921       2922       2923       2924       2925       2926  #> 0.02088001 0.02094813 0.02178140 0.03998884 0.04017669 0.03960485 0.03899932  #>       2927       2928       2929       2930       2931       2932       2933  #> 0.03927455 0.04593733 0.02657608 0.02657608 0.02657608 0.02659632 0.02657608  #>       2934       2935       2936       2937       2938       2939       2940  #> 0.02659632 0.01988281 0.01960013 0.02529227 0.01960013 0.01960013 0.01977478  #>       2941       2942       2943       2944       2945       2946       2947  #> 0.04264065 0.03818954 0.03931550 0.03872751 0.03872751 0.03863517 0.02254654  #>       2948       2949       2950       2951       2952       2953       2954  #> 0.02252635 0.02260611 0.02252635 0.02254654 0.02254654 0.02396003 0.02398289  #>       2955       2956       2957       2958       2959       2960       2961  #> 0.02392439 0.02392439 0.02392439 0.02392439 0.01910226 0.02455964 0.01910226  #>       2962       2963       2964       2965       2966       2967       2968  #> 0.01910226 0.01910226 0.01910226 0.02318346 0.02127243 0.01848035 0.01798320  #>       2969       2970       2971       2972       2973       2974       2975  #> 0.01798320 0.01733980 0.01901131 0.01924833 0.01907116 0.01924578 0.01924833  #>       2976       2977       2978       2979       2980       2981       2982  #> 0.01907116 0.02302300 0.02302300 0.02300013 0.02300013 0.02300013 0.02307516  #>       2983       2984       2985       2986       2987       2988       2989  #> 0.03078658 0.03049680 0.03078658 0.03078658 0.03331010 0.03269093 0.03600976  #>       2990       2991       2992       2993       2994       2995       2996  #> 0.03557366 0.03487950 0.03462500 0.03557366 0.03557366 0.02294271 0.02294271  #>       2997       2998       2999       3000       3001       3002       3003  #> 0.02297962 0.02297962 0.02297962 0.02294271 0.01924833 0.01924833 0.01907116  #>       3004       3005       3006       3007       3008       3009       3010  #> 0.01907116 0.02171964 0.01901131 0.02575373 0.02136761 0.02136761 0.02136761  #>       3011       3012       3013       3014       3015       3016       3017  #> 0.02136761 0.02166905 0.02052652 0.01876806 0.01876031 0.01887241 0.01876031  #>       3018       3019       3020       3021       3022       3023       3024  #> 0.01944567 0.02733801 0.02136142 0.02131890 0.02320151 0.02131890 0.02150893  #>       3025       3026       3027       3028       3029       3030       3031  #> 0.02297849 0.02295919 0.02295919 0.02295919 0.02295919 0.02297849 0.02745143  #>       3032       3033       3034       3035       3036       3037       3038  #> 0.02745143 0.02745143 0.02752965 0.02745143 0.02827935 0.02455130 0.02744301  #>       3039       3040       3041       3042       3043       3044       3045  #> 0.02677286 0.02558970 0.02515037 0.02515037 0.02392439 0.02396003 0.02392439  #>       3046       3047       3048       3049       3050       3051       3052  #> 0.02396003 0.02398289 0.02396003 0.02356867 0.02350511 0.02350511 0.02353737  #>       3053       3054       3055       3056       3057       3058       3059  #> 0.02353737 0.02353737 0.02541404 0.02541404 0.02541404 0.02541404 0.02544365  #>       3060       3061       3062       3063       3064       3065       3066  #> 0.02541404 0.02650685 0.02674381 0.02635344 0.03530752 0.02674381 0.02635344  #>       3067       3068       3069       3070       3071       3072       3073  #> 0.01797209 0.01795157 0.01795157 0.01795157 0.02063807 0.02058149 0.02507240  #>       3074       3075       3076       3077       3078       3079       3080  #> 0.02507240 0.02507240 0.02507240 0.02519646 0.02507240 0.03663837 0.03678880  #>       3081       3082       3083       3084       3085       3086       3087  #> 0.03643778 0.03643778 0.03635415 0.03686232 0.02670112 0.02659632 0.02657608  #>       3088       3089       3090       3091       3092       3093       3094  #> 0.02657608 0.02657608 0.02664060 0.01816157 0.01809182 0.01816157 0.01835432  #>       3095       3096       3097       3098       3099       3100       3101  #> 0.02067326 0.02079278 0.02368267 0.02341686 0.02333912 0.02341686 0.02335786  #>       3102       3103       3104       3105       3106       3107       3108  #> 0.02335786 0.02700586 0.02700586 0.02701389 0.02701389 0.02701389 0.02701389  #>       3109       3110       3111       3112       3113       3114       3115  #> 0.03243290 0.03255447 0.03245903 0.03247625 0.03245903 0.03247625 0.01756934  #>       3116       3117       3118       3119       3120       3121       3122  #> 0.01811273 0.01811273 0.03995838 0.02069019 0.02178168 0.02882925 0.02524475  #>       3123       3124       3125       3126       3127       3128       3129  #> 0.02532253 0.02524475 0.02524475 0.02524475 0.02002823 0.02104039 0.01623066  #>       3130       3131       3132       3133       3134       3135       3136  #> 0.01623066 0.02375799 0.01641558 0.02167131 0.02199830 0.02178372 0.02199830  #>       3137       3138       3139       3140       3141       3142       3143  #> 0.02178372 0.02166265 0.02351395 0.02302300 0.02302300 0.02302300 0.02336006  #>       3144       3145       3146       3147       3148       3149       3150  #> 0.02314348 0.02075114 0.02075114 0.02075114 0.02138642 0.02058400 0.02101532  #>       3151       3152       3153       3154       3155       3156       3157  #> 0.02375123 0.02355758 0.02360690 0.02473227 0.02375123 0.02375123 0.02507240  #>       3158       3159       3160       3161       3162       3163       3164  #> 0.02507240 0.02507240 0.02508961 0.02508961 0.02507240 0.07201485 0.07175523  #>       3165       3166       3167       3168       3169       3170       3171  #> 0.07176499 0.07175523 0.07176499 0.07175523 0.01759639 0.01759639 0.01759639  #>       3172       3173       3174       3175       3176       3177       3178  #> 0.02084047 0.02078388 0.01819331 0.02382547 0.02376309 0.02414201 0.02379550  #>       3179       3180       3181       3182       3183       3184       3185  #> 0.02376309 0.02379550 0.02309759 0.02320384 0.02309759 0.02308872 0.02308872  #>       3186       3187       3188       3189       3190       3191       3192  #> 0.02336231 0.02553147 0.02620623 0.02553147 0.02582743 0.02516570 0.02553147  #>       3193       3194       3195       3196       3197       3198       3199  #> 0.02356867 0.02353737 0.02353737 0.02350511 0.02353737 0.02350511 0.02723928  #>       3200       3201       3202       3203       3204       3205       3206  #> 0.02701389 0.02701389 0.02701389 0.02700586 0.02701389 0.02657608 0.02659632  #>       3207       3208       3209       3210       3211       3212       3213  #> 0.02657608 0.02664060 0.02659632 0.02657608 0.02619969 0.02622014 0.02616687  #>       3214       3215       3216       3217       3218       3219       3220  #> 0.02616687 0.02619969 0.02622014 0.02446353 0.02446353 0.02446353 0.02446353  #>       3221       3222       3223       3224       3225       3226       3227  #> 0.02445491 0.02445491 0.02514501 0.02507240 0.02539181 0.02514501 0.02507240  #>       3228       3229       3230       3231       3232       3233       3234  #> 0.02514501 0.02392439 0.02396003 0.02392439 0.02398289 0.02396003 0.02398289  #>       3235       3236       3237       3238       3239       3240       3241  #> 0.02556128 0.02556128 0.02551597 0.02555896 0.02555896 0.02555896 0.02796338  #>       3242       3243       3244       3245       3246       3247       3248  #> 0.02796338 0.02793325 0.02798379 0.02798379 0.02793325 0.02425838 0.02426366  #>       3249       3250       3251       3252       3253       3254       3255  #> 0.02436167 0.02425838 0.02452521 0.02426366 0.02891567 0.02887461 0.02887461  #>       3256       3257       3258       3259       3260       3261       3262  #> 0.02891159 0.02887461 0.02887461 0.02141791 0.02141791 0.02141791 0.02531000  #>       3263       3264       3265       3266       3267       3268       3269  #> 0.02141791 0.02531000 0.02868109 0.02856208 0.02856042 0.02856042 0.02914407  #>       3270       3271       3272       3273       3274       3275       3276  #> 0.02856208 0.02126184 0.02029506 0.02494364 0.03101874 0.02007929 0.02076681  #>       3277       3278       3279       3280       3281       3282       3283  #> 0.02199830 0.02166265 0.02264654 0.02166265 0.02167131 0.02167131 0.02296764  #>       3284       3285       3286       3287       3288       3289       3290  #> 0.02296764 0.02296764 0.02296764 0.02296404 0.02310906 0.02745523 0.02745143  #>       3291       3292       3293       3294       3295       3296       3297  #> 0.02745523 0.02745143 0.02745143 0.02745143 0.02366741 0.02352026 0.02352280  #>       3298       3299       3300       3301       3302       3303       3304  #> 0.02347355 0.02352026 0.02352026 0.04901825 0.04885904 0.04884852 0.04888415  #>       3305       3306       3307       3308       3309       3310       3311  #> 0.04888415 0.04885904 0.04349675 0.04340340 0.04379632 0.04362095 0.04340340  #>       3312       3313       3314       3315       3316       3317       3318  #> 0.04695432 0.04613730 0.04621054 0.04621054 0.04621054 0.04621054 0.04613730  #>       3319       3320       3321       3322       3323       3324       3325  #> 0.01654461 0.02320597 0.01638144 0.01684062 0.01635507 0.02056523 0.02323457  #>       3326       3327       3328       3329       3330       3331       3332  #> 0.02325696 0.02323457 0.02323457 0.02325696 0.02323457 0.02309759 0.02309759  #>       3333       3334       3335       3336       3337       3338       3339  #> 0.02309759 0.02309759 0.02317732 0.02336231 0.02253862 0.02254381 0.02274468  #>       3340       3341       3342       3343       3344       3345       3346  #> 0.02244183 0.02253862 0.02654629 0.02335786 0.02333912 0.02333912 0.02333912  #>       3347       3348       3349       3350       3351       3352       3353  #> 0.02333912 0.02335786 0.02341716 0.02338119 0.02341716 0.02338119 0.02341716  #>       3354       3355       3356       3357       3358       3359       3360  #> 0.02384717 0.02631999 0.02281363 0.02206487 0.03951490 0.02237136 0.02237136  #>       3361       3362       3363       3364       3365       3366       3367  #> 0.02479433 0.04044524 0.02558970 0.02558970 0.02558970 0.02479433 0.02449931  #>       3368       3369       3370       3371       3372       3373       3374  #> 0.02449931 0.02399697 0.02449931 0.02424017 0.02424017 0.02788787 0.02836846  #>       3375       3376       3377       3378       3379       3380       3381  #> 0.02776652 0.02836846 0.04199197 0.02915208 0.02898827 0.02883435 0.02898827  #>       3382       3383       3384       3385       3386       3387       3388  #> 0.02887240 0.03421522 0.02887446 0.02819870 0.02335603 0.02328857 0.02351936  #>       3389       3390       3391       3392       3393       3394       3395  #> 0.02335603 0.02331782 0.03068735 0.03172223 0.03106425 0.03083984 0.03083984  #>       3396       3397       3398       3399       3400       3401       3402  #> 0.03106425 0.02745900 0.02706214 0.02764074 0.03004896 0.02721309 0.02745900  #>       3403       3404       3405       3406       3407       3408       3409  #> 0.02260611 0.02260611 0.02254654 0.02254654 0.02266641 0.02252635 0.02541404  #>       3410       3411       3412       3413       3414       3415       3416  #> 0.02547307 0.02544365 0.02544365 0.02544365 0.02547307 0.02324714 0.02302300  #>       3417       3418       3419       3420       3421       3422       3423  #> 0.02302300 0.02302300 0.02302300 0.02300013 0.03176468 0.03180146 0.03176468  #>       3424       3425       3426       3427       3428       3429       3430  #> 0.03179884 0.03176468 0.03176468 0.02847222 0.02787590 0.02787590 0.02868872  #>       3431       3432       3433       3434       3435       3436       3437  #> 0.02888309 0.02847222 0.02954652 0.02957027 0.02952023 0.02952023 0.02952023  #>       3438       3439       3440       3441       3442       3443       3444  #> 0.03474405 0.02320812 0.02320812 0.02320311 0.02320311 0.02320311 0.02320812  #>       3445       3446       3447       3448       3449       3450       3451  #> 0.02396003 0.02392439 0.02392439 0.02392439 0.02392439 0.02392439 0.02419816  #>       3452       3453       3454       3455       3456       3457       3458  #> 0.02500651 0.02424731 0.02431306 0.02431306 0.02419816 0.02369775 0.02369775  #>       3459       3460       3461       3462       3463       3464       3465  #> 0.02311623 0.02336058 0.02336058 0.02311623 0.02398189 0.02398189 0.02398189  #>       3466       3467       3468       3469       3470       3471       3472  #> 0.02423053 0.02379550 0.02392230 0.02541404 0.02541404 0.02541404 0.02576664  #>       3473       3474       3475       3476       3477       3478       3479  #> 0.02541404 0.02547307 0.02268160 0.02128187 0.02125794 0.02141134 0.02128187  #>       3480       3481       3482       3483       3484       3485       3486  #> 0.02133992 0.03563233 0.03564546 0.03686125 0.03849609 0.03563233 0.03579555  #>       3487       3488       3489       3490       3491       3492       3493  #> 0.03380414 0.02490955 0.02583111 0.02517183 0.02545935 0.02583111 0.02449931  #>       3494       3495       3496       3497       3498       3499       3500  #> 0.02401568 0.02399697 0.02462735 0.02433267 0.02399697 0.02619969 0.02622014  #>       3501       3502       3503       3504       3505       3506       3507  #> 0.02616687 0.02622014 0.02616687 0.02616687 0.02484172 0.02485505 0.02484172  #>       3508       3509       3510       3511       3512       3513       3514  #> 0.02485505 0.02475525 0.02475971 0.02340719 0.02340719 0.02340719 0.02340719  #>       3515       3516       3517       3518       3519       3520       3521  #> 0.02314945 0.03525512 0.02679233 0.02673687 0.02673687 0.02676567 0.02676567  #>       3522       3523       3524       3525       3526       3527       3528  #> 0.02676567 0.02507240 0.02508961 0.02508961 0.02508961 0.02507240 0.02507240  #>       3529       3530       3531       3532       3533       3534       3535  #> 0.01992157 0.01994469 0.01992157 0.01992157 0.01994469 0.01994469 0.02119365  #>       3536       3537       3538       3539       3540       3541       3542  #> 0.02112488 0.02116271 0.02112488 0.02116271 0.02112488 0.02060825 0.02066928  #>       3543       3544       3545       3546       3547       3548       3549  #> 0.02240294 0.02060825 0.02045887 0.02060825 0.02258656 0.02722213 0.02258656  #>       3550       3551       3552       3553       3554       3555       3556  #> 0.02408900 0.02350308 0.02258656 0.04954186 0.04827774 0.05130269 0.04827774  #>       3557       3558       3559       3560       3561       3562       3563  #> 0.04954186 0.04827774 0.02252635 0.02252635 0.02252635 0.02288438 0.02260611  #>       3564       3565       3566       3567       3568       3569       3570  #> 0.02254654 0.02616687 0.02616687 0.02622014 0.02616687 0.02616687 0.02616687  #>"},{"path":"/reference/predict.wbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions and simulations from within-between models — predict.wbm","title":"Predictions and simulations from within-between models — predict.wbm","text":"methods facilitate fairly straightforward predictions simulations wbm models.","code":""},{"path":"/reference/predict.wbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions and simulations from within-between models — predict.wbm","text":"","code":"# S3 method for wbm predict(   object,   newdata = NULL,   se.fit = FALSE,   raw = FALSE,   use.re.var = FALSE,   re.form = NULL,   type = c(\"link\", \"response\"),   allow.new.levels = TRUE,   na.action = na.pass,   ... )  # S3 method for wbm simulate(   object,   nsim = 1,   seed = NULL,   use.u = FALSE,   newdata = NULL,   raw = FALSE,   newparams = NULL,   re.form = NA,   type = c(\"link\", \"response\"),   allow.new.levels = FALSE,   na.action = na.pass,   ... )"},{"path":"/reference/predict.wbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions and simulations from within-between models — predict.wbm","text":"object fitted model object newdata data frame evaluate     predictions. se.fit Include standard errors predictions? Note standard errors default include fixed effects variance. See details info. Default FALSE. raw newdata merMod model frame panel_data? TRUE indicates merMod-style newdata, extra columns created wbm. use.re.var se.fit TRUE, include random effects variance standard errors? Default FALSE. re.form (formula, NULL, NA) specify random effects condition predicting.  NULL,     include random effects; NA ~0,     include random effects. type character string - either \"link\", default,     \"response\" indicating type prediction object returned. allow.new.levels logical new levels (NA values)     newdata allowed. FALSE (default), new values     newdata trigger error; TRUE, prediction     use unconditional (population-level) values data     previously unobserved levels (NAs). na.action function determining done     missing values fixed effects newdata.     default predict NA: see na.pass. ... boot se.fit TRUE, additional arguments passed lme4::bootMer(). nsim positive integer scalar - number responses simulate. seed optional seed used set.seed     immediately simulation generate reproducible sample. use.u (logical) TRUE, generate simulation     conditional current random-effects estimates; FALSE     generate new Normally distributed random-effects values. (Redundant     re.form, preferred: TRUE corresponds     re.form = NULL (condition random effects),     FALSE corresponds re.form = ~0 (condition none     random effects).) newparams new parameters use evaluating predictions,     specified start parameter lmer     glmer -- list components theta     beta (LMMs GLMMs estimate scale parameter)     sigma","code":""},{"path":"/reference/predict.wbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions and simulations from within-between models — predict.wbm","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbm(lwage ~ lag(union) + wks, data = wages) # By default, assumes you're using the processed data for newdata predict(model) #>        1        2        3        4        5        6        7        8  #> 5.517739 5.522721 5.524382 5.519400 5.531025 5.536007 6.570775 6.560811  #>        9       10       11       12       13       14       15       16  #> 6.618618 6.565793 6.554168 6.565793 6.538659 6.540320 6.536999 6.536999  #>       17       18       19       20       21       22       23       24  #> 6.536999 6.546963 6.152707 6.152707 6.147725 6.156029 6.142743 6.152707  #>       25       26       27       28       29       30       31       32  #> 7.231077 7.241041 7.224434 7.176591 7.176591 7.173269 7.491710 7.491710  #>       33       34       35       36       37       38       39       40  #> 7.491710 7.496693 7.495032 7.491710 5.982628 5.980967 5.985949 5.984289  #>       41       42       43       44       45       46       47       48  #> 5.984289 5.982628 6.512471 6.512471 6.512471 6.522436 6.510810 6.510810  #>       49       50       51       52       53       54       55       56  #> 7.148488 7.145166 7.148488 7.148488 7.155131 7.148488 6.393416 6.395077  #>       57       58       59       60       61       62       63       64  #> 6.398398 6.400059 6.415006 6.405041 7.223344 7.228327 7.228327 7.225005  #>       65       66       67       68       69       70       71       72  #> 7.274828 7.225005 6.861596 6.859935 6.859935 6.859935 6.859935 6.861596  #>       73       74       75       76       77       78       79       80  #> 7.630431 7.627110 7.630431 7.630431 7.633753 7.633753 7.307389 7.307389  #>       81       82       83       84       85       86       87       88  #> 7.309050 7.309050 7.309050 7.309050 5.768173 5.764851 5.768173 5.764851  #>       89       90       91       92       93       94       95       96  #> 5.776477 5.764851 5.428018 5.431339 5.431339 5.428018 5.428018 5.429678  #>       97       98       99      100      101      102      103      104  #> 7.030700 7.029039 7.027379 7.025718 7.034022 7.032361 8.336246 8.334585  #>      105      106      107      108      109      110      111      112  #> 8.334585 8.334585 8.332924 8.334585 6.710576 6.708915 6.713898 6.713898  #>      113      114      115      116      117      118      119      120  #> 6.750435 6.725523 7.377348 7.377348 7.379009 7.379009 7.377348 7.379009  #>      121      122      123      124      125      126      127      128  #> 5.819861 5.814878 5.814878 5.816539 5.821521 5.826504 6.906967 6.908627  #>      129      130      131      132      133      134      135      136  #> 6.905306 6.903645 6.897002 6.903645 8.431190 8.429529 8.431190 8.434512  #>      137      138      139      140      141      142      143      144  #> 8.436172 8.431190 4.780106 4.780106 4.778445 4.783428 4.780106 4.834592  #>      145      146      147      148      149      150      151      152  #> 6.898416 6.896755 6.900077 6.900077 6.898416 6.895094 7.386841 7.383520  #>      153      154      155      156      157      158      159      160  #> 7.385181 7.386841 7.386841 7.385181 7.432815 7.439458 7.436136 7.436136  #>      161      162      163      164      165      166      167      168  #> 7.444440 7.480977 6.713583 6.713583 6.713583 6.713583 6.715244 6.715244  #>      169      170      171      172      173      174      175      176  #> 7.929907 7.929907 7.929907 7.928246 7.929907 7.929907 6.200510 6.198849  #>      177      178      179      180      181      182      183      184  #> 6.197189 6.197189 6.203832 6.197189 7.911141 7.911141 7.912802 7.919445  #>      185      186      187      188      189      190      191      192  #> 7.912802 7.916123 8.227316 8.227316 8.228977 8.227316 8.230638 8.230638  #>      193      194      195      196      197      198      199      200  #> 7.679049 7.672406 7.679049 7.677389 7.674067 7.675728 5.368546 5.368546  #>      201      202      203      204      205      206      207      208  #> 5.366885 5.365224 5.368546 5.371867 6.855624 6.857284 6.855624 6.880535  #>      209      210      211      212      213      214      215      216  #> 6.857284 6.862267 7.298455 7.293473 7.293473 7.296794 7.293473 7.308420  #>      217      218      219      220      221      222      223      224  #> 7.446219 7.441237 7.442898 7.441237 7.444558 7.442898 5.950087 5.951748  #>      225      226      227      228      229      230      231      232  #> 5.951748 5.950087 5.951748 5.950087 6.579269 6.584251 6.580930 6.580930  #>      233      234      235      236      237      238      239      240  #> 6.577608 6.579269 6.923282 6.934908 6.929925 6.909996 6.913318 6.909996  #>      241      242      243      244      245      246      247      248  #> 8.043956 8.043956 8.043956 8.043956 8.047277 8.048938 6.786339 6.769731  #>      249      250      251      252      253      254      255      256  #> 6.771392 6.784678 6.771392 6.773053 7.469961 7.468301 7.466640 7.471622  #>      257      258      259      260      261      262      263      264  #> 7.473283 7.466640 7.859814 7.859814 7.861475 7.863136 7.863136 7.863136  #>      265      266      267      268      269      270      271      272  #> 6.299886 6.299886 6.299886 6.299886 6.299886 6.301547 6.147968 6.141325  #>      273      274      275      276      277      278      279      280  #> 6.142986 6.141325 6.142986 6.142986 7.377463 7.379124 7.379124 7.379124  #>      281      282      283      284      285      286      287      288  #> 7.380785 7.379124 7.587978 7.587978 7.587978 7.591299 7.602925 7.589639  #>      289      290      291      292      293      294      295      296  #> 8.313473 8.311812 8.310151 8.311812 8.308491 8.310151 6.553717 6.557038  #>      297      298      299      300      301      302      303      304  #> 6.548734 6.552056 6.575307 6.581950 8.431155 8.431155 8.432816 8.431155  #>      305      306      307      308      309      310      311      312  #> 8.432816 8.437798 7.861420 7.861420 7.863081 7.863081 7.863081 7.861420  #>      313      314      315      316      317      318      319      320  #> 7.326326 7.327987 7.326326 7.327987 7.329648 7.327987 6.912618 6.914279  #>      321      322      323      324      325      326      327      328  #> 6.914279 6.917600 6.917600 6.915940 7.222885 7.222885 7.226206 7.224545  #>      329      330      331      332      333      334      335      336  #> 7.226206 7.227867 6.074989 6.070006 6.070006 6.076649 6.073328 6.073328  #>      337      338      339      340      341      342      343      344  #> 6.062539 6.062539 6.062539 6.065860 6.064199 6.064199 7.109164 7.122450  #>      345      346      347      348      349      350      351      352  #> 7.109164 7.056339 7.109164 7.109164 7.999909 8.001570 8.003230 8.004891  #>      353      354      355      356      357      358      359      360  #> 8.001570 8.004891 5.572753 5.564449 5.556146 5.557806 5.559467 5.566110  #>      361      362      363      364      365      366      367      368  #> 7.160871 7.108046 7.109707 7.156208 7.124654 7.149565 7.261023 7.261023  #>      369      370      371      372      373      374      375      376  #> 7.261023 7.262684 7.262684 7.262684 8.029370 8.027709 8.029370 8.029370  #>      377      378      379      380      381      382      383      384  #> 8.031030 8.027709 6.454353 6.449371 6.451032 6.456014 6.452693 6.447710  #>      385      386      387      388      389      390      391      392  #> 6.995044 6.993383 6.991723 7.008330 6.993383 6.993383 6.556875 6.560196  #>      393      394      395      396      397      398      399      400  #> 6.556875 6.560196 6.565178 6.558535 5.840121 5.841781 5.840121 5.840121  #>      401      402      403      404      405      406      407      408  #> 5.840121 5.841781 6.705823 6.714127 6.709144 6.705823 6.705823 6.707484  #>      409      410      411      412      413      414      415      416  #> 6.697143 6.695482 6.695482 6.695482 6.693822 6.693822 6.879688 6.878027  #>      417      418      419      420      421      422      423      424  #> 6.878027 6.879688 6.879688 6.879688 7.369381 7.369381 7.371042 7.374363  #>      425      426      427      428      429      430      431      432  #> 7.371042 7.371042 6.892009 6.888687 6.892009 6.892009 6.892009 6.888687  #>      433      434      435      436      437      438      439      440  #> 6.929709 6.929709 6.931370 6.933031 6.933031 6.933031 4.799989 4.799989  #>      441      442      443      444      445      446      447      448  #> 4.809953 4.801650 4.801650 4.798328 5.819561 5.819561 5.864401 5.821221  #>      449      450      451      452      453      454      455      456  #> 5.819561 5.826204 5.277118 5.272136 5.275457 5.277118 5.329943 5.326622  #>      457      458      459      460      461      462      463      464  #> 5.567704 5.569365 5.571026 5.589294 5.605902 5.589294 5.487148 5.497113  #>      465      466      467      468      469      470      471      472  #> 5.493791 5.492130 5.490470 5.490470 4.923102 4.923102 4.923102 4.944691  #>      473      474      475      476      477      478      479      480  #> 4.923102 4.923102 7.182105 7.182105 7.182105 7.182105 7.182105 7.182105  #>      481      482      483      484      485      486      487      488  #> 6.906532 6.908193 6.904871 6.904871 6.852046 6.850385 7.030313 7.038617  #>      489      490      491      492      493      494      495      496  #> 7.048582 7.030313 7.028653 7.051903 6.117151 6.115491 6.123795 6.113830  #>      497      498      499      500      501      502      503      504  #> 6.115491 6.117151 6.691234 6.667983 6.671304 6.666322 6.691234 6.669644  #>      505      506      507      508      509      510      511      512  #> 6.197892 6.196231 6.196231 6.199553 6.196231 6.197892 6.637413 6.655681  #>      513      514      515      516      517      518      519      520  #> 6.637413 6.654020 6.634091 6.639073 7.027617 7.055850 7.025956 7.032599  #>      521      522      523      524      525      526      527      528  #> 7.027617 7.027617 6.911910 6.911910 6.911910 6.911910 6.913571 6.910250  #>      529      530      531      532      533      534      535      536  #> 6.221271 6.216289 6.216289 6.217949 6.217949 6.217949 6.036393 6.036393  #>      537      538      539      540      541      542      543      544  #> 6.036393 6.038054 6.038054 6.034732 6.999407 6.967853 6.951245 6.951245  #>      545      546      547      548      549      550      551      552  #> 6.962870 6.964531 6.746817 6.753460 6.765085 6.748478 6.799961 6.697313  #>      553      554      555      556      557      558      559      560  #> 6.280561 6.199503 6.201164 6.253989 6.260632 6.285543 7.373128 7.369807  #>      561      562      563      564      565      566      567      568  #> 7.373128 7.369807 7.364825 7.376450 6.447583 6.469173 6.449244 6.450905  #>      569      570      571      572      573      574      575      576  #> 6.449244 6.449244 7.986805 7.986805 7.988466 7.988466 7.990126 7.988466  #>      577      578      579      580      581      582      583      584  #> 6.274580 6.274580 6.276240 6.276240 6.276240 6.277901 7.403941 7.403941  #>      585      586      587      588      589      590      591      592  #> 7.403941 7.407263 7.407263 7.407263 5.386107 5.384446 5.392750 5.389428  #>      593      594      595      596      597      598      599      600  #> 5.392750 5.386107 6.085601 6.085601 6.085601 6.087262 6.085601 6.085601  #>      601      602      603      604      605      606      607      608  #> 7.253096 7.271364 7.254757 7.259739 7.258078 7.256418 7.395243 7.396904  #>      609      610      611      612      613      614      615      616  #> 7.398564 7.396904 7.396904 7.396904 7.047883 7.032936 7.034597 7.036258  #>      617      618      619      620      621      622      623      624  #> 7.036258 7.034597 5.330941 5.332602 5.332602 5.332602 5.334262 5.335923  #>      625      626      627      628      629      630      631      632  #> 7.201408 7.203069 7.201408 7.199747 7.204730 7.203069 6.547316 6.548977  #>      633      634      635      636      637      638      639      640  #> 6.550638 6.550638 6.552299 6.550638 7.668839 7.668839 7.673822 7.680465  #>      641      642      643      644      645      646      647      648  #> 7.678804 7.670500 6.530503 6.487643 6.533825 6.535486 6.537146 6.540468  #>      649      650      651      652      653      654      655      656  #> 7.503296 7.450471 7.452132 7.452132 7.452132 7.448810 6.806925 6.806925  #>      657      658      659      660      661      662      663      664  #> 6.806925 6.805264 6.805264 6.816890 6.600928 6.600928 6.600928 6.597607  #>      665      666      667      668      669      670      671      672  #> 6.595946 6.600928 7.629908 7.629908 7.631569 7.634890 7.634890 7.631569  #>      673      674      675      676      677      678      679      680  #> 8.004272 7.981022 7.984343 7.984343 7.999290 7.999290 6.109721 6.109721  #>      681      682      683      684      685      686      687      688  #> 6.109721 6.111382 6.111382 6.111382 7.281909 7.281909 7.281909 7.281909  #>      689      690      691      692      693      694      695      696  #> 7.281909 7.283569 7.140237 7.141898 7.143558 7.140237 7.141898 7.143558  #>      697      698      699      700      701      702      703      704  #> 6.816175 6.864017 6.859035 6.864017 6.883947 6.857374 6.918905 6.918905  #>      705      706      707      708      709      710      711      712  #> 6.920566 6.930530 6.927209 6.920566 9.030735 9.029074 9.032396 9.027414  #>      713      714      715      716      717      718      719      720  #> 9.030735 9.030735 6.822981 6.822981 6.824642 6.822981 6.822981 6.824642  #>      721      722      723      724      725      726      727      728  #> 8.054791 8.054791 8.056451 8.054791 8.053130 8.054791 7.037452 7.037452  #>      729      730      731      732      733      734      735      736  #> 7.035791 7.037452 7.035791 7.034130 6.881996 6.870371 6.875353 6.875353  #>      737      738      739      740      741      742      743      744  #> 6.888639 6.905247 7.776068 7.777728 7.777728 7.777728 7.777728 7.781050  #>      745      746      747      748      749      750      751      752  #> 6.442900 6.442900 6.442900 6.442900 6.442900 6.442900 6.237438 6.240760  #>      753      754      755      756      757      758      759      760  #> 6.237438 6.237438 6.239099 6.235778 7.625439 7.625439 7.630421 7.625439  #>      761      762      763      764      765      766      767      768  #> 7.623778 7.643707 6.213520 6.180304 6.233129 6.234790 6.246416 6.248076  #>      769      770      771      772      773      774      775      776  #> 5.914982 5.913322 5.913322 5.913322 5.913322 5.913322 6.837996 6.836335  #>      777      778      779      780      781      782      783      784  #> 6.836335 6.836335 6.836335 6.836335 6.882190 6.878869 6.878869 6.882190  #>      785      786      787      788      789      790      791      792  #> 6.890494 6.885512 8.033038 8.034699 8.034699 8.033038 8.041342 8.034699  #>      793      794      795      796      797      798      799      800  #> 6.711952 6.711952 6.711952 6.711952 6.711952 6.728560 5.739197 5.734215  #>      801      802      803      804      805      806      807      808  #> 5.737536 5.737536 5.739197 5.737536 7.300947 7.304269 7.302608 7.302608  #>      809      810      811      812      813      814      815      816  #> 7.302608 7.302608 7.697044 7.698705 7.697044 7.700366 7.703687 7.702026  #>      817      818      819      820      821      822      823      824  #> 7.192899 7.192899 7.192899 7.191238 7.192899 7.191238 8.056095 8.056095  #>      825      826      827      828      829      830      831      832  #> 8.054434 8.061077 8.056095 8.057755 7.063165 7.063165 7.064826 7.063165  #>      833      834      835      836      837      838      839      840  #> 7.066487 7.066487 6.583430 6.583430 6.581769 6.583430 6.600037 6.576786  #>      841      842      843      844      845      846      847      848  #> 5.717937 5.716276 5.706312 5.707972 5.707972 5.709633 7.008825 7.003842  #>      849      850      851      852      853      854      855      856  #> 7.005503 7.005503 7.005503 7.005503 6.723825 6.723825 6.723825 6.725486  #>      857      858      859      860      861      862      863      864  #> 6.725486 6.725486 6.600860 6.602521 6.602521 6.602521 6.604182 6.604182  #>      865      866      867      868      869      870      871      872  #> 7.582748 7.582748 7.582748 7.582748 7.582748 7.582748 7.603502 7.603502  #>      873      874      875      876      877      878      879      880  #> 7.603502 7.603502 7.603502 7.603502 7.158863 7.158863 7.158863 7.160524  #>      881      882      883      884      885      886      887      888  #> 7.157202 7.160524 6.252693 6.252693 6.257676 6.251033 6.252693 6.254354  #>      889      890      891      892      893      894      895      896  #> 7.045390 7.045390 7.045390 7.040408 7.045390 7.043730 6.806504 6.814808  #>      897      898      899      900      901      902      903      904  #> 6.789896 6.801522 6.798200 6.859648 6.511743 6.518386 6.513404 6.511743  #>      905      906      907      908      909      910      911      912  #> 6.515065 6.518386 4.733937 4.727294 4.735598 4.797046 4.797046 4.748884  #>      913      914      915      916      917      918      919      920  #> 6.248751 6.228822 6.230482 6.273662 6.227161 6.230482 7.116825 7.106860  #>      921      922      923      924      925      926      927      928  #> 7.115164 7.116825 7.105199 7.108521 7.285986 7.282664 7.282664 7.282664  #>      929      930      931      932      933      934      935      936  #> 7.282664 7.282664 7.114643 7.114643 7.114643 7.112982 7.112982 7.112982  #>      937      938      939      940      941      942      943      944  #> 6.652280 6.655601 6.655601 6.653940 6.653940 6.653940 7.044970 7.044970  #>      945      946      947      948      949      950      951      952  #> 7.044970 7.044970 7.044970 7.044970 6.522791 6.522791 6.517809 6.524452  #>      953      954      955      956      957      958      959      960  #> 6.521130 6.522791 7.250513 7.252174 7.253834 7.252174 7.252174 7.258817  #>      961      962      963      964      965      966      967      968  #> 6.410751 6.410751 6.410751 6.410751 6.420716 6.410751 5.937667 5.919399  #>      969      970      971      972      973      974      975      976  #> 5.919399 5.916078 5.916078 5.919399 6.039581 6.041242 6.044564 6.044564  #>      977      978      979      980      981      982      983      984  #> 6.042903 6.044564 6.203150 6.196507 6.196507 6.203150 6.204810 6.211454  #>      985      986      987      988      989      990      991      992  #> 6.254441 6.254441 6.254441 6.271049 6.257763 6.262745 7.308635 7.308635  #>      993      994      995      996      997      998      999     1000  #> 7.310295 7.316938 7.306974 7.308635 4.724861 4.714896 4.688324 4.688324  #>     1001     1002     1003     1004     1005     1006     1007     1008  #> 4.726521 4.708253 7.857224 7.853902 7.900084 7.900084 7.847259 7.843938  #>     1009     1010     1011     1012     1013     1014     1015     1016  #> 7.948262 7.946601 7.946601 7.946601 7.949923 7.948262 5.284767 5.281445  #>     1017     1018     1019     1020     1021     1022     1023     1024  #> 5.279784 5.276463 5.281445 5.281445 5.774956 5.776617 5.778278 5.784921  #>     1025     1026     1027     1028     1029     1030     1031     1032  #> 5.773296 5.813154 7.742267 7.742267 7.743928 7.740606 7.738945 7.737285  #>     1033     1034     1035     1036     1037     1038     1039     1040  #> 8.050430 8.050430 8.045447 8.053751 8.047108 8.055412 6.840096 6.858364  #>     1041     1042     1043     1044     1045     1046     1047     1048  #> 6.830131 6.826810 6.825149 6.826810 5.928620 5.931942 5.930281 5.931942  #>     1049     1050     1051     1052     1053     1054     1055     1056  #> 5.928620 5.930281 7.066930 7.066930 7.066930 7.066930 7.068591 7.071913  #>     1057     1058     1059     1060     1061     1062     1063     1064  #> 6.374069 6.379052 6.377391 6.380712 6.372409 6.375730 6.136065 6.134404  #>     1065     1066     1067     1068     1069     1070     1071     1072  #> 6.132744 6.131083 6.137726 6.134404 5.550335 5.547013 5.545352 5.551995  #>     1073     1074     1075     1076     1077     1078     1079     1080  #> 5.548674 5.547013 6.868600 6.865278 6.865278 6.863617 6.865278 6.865278  #>     1081     1082     1083     1084     1085     1086     1087     1088  #> 7.537871 7.445188 7.446848 7.446848 7.446848 7.475081 5.441830 5.441830  #>     1089     1090     1091     1092     1093     1094     1095     1096  #> 5.443491 5.443491 5.443491 5.441830 4.560794 4.555812 4.560794 4.562455  #>     1097     1098     1099     1100     1101     1102     1103     1104  #> 4.557473 4.552490 6.922185 6.922185 6.922185 6.922185 6.922185 6.975010  #>     1105     1106     1107     1108     1109     1110     1111     1112  #> 6.946376 6.948036 6.948036 6.951358 6.951358 6.949697 7.713064 7.713064  #>     1113     1114     1115     1116     1117     1118     1119     1120  #> 7.711403 7.714724 7.714724 7.737975 7.430511 7.437154 7.468709 7.475352  #>     1121     1122     1123     1124     1125     1126     1127     1128  #> 7.432172 7.442136 7.126183 7.126183 7.126183 7.127843 7.129504 7.126183  #>     1129     1130     1131     1132     1133     1134     1135     1136  #> 7.291405 7.289744 7.291405 7.291405 7.291405 7.289744 6.522171 6.523832  #>     1137     1138     1139     1140     1141     1142     1143     1144  #> 6.523832 6.525493 6.523832 6.523832 6.141296 6.141296 6.141296 6.152922  #>     1145     1146     1147     1148     1149     1150     1151     1152  #> 6.157904 6.156243 6.716178 6.727803 6.772644 6.724482 6.719499 6.724482  #>     1153     1154     1155     1156     1157     1158     1159     1160  #> 7.829724 7.828063 7.831385 7.829724 7.824742 7.828063 6.757603 6.752621  #>     1161     1162     1163     1164     1165     1166     1167     1168  #> 6.752621 6.752621 6.747638 6.750960 6.732562 6.732562 6.732562 6.732562  #>     1169     1170     1171     1172     1173     1174     1175     1176  #> 6.730901 6.729241 6.473903 6.475564 6.477225 6.473903 6.473903 6.490511  #>     1177     1178     1179     1180     1181     1182     1183     1184  #> 5.371631 5.371631 5.371631 5.373291 5.374952 5.389899 7.111332 7.112993  #>     1185     1186     1187     1188     1189     1190     1191     1192  #> 7.116315 7.116315 7.116315 7.116315 6.810563 6.813884 6.810563 6.812223  #>     1193     1194     1195     1196     1197     1198     1199     1200  #> 6.813884 6.810563 6.396093 6.399415 6.399415 6.399415 6.450579 6.448918  #>     1201     1202     1203     1204     1205     1206     1207     1208  #> 6.255679 6.254019 6.255679 6.255679 6.259001 6.255679 5.734022 5.732361  #>     1209     1210     1211     1212     1213     1214     1215     1216  #> 5.732361 5.737343 5.734022 5.734022 5.501757 5.503418 5.505079 5.503418  #>     1217     1218     1219     1220     1221     1222     1223     1224  #> 5.503418 5.501757 6.831139 6.836122 6.794922 6.864355 6.837782 6.834461  #>     1225     1226     1227     1228     1229     1230     1231     1232  #> 7.026188 7.036152 7.046117 7.026188 7.049438 7.049438 7.952040 7.952040  #>     1233     1234     1235     1236     1237     1238     1239     1240  #> 7.953701 7.953701 7.953701 7.957023 7.965082 7.936849 7.936849 7.936849  #>     1241     1242     1243     1244     1245     1246     1247     1248  #> 7.936849 7.938510 5.013571 5.006928 5.061414 5.059753 5.074700 5.020214  #>     1249     1250     1251     1252     1253     1254     1255     1256  #> 6.799213 6.792569 6.794230 6.797552 6.799213 6.795891 6.885853 6.885853  #>     1257     1258     1259     1260     1261     1262     1263     1264  #> 6.885853 6.887513 6.890835 6.890835 7.801207 7.799546 7.799546 7.794564  #>     1265     1266     1267     1268     1269     1270     1271     1272  #> 7.799546 7.801207 7.643882 7.642221 7.642221 7.645543 7.642221 7.642221  #>     1273     1274     1275     1276     1277     1278     1279     1280  #> 7.368711 7.368711 7.365389 7.370371 7.368711 7.370371 6.222947 6.221287  #>     1281     1282     1283     1284     1285     1286     1287     1288  #> 6.221287 6.221287 6.221287 6.221287 5.743533 5.743533 5.750176 5.740211  #>     1289     1290     1291     1292     1293     1294     1295     1296  #> 5.741872 5.743533 7.503188 7.503188 7.503188 7.506510 7.504849 7.504849  #>     1297     1298     1299     1300     1301     1302     1303     1304  #> 5.882846 5.882846 5.881185 5.882846 5.884507 5.884507 6.431178 6.369730  #>     1305     1306     1307     1308     1309     1310     1311     1312  #> 6.369730 6.371391 6.369730 6.369730 7.510466 7.502162 7.554987 7.502162  #>     1313     1314     1315     1316     1317     1318     1319     1320  #> 7.551666 7.498841 6.931960 6.928638 6.930299 6.931960 6.925317 6.923656  #>     1321     1322     1323     1324     1325     1326     1327     1328  #> 7.589241 7.590902 7.648709 7.647049 7.647049 7.647049 5.452557 5.457539  #>     1329     1330     1331     1332     1333     1334     1335     1336  #> 5.469165 5.455879 5.450896 5.444253 6.192679 6.191018 6.192679 6.191018  #>     1337     1338     1339     1340     1341     1342     1343     1344  #> 6.192679 6.194340 7.563201 7.556558 7.546594 7.525004 7.533307 7.520021  #>     1345     1346     1347     1348     1349     1350     1351     1352  #> 6.374189 6.374189 6.374189 6.374189 6.374189 6.374189 5.197094 5.198755  #>     1353     1354     1355     1356     1357     1358     1359     1360  #> 5.203737 5.200416 5.212041 5.200416 7.115873 7.130820 7.122516 7.122516  #>     1361     1362     1363     1364     1365     1366     1367     1368  #> 7.122516 7.122516 7.185079 7.185079 7.185079 7.185079 7.185079 7.186739  #>     1369     1370     1371     1372     1373     1374     1375     1376  #> 7.057367 7.004542 7.057367 7.006202 7.001220 7.001220 6.436488 6.436488  #>     1377     1378     1379     1380     1381     1382     1383     1384  #> 6.436488 6.436488 6.436488 6.436488 8.576856 8.575195 8.576856 8.575195  #>     1385     1386     1387     1388     1389     1390     1391     1392  #> 8.576856 8.576856 7.292266 7.292266 7.295587 7.297248 7.346752 7.293926  #>     1393     1394     1395     1396     1397     1398     1399     1400  #> 7.139203 7.142524 7.137542 7.137542 7.093021 7.155810 6.315750 6.314089  #>     1401     1402     1403     1404     1405     1406     1407     1408  #> 6.314089 6.310768 6.314089 6.315750 5.588157 5.591478 5.588157 5.591478  #>     1409     1410     1411     1412     1413     1414     1415     1416  #> 5.601443 5.586496 7.710551 7.710551 7.710551 7.712212 7.712212 7.712212  #>     1417     1418     1419     1420     1421     1422     1423     1424  #> 6.213955 6.202329 6.213955 6.207312 6.207312 6.213955 7.163454 7.107307  #>     1425     1426     1427     1428     1429     1430     1431     1432  #> 7.110629 7.110629 7.113951 7.113951 8.616184 8.616184 8.616184 8.616184  #>     1433     1434     1435     1436     1437     1438     1439     1440  #> 8.616184 8.612862 7.749971 7.749971 7.749971 7.749971 7.749971 7.751632  #>     1441     1442     1443     1444     1445     1446     1447     1448  #> 6.809818 6.816461 6.819783 6.809818 6.818122 6.880911 5.308828 5.307167  #>     1449     1450     1451     1452     1453     1454     1455     1456  #> 5.315471 5.303846 5.308828 5.318793 7.679716 7.684698 7.679716 7.668090  #>     1457     1458     1459     1460     1461     1462     1463     1464  #> 7.669751 7.671412 6.448876 6.448876 6.457180 6.442233 6.442233 6.442233  #>     1465     1466     1467     1468     1469     1470     1471     1472  #> 6.531832 6.530171 6.521867 6.521867 6.521867 6.538475 6.424570 6.375067  #>     1473     1474     1475     1476     1477     1478     1479     1480  #> 6.402980 6.383051 6.394677 6.391355 4.872512 4.862547 4.862547 4.862547  #>     1481     1482     1483     1484     1485     1486     1487     1488  #> 4.862547 4.864208 4.992662 5.005948 4.991001 4.989340 4.992662 4.997644  #>     1489     1490     1491     1492     1493     1494     1495     1496  #> 6.947297 6.947297 6.948958 6.947297 6.948958 6.947297 5.984910 5.983249  #>     1497     1498     1499     1500     1501     1502     1503     1504  #> 5.983249 5.983249 5.983249 5.983249 6.261321 6.261321 6.259660 6.261321  #>     1505     1506     1507     1508     1509     1510     1511     1512  #> 6.259660 6.261321 8.186403 8.183081 8.184742 8.183081 8.184742 8.186403  #>     1513     1514     1515     1516     1517     1518     1519     1520  #> 6.716514 6.688281 6.688281 6.713192 6.688281 6.688281 6.410690 6.412350  #>     1521     1522     1523     1524     1525     1526     1527     1528  #> 6.410690 6.410690 6.410690 6.450548 6.147935 6.157580 6.135990 6.152597  #>     1529     1530     1531     1532     1533     1534     1535     1536  #> 6.140972 6.135990 6.816605 6.851162 6.851162 6.851162 6.852822 6.854483  #>     1537     1538     1539     1540     1541     1542     1543     1544  #> 7.145713 7.145713 7.145713 7.145713 7.145713 7.145713 6.683779 6.680457  #>     1545     1546     1547     1548     1549     1550     1551     1552  #> 6.682118 6.685439 6.673814 6.683779 5.613572 5.651770 5.615233 5.613572  #>     1553     1554     1555     1556     1557     1558     1559     1560  #> 5.615233 5.611911 7.168025 7.169685 7.169685 7.171346 7.171346 7.169685  #>     1561     1562     1563     1564     1565     1566     1567     1568  #> 6.687076 6.688736 6.708665 6.692058 6.695379 6.688736 7.397785 7.399446  #>     1569     1570     1571     1572     1573     1574     1575     1576  #> 7.397785 7.397785 7.396124 7.397785 6.282899 6.266291 6.261309 6.257988  #>     1577     1578     1579     1580     1581     1582     1583     1584  #> 6.256327 6.257988 6.529230 6.520926 6.527569 6.540855 6.502657 6.504318  #>     1585     1586     1587     1588     1589     1590     1591     1592  #> 7.203948 7.198966 7.197305 7.200627 7.198966 7.200627 7.525520 7.522198  #>     1593     1594     1595     1596     1597     1598     1599     1600  #> 7.525520 7.520537 7.522198 7.523859 6.942582 6.942582 6.944243 6.944243  #>     1601     1602     1603     1604     1605     1606     1607     1608  #> 6.945903 6.947564 5.773619 5.773619 5.775280 5.773619 5.771958 5.773619  #>     1609     1610     1611     1612     1613     1614     1615     1616  #> 7.106242 7.102921 7.104581 7.104581 7.107903 7.106242 8.726505 8.729826  #>     1617     1618     1619     1620     1621     1622     1623     1624  #> 8.729826 8.729826 8.729826 8.729826 6.638415 6.638415 6.638415 6.638415  #>     1625     1626     1627     1628     1629     1630     1631     1632  #> 6.638415 6.638415 6.908516 6.905194 6.908516 6.908516 6.906855 6.906855  #>     1633     1634     1635     1636     1637     1638     1639     1640  #> 6.700894 6.684286 6.689268 6.687607 6.687607 6.690929 7.089592 7.087931  #>     1641     1642     1643     1644     1645     1646     1647     1648  #> 7.089592 7.087931 7.089592 7.089592 6.485894 6.485894 6.485894 6.485894  #>     1649     1650     1651     1652     1653     1654     1655     1656  #> 6.485894 6.487555 6.827921 6.829582 6.842868 6.831243 6.834564 6.832903  #>     1657     1658     1659     1660     1661     1662     1663     1664  #> 6.820940 6.824262 6.822601 6.822601 6.822601 6.822601 7.702758 7.702758  #>     1665     1666     1667     1668     1669     1670     1671     1672  #> 7.702758 7.704419 7.701097 7.704419 7.105910 7.104249 7.104249 7.104249  #>     1673     1674     1675     1676     1677     1678     1679     1680  #> 7.104249 7.104249 5.706486 5.698182 5.701504 5.703164 5.704825 5.699843  #>     1681     1682     1683     1684     1685     1686     1687     1688  #> 6.822334 6.823995 6.822334 6.822334 6.822334 6.823995 7.174552 7.172891  #>     1689     1690     1691     1692     1693     1694     1695     1696  #> 7.172891 7.174552 7.179534 7.174552 7.306372 7.308033 7.308033 7.308033  #>     1697     1698     1699     1700     1701     1702     1703     1704  #> 7.309694 7.309694 6.529924 6.524941 6.526602 6.524941 6.524941 6.526602  #>     1705     1706     1707     1708     1709     1710     1711     1712  #> 6.831533 6.828211 6.828211 6.829872 6.829872 6.829872 6.609886 6.609886  #>     1713     1714     1715     1716     1717     1718     1719     1720  #> 6.608226 6.609886 6.557061 6.613208 6.883956 6.875652 6.875652 6.873991  #>     1721     1722     1723     1724     1725     1726     1727     1728  #> 6.890599 6.887277 7.458568 7.458568 7.458568 7.458568 7.461889 7.463550  #>     1729     1730     1731     1732     1733     1734     1735     1736  #> 8.323699 8.325360 8.325360 8.325360 8.325360 8.327021 6.111082 6.107761  #>     1737     1738     1739     1740     1741     1742     1743     1744  #> 6.109421 6.109421 6.111082 6.111082 7.063649 7.057006 7.058667 7.060327  #>     1745     1746     1747     1748     1749     1750     1751     1752  #> 7.061988 7.061988 7.015495 7.017156 7.017156 7.015495 7.017156 7.015495  #>     1753     1754     1755     1756     1757     1758     1759     1760  #> 6.379498 6.379498 6.379498 6.379498 6.379498 6.379498 6.267237 6.278862  #>     1761     1762     1763     1764     1765     1766     1767     1768  #> 6.265576 6.268897 6.267237 6.268897 6.913719 6.913719 6.917041 6.915380  #>     1769     1770     1771     1772     1773     1774     1775     1776  #> 6.915380 6.915380 6.359674 6.305188 6.305188 6.372960 6.354692 6.354692  #>     1777     1778     1779     1780     1781     1782     1783     1784  #> 6.630152 6.653402 6.684637 6.682977 6.684637 6.682977 6.067402 6.067402  #>     1785     1786     1787     1788     1789     1790     1791     1792  #> 6.069063 6.070723 6.067402 6.067402 6.223680 6.225340 6.223680 6.223680  #>     1793     1794     1795     1796     1797     1798     1799     1800  #> 6.223680 6.223680 6.110936 6.110936 6.117579 6.114257 6.117579 6.117579  #>     1801     1802     1803     1804     1805     1806     1807     1808  #> 6.914249 6.914249 6.915910 6.919231 6.919231 6.915910 6.693021 6.691360  #>     1809     1810     1811     1812     1813     1814     1815     1816  #> 6.689699 6.694681 6.694681 6.693021 6.668640 6.670301 6.670301 6.666979  #>     1817     1818     1819     1820     1821     1822     1823     1824  #> 6.670301 6.671962 6.085077 6.085077 6.085077 6.085077 6.085077 6.085077  #>     1825     1826     1827     1828     1829     1830     1831     1832  #> 7.483777 7.483777 7.483777 7.482116 7.487098 7.485438 6.319337 6.319337  #>     1833     1834     1835     1836     1837     1838     1839     1840  #> 6.320998 6.320998 6.320998 6.320998 6.767375 6.770697 6.775679 6.772358  #>     1841     1842     1843     1844     1845     1846     1847     1848  #> 6.775679 6.769036 6.893748 6.897069 6.897069 6.897069 6.907034 6.903713  #>     1849     1850     1851     1852     1853     1854     1855     1856  #> 5.724765 5.729748 5.690209 5.660315 5.681905 5.660315 6.538225 6.559815  #>     1857     1858     1859     1860     1861     1862     1863     1864  #> 6.538225 6.538225 6.538225 6.539885 6.784667 6.812900 6.839153 6.839153  #>     1865     1866     1867     1868     1869     1870     1871     1872  #> 6.850778 6.839153 6.889664 6.892985 6.889664 6.891325 6.889664 6.889664  #>     1873     1874     1875     1876     1877     1878     1879     1880  #> 6.498626 6.498626 6.500287 6.501948 6.501948 6.505269 6.430403 6.493192  #>     1881     1882     1883     1884     1885     1886     1887     1888  #> 6.483228 6.483228 6.484889 6.483228 6.521928 6.540196 6.521928 6.520267  #>     1889     1890     1891     1892     1893     1894     1895     1896  #> 6.536874 6.520267 8.356619 8.361602 8.359941 8.361602 8.359941 8.359941  #>     1897     1898     1899     1900     1901     1902     1903     1904  #> 6.055239 6.081812 6.080151 6.056900 6.060222 6.096759 6.646909 6.641926  #>     1905     1906     1907     1908     1909     1910     1911     1912  #> 6.648569 6.736271 6.645248 6.646909 6.868991 6.873974 6.868991 6.868991  #>     1913     1914     1915     1916     1917     1918     1919     1920  #> 6.868991 6.880617 6.222674 6.219353 6.219353 6.225996 6.217692 6.225996  #>     1921     1922     1923     1924     1925     1926     1927     1928  #> 6.125939 6.125939 6.125939 6.125939 6.129260 6.127599 7.177907 7.181228  #>     1929     1930     1931     1932     1933     1934     1935     1936  #> 7.182889 7.181228 7.181228 7.182889 6.979207 6.977546 6.979207 6.977546  #>     1937     1938     1939     1940     1941     1942     1943     1944  #> 6.984189 6.982528 6.934800 6.956390 6.948086 6.964694 6.939783 6.938122  #>     1945     1946     1947     1948     1949     1950     1951     1952  #> 6.258927 6.258927 6.258927 6.258927 6.258927 6.258927 6.988078 6.988078  #>     1953     1954     1955     1956     1957     1958     1959     1960  #> 6.988078 6.988078 6.988078 6.988078 5.920936 5.917614 5.924257 5.924257  #>     1961     1962     1963     1964     1965     1966     1967     1968  #> 5.978743 5.925918 6.929696 6.929696 6.980860 6.982521 6.926375 6.928035  #>     1969     1970     1971     1972     1973     1974     1975     1976  #> 6.637659 6.637659 6.637659 6.637659 6.637659 6.637659 7.248418 7.248418  #>     1977     1978     1979     1980     1981     1982     1983     1984  #> 7.250079 7.250079 7.250079 7.248418 7.244934 7.307723 7.246594 7.301080  #>     1985     1986     1987     1988     1989     1990     1991     1992  #> 7.299420 7.301080 5.295978 5.294317 5.299299 5.297638 5.299299 5.295978  #>     1993     1994     1995     1996     1997     1998     1999     2000  #> 6.779234 6.774251 6.780894 6.777573 6.777573 6.777573 5.637736 5.637736  #>     2001     2002     2003     2004     2005     2006     2007     2008  #> 5.639397 5.651022 5.637736 5.641058 6.785820 6.790802 6.794124 6.787481  #>     2009     2010     2011     2012     2013     2014     2015     2016  #> 6.792463 6.789141 6.531974 6.530313 6.533635 6.526992 6.530313 6.535296  #>     2017     2018     2019     2020     2021     2022     2023     2024  #> 7.240649 7.240649 7.243970 7.242310 7.243970 7.243970 6.079161 6.079161  #>     2025     2026     2027     2028     2029     2030     2031     2032  #> 6.080822 6.082483 6.082483 6.082483 5.437823 5.439484 5.441145 5.439484  #>     2033     2034     2035     2036     2037     2038     2039     2040  #> 5.442806 5.441145 6.966639 6.958335 6.958335 6.958335 6.958335 6.958335  #>     2041     2042     2043     2044     2045     2046     2047     2048  #> 7.938810 7.937149 7.938810 7.937149 7.938810 7.937149 7.037101 7.038762  #>     2049     2050     2051     2052     2053     2054     2055     2056  #> 7.037101 7.089926 7.037101 7.038762 7.632456 7.634117 7.686942 7.634117  #>     2057     2058     2059     2060     2061     2062     2063     2064  #> 7.635777 7.639099 8.255154 8.248511 8.253493 8.248511 8.250171 8.251832  #>     2065     2066     2067     2068     2069     2070     2071     2072  #> 6.177771 6.177771 6.177771 6.179432 6.179432 6.179432 7.389182 7.392504  #>     2073     2074     2075     2076     2077     2078     2079     2080  #> 7.400808 7.397486 7.402468 7.395825 7.360403 7.365385 7.363725 7.360403  #>     2081     2082     2083     2084     2085     2086     2087     2088  #> 7.360403 7.365385 8.769158 8.765836 8.767497 8.767497 8.789087 8.805695  #>     2089     2090     2091     2092     2093     2094     2095     2096  #> 6.997938 6.996277 6.996277 6.997938 6.999599 6.997938 7.078400 7.065113  #>     2097     2098     2099     2100     2101     2102     2103     2104  #> 7.012288 7.065113 7.068435 7.070096 6.459218 6.460879 6.508722 6.515365  #>     2105     2106     2107     2108     2109     2110     2111     2112  #> 6.520347 6.510382 6.923464 6.923464 6.925124 6.923464 6.925124 6.925124  #>     2113     2114     2115     2116     2117     2118     2119     2120  #> 8.835736 8.840718 8.837397 8.837397 8.837397 8.837397 6.859323 6.857663  #>     2121     2122     2123     2124     2125     2126     2127     2128  #> 6.856002 6.856002 6.860984 6.856002 5.953756 5.953756 6.004920 6.008242  #>     2129     2130     2131     2132     2133     2134     2135     2136  #> 5.952095 5.952095 6.853369 6.853369 6.853369 6.853369 6.851709 6.853369  #>     2137     2138     2139     2140     2141     2142     2143     2144  #> 6.731165 6.736147 6.732826 6.732826 6.732826 6.732826 6.735682 6.730700  #>     2145     2146     2147     2148     2149     2150     2151     2152  #> 6.684518 6.732361 6.734022 6.735682 5.765399 5.780346 5.767060 5.765399  #>     2153     2154     2155     2156     2157     2158     2159     2160  #> 5.782007 5.767060 7.367320 7.365659 7.367320 7.368981 7.370641 7.367320  #>     2161     2162     2163     2164     2165     2166     2167     2168  #> 6.204915 6.258059 6.208236 6.209897 6.211558 6.206576 7.066530 7.068191  #>     2169     2170     2171     2172     2173     2174     2175     2176  #> 7.068191 7.066530 7.066530 7.068191 6.318085 6.318085 6.329710 6.342996  #>     2177     2178     2179     2180     2181     2182     2183     2184  #> 6.321406 6.321406 6.600367 6.598706 6.600367 6.598706 6.600367 6.600367  #>     2185     2186     2187     2188     2189     2190     2191     2192  #> 7.063433 7.063433 7.061773 7.065094 7.066755 7.063433 6.383523 6.381862  #>     2193     2194     2195     2196     2197     2198     2199     2200  #> 6.390166 6.380201 6.381862 6.383523 7.093531 7.081906 7.083567 7.100174  #>     2201     2202     2203     2204     2205     2206     2207     2208  #> 7.080245 7.081906 7.369626 7.369626 7.372947 7.369626 7.371287 7.371287  #>     2209     2210     2211     2212     2213     2214     2215     2216  #> 6.968354 6.968354 6.970014 6.968354 6.970014 6.971675 7.064417 7.064417  #>     2217     2218     2219     2220     2221     2222     2223     2224  #> 7.064417 7.067739 7.066078 7.067739 7.084959 7.084959 7.084959 7.084959  #>     2225     2226     2227     2228     2229     2230     2231     2232  #> 7.084959 7.084959 6.730048 6.733370 6.731709 6.731709 6.733370 6.731709  #>     2233     2234     2235     2236     2237     2238     2239     2240  #> 6.059557 6.059557 6.059557 6.059557 6.061218 6.064539 5.540725 5.542386  #>     2241     2242     2243     2244     2245     2246     2247     2248  #> 5.540725 5.540725 5.540725 5.542386 5.330904 5.337548 5.339208 5.289705  #>     2249     2250     2251     2252     2253     2254     2255     2256  #> 5.335887 5.293026 6.686238 6.686238 6.686238 6.687898 6.684577 6.687898  #>     2257     2258     2259     2260     2261     2262     2263     2264  #> 7.345610 7.347271 7.345610 7.342289 7.345610 7.345610 7.099638 7.094656  #>     2265     2266     2267     2268     2269     2270     2271     2272  #> 7.097978 7.097978 7.097978 7.101299 6.705150 6.703489 6.701829 6.703489  #>     2273     2274     2275     2276     2277     2278     2279     2280  #> 6.701829 6.703489 6.251444 6.251444 6.251444 6.253105 6.254766 6.254766  #>     2281     2282     2283     2284     2285     2286     2287     2288  #> 6.591674 6.591674 6.596656 6.593335 6.591674 6.593335 6.198518 6.198518  #>     2289     2290     2291     2292     2293     2294     2295     2296  #> 6.198518 6.196857 6.196857 6.195197 7.273832 7.267189 7.268850 7.267189  #>     2297     2298     2299     2300     2301     2302     2303     2304  #> 7.275493 7.272171 5.694703 5.693042 5.693042 5.701346 5.693042 5.694703  #>     2305     2306     2307     2308     2309     2310     2311     2312  #> 7.075866 7.079187 7.080848 7.077527 7.079187 7.079187 7.871130 7.871130  #>     2313     2314     2315     2316     2317     2318     2319     2320  #> 7.871130 7.869469 7.871130 7.871130 6.811931 6.806949 6.811931 6.811931  #>     2321     2322     2323     2324     2325     2326     2327     2328  #> 6.810270 6.808609 7.588488 7.590148 7.586827 7.588488 7.591809 7.591809  #>     2329     2330     2331     2332     2333     2334     2335     2336  #> 7.701668 7.701668 7.708311 7.701668 7.704989 7.704989 7.403457 7.405117  #>     2337     2338     2339     2340     2341     2342     2343     2344  #> 7.403457 7.403457 7.403457 7.405117 6.376862 6.376862 6.329019 6.329019  #>     2345     2346     2347     2348     2349     2350     2351     2352  #> 6.329019 6.330680 6.389906 6.389906 6.391567 6.398210 6.388245 6.431425  #>     2353     2354     2355     2356     2357     2358     2359     2360  #> 6.834721 6.828078 6.831399 6.828078 6.828078 6.831399 6.366286 6.366286  #>     2361     2362     2363     2364     2365     2366     2367     2368  #> 6.366286 6.366286 6.366286 6.366286 6.098233 6.128126 6.099893 6.106536  #>     2369     2370     2371     2372     2373     2374     2375     2376  #> 6.104876 6.096572 6.091861 6.090201 6.088540 6.095183 6.086879 6.083558  #>     2377     2378     2379     2380     2381     2382     2383     2384  #> 7.182386 7.184046 7.184046 7.184046 7.182386 7.185707 7.128846 7.127186  #>     2385     2386     2387     2388     2389     2390     2391     2392  #> 7.132168 7.130507 7.128846 7.130507 6.713080 6.713080 6.714741 6.714741  #>     2393     2394     2395     2396     2397     2398     2399     2400  #> 6.728027 6.714741 6.901413 6.904735 6.903074 6.908056 6.929646 6.899752  #>     2401     2402     2403     2404     2405     2406     2407     2408  #> 7.476460 7.499710 7.430278 7.466495 7.428617 7.420313 7.549882 7.544900  #>     2409     2410     2411     2412     2413     2414     2415     2416  #> 7.546560 7.548221 7.543239 7.544900 7.658386 7.658386 7.658386 7.658386  #>     2417     2418     2419     2420     2421     2422     2423     2424  #> 7.658386 7.658386 6.997407 7.004050 7.012354 6.999068 6.999068 6.999068  #>     2425     2426     2427     2428     2429     2430     2431     2432  #> 7.814214 7.814214 7.815874 7.815874 7.817535 7.817535 6.668949 6.660645  #>     2433     2434     2435     2436     2437     2438     2439     2440  #> 6.662306 6.667288 6.663966 6.660645 7.652483 7.649161 7.649161 7.650822  #>     2441     2442     2443     2444     2445     2446     2447     2448  #> 7.649161 7.647501 6.183860 6.205450 6.203789 6.203789 6.197146 6.200468  #>     2449     2450     2451     2452     2453     2454     2455     2456  #> 6.517167 6.518828 6.517167 6.513846 6.464342 6.462681 5.478390 5.465104  #>     2457     2458     2459     2460     2461     2462     2463     2464  #> 5.465104 5.468425 5.478390 5.471747 6.384220 6.385880 6.380898 6.382559  #>     2465     2466     2467     2468     2469     2470     2471     2472  #> 6.382559 6.384220 7.353756 7.353756 7.355417 7.363720 7.352095 7.357077  #>     2473     2474     2475     2476     2477     2478     2479     2480  #> 7.249909 7.233301 7.233301 7.233301 7.233301 7.231640 6.682754 6.682754  #>     2481     2482     2483     2484     2485     2486     2487     2488  #> 6.674450 6.682754 6.682754 6.682754 5.786797 5.781815 5.785136 5.785136  #>     2489     2490     2491     2492     2493     2494     2495     2496  #> 5.796762 5.790119 6.770123 6.765141 6.765141 6.765141 6.765141 6.765141  #>     2497     2498     2499     2500     2501     2502     2503     2504  #> 5.736788 5.758378 5.758378 5.746752 5.741770 5.750074 6.746457 6.746457  #>     2505     2506     2507     2508     2509     2510     2511     2512  #> 6.748118 6.748118 6.749778 6.748118 7.066394 7.069716 7.066394 7.069716  #>     2513     2514     2515     2516     2517     2518     2519     2520  #> 7.069716 7.069716 6.563070 6.563070 6.568052 6.563070 6.564731 6.564731  #>     2521     2522     2523     2524     2525     2526     2527     2528  #> 6.226658 6.231640 6.228319 6.231640 6.229979 6.228319 6.339484 6.337823  #>     2529     2530     2531     2532     2533     2534     2535     2536  #> 6.337823 6.337823 6.341145 6.346127 6.768135 6.778099 6.781421 6.768135  #>     2537     2538     2539     2540     2541     2542     2543     2544  #> 6.735239 6.711988 7.284837 7.334341 7.327698 7.268229 7.322715 7.334341  #>     2545     2546     2547     2548     2549     2550     2551     2552  #> 6.927136 6.925476 6.927136 6.927136 6.927136 6.927136 6.598105 6.601427  #>     2553     2554     2555     2556     2557     2558     2559     2560  #> 6.604748 6.608070 6.606409 6.606409 7.858516 7.850212 7.856855 7.850212  #>     2561     2562     2563     2564     2565     2566     2567     2568  #> 7.848551 7.853533 6.119781 6.139710 6.138050 6.139710 6.138050 6.139710  #>     2569     2570     2571     2572     2573     2574     2575     2576  #> 6.720967 6.729271 6.714324 6.719306 6.747539 6.715985 5.248038 5.249699  #>     2577     2578     2579     2580     2581     2582     2583     2584  #> 5.236413 5.229770 5.233091 5.234752 5.656619 5.656619 5.674887 5.711105  #>     2585     2586     2587     2588     2589     2590     2591     2592  #> 5.712766 5.716087 7.471367 7.466385 7.469706 7.469706 7.469706 7.469706  #>     2593     2594     2595     2596     2597     2598     2599     2600  #> 6.524190 6.524190 6.524190 6.524190 6.524190 6.524190 6.998899 7.007203  #>     2601     2602     2603     2604     2605     2606     2607     2608  #> 6.962363 6.965684 6.972327 6.972327 7.033275 7.036597 7.024971 7.018328  #>     2609     2610     2611     2612     2613     2614     2615     2616  #> 7.021650 7.026632 6.265997 6.272640 6.270979 6.269318 6.265997 6.265997  #>     2617     2618     2619     2620     2621     2622     2623     2624  #> 6.072103 6.070443 6.070443 6.070443 6.113622 6.108640 6.392720 6.382755  #>     2625     2626     2627     2628     2629     2630     2631     2632  #> 6.381094 6.381094 6.381094 6.394380 7.115763 7.117424 7.109120 7.114102  #>     2633     2634     2635     2636     2637     2638     2639     2640  #> 7.117424 7.110781 5.776029 5.776029 5.776029 5.777690 5.777690 5.777690  #>     2641     2642     2643     2644     2645     2646     2647     2648  #> 6.121785 6.121785 6.121785 6.121785 6.121785 6.121785 6.048362 6.050022  #>     2649     2650     2651     2652     2653     2654     2655     2656  #> 6.051683 6.053344 6.058326 6.053344 5.817338 5.815677 5.815677 5.815677  #>     2657     2658     2659     2660     2661     2662     2663     2664  #> 5.817338 5.817338 7.055064 7.056725 7.056725 7.048421 7.045099 7.056725  #>     2665     2666     2667     2668     2669     2670     2671     2672  #> 7.531525 7.533186 7.533186 7.533186 7.534847 7.536508 5.764417 5.764417  #>     2673     2674     2675     2676     2677     2678     2679     2680  #> 5.767738 5.779364 5.777703 5.776042 5.368953 5.368953 5.368953 5.368953  #>     2681     2682     2683     2684     2685     2686     2687     2688  #> 5.368953 5.368953 6.864434 6.869416 6.864434 6.864434 6.869416 6.877720  #>     2689     2690     2691     2692     2693     2694     2695     2696  #> 6.536058 6.539380 6.549345 6.541041 6.592205 6.603830 6.888107 6.894750  #>     2697     2698     2699     2700     2701     2702     2703     2704  #> 6.884786 6.884786 6.888107 6.886446 6.824962 6.824962 6.824962 6.824962  #>     2705     2706     2707     2708     2709     2710     2711     2712  #> 6.828284 6.846552 5.718972 5.720632 5.723954 5.717311 5.718972 5.723954  #>     2713     2714     2715     2716     2717     2718     2719     2720  #> 7.255673 7.257333 7.311819 7.254012 7.255673 7.311819 6.960073 6.961734  #>     2721     2722     2723     2724     2725     2726     2727     2728  #> 6.965055 6.963395 6.912230 6.912230 5.991206 5.991206 5.989545 5.991206  #>     2729     2730     2731     2732     2733     2734     2735     2736  #> 5.991206 5.987884 6.812139 6.815461 6.812139 6.812139 6.812139 6.810478  #>     2737     2738     2739     2740     2741     2742     2743     2744  #> 5.706644 5.706644 5.704984 5.706644 5.706644 5.706644 6.984421 6.981099  #>     2745     2746     2747     2748     2749     2750     2751     2752  #> 6.984421 6.982760 6.986082 6.967813 7.181411 7.181411 7.183071 7.181411  #>     2753     2754     2755     2756     2757     2758     2759     2760  #> 7.181411 7.183071 7.097425 7.092443 7.082478 7.092443 7.094104 7.094104  #>     2761     2762     2763     2764     2765     2766     2767     2768  #> 6.521572 6.521572 6.521572 6.521572 6.521572 6.521572 5.867164 5.898719  #>     2769     2770     2771     2772     2773     2774     2775     2776  #> 5.855539 5.857200 5.858860 5.878789 7.119469 7.122791 7.122791 7.124451  #>     2777     2778     2779     2780     2781     2782     2783     2784  #> 7.124451 7.127773 5.682842 5.687824 5.686163 5.686163 5.687824 5.687824  #>     2785     2786     2787     2788     2789     2790     2791     2792  #> 6.345510 6.350492 6.345510 6.348832 6.347171 6.347171 6.429202 6.410933  #>     2793     2794     2795     2796     2797     2798     2799     2800  #> 6.412594 6.410933 6.359769 6.442488 6.452974 6.456295 6.456295 6.456295  #>     2801     2802     2803     2804     2805     2806     2807     2808  #> 6.456295 6.456295 7.730012 7.730012 7.728352 7.728352 7.728352 7.726691  #>     2809     2810     2811     2812     2813     2814     2815     2816  #> 4.189691 4.183048 4.181387 4.183048 4.184709 4.186369 7.179564 7.181225  #>     2817     2818     2819     2820     2821     2822     2823     2824  #> 7.176243 7.177904 7.179564 7.177904 7.200796 7.200796 7.204117 7.200796  #>     2825     2826     2827     2828     2829     2830     2831     2832  #> 7.207439 7.207439 5.434977 5.423351 5.423351 5.431655 5.426673 5.425012  #>     2833     2834     2835     2836     2837     2838     2839     2840  #> 6.654588 6.654588 6.656249 6.651267 6.652928 6.657910 7.348279 7.344957  #>     2841     2842     2843     2844     2845     2846     2847     2848  #> 7.346618 7.348279 7.346618 7.344957 7.478517 7.480178 7.481838 7.480178  #>     2849     2850     2851     2852     2853     2854     2855     2856  #> 7.483499 7.483499 5.777597 5.795866 5.845689 5.734737 5.719790 5.719790  #>     2857     2858     2859     2860     2861     2862     2863     2864  #> 6.797599 6.761062 6.761062 6.761062 6.764384 6.759401 6.538748 6.540409  #>     2865     2866     2867     2868     2869     2870     2871     2872  #> 6.542070 6.538748 6.538748 6.537088 7.785554 7.785554 7.785554 7.785554  #>     2873     2874     2875     2876     2877     2878     2879     2880  #> 7.785554 7.787215 6.220114 6.220114 6.220114 6.276260 6.281243 6.286225  #>     2881     2882     2883     2884     2885     2886     2887     2888  #> 5.508982 5.508982 5.508982 5.512304 5.512304 5.510643 6.546034 6.544373  #>     2889     2890     2891     2892     2893     2894     2895     2896  #> 6.546034 6.547694 6.547694 6.546034 6.563029 6.564690 6.566351 6.569672  #>     2897     2898     2899     2900     2901     2902     2903     2904  #> 6.564690 6.568012 7.168720 7.175363 7.168720 7.172042 7.168720 7.185328  #>     2905     2906     2907     2908     2909     2910     2911     2912  #> 6.636877 6.636877 6.636877 6.636877 6.636877 6.638538 7.302425 7.305747  #>     2913     2914     2915     2916     2917     2918     2919     2920  #> 7.304086 7.317372 7.305747 7.307408 7.359138 7.360799 7.360799 7.362459  #>     2921     2922     2923     2924     2925     2926     2927     2928  #> 7.364120 7.369102 7.125458 7.150369 7.127119 7.130440 7.128779 7.165316  #>     2929     2930     2931     2932     2933     2934     2935     2936  #> 6.754386 6.754386 6.754386 6.752725 6.754386 6.752725 7.241032 7.237710  #>     2937     2938     2939     2940     2941     2942     2943     2944  #> 7.287214 7.237710 7.237710 7.234389 6.846423 6.806564 6.803243 6.804903  #>     2945     2946     2947     2948     2949     2950     2951     2952  #> 6.804903 6.758721 5.951973 5.950312 5.948652 5.950312 5.951973 5.951973  #>     2953     2954     2955     2956     2957     2958     2959     2960  #> 6.909370 6.912692 6.911031 6.911031 6.911031 6.911031 5.762538 5.784128  #>     2961     2962     2963     2964     2965     2966     2967     2968  #> 5.762538 5.762538 5.762538 5.762538 6.674114 6.664150 6.710332 6.711993  #>     2969     2970     2971     2972     2973     2974     2975     2976  #> 6.711993 6.715314 7.826665 7.823343 7.825004 7.829986 7.823343 7.825004  #>     2977     2978     2979     2980     2981     2982     2983     2984  #> 7.655388 7.655388 7.657049 7.657049 7.657049 7.658710 6.414189 6.415850  #>     2985     2986     2987     2988     2989     2990     2991     2992  #> 6.414189 6.414189 6.437440 6.435779 6.715322 6.716983 6.720305 6.721966  #>     2993     2994     2995     2996     2997     2998     2999     3000  #> 6.716983 6.716983 6.342683 6.342683 6.341023 6.341023 6.341023 6.342683  #>     3001     3002     3003     3004     3005     3006     3007     3008  #> 6.746674 6.746674 6.748335 6.748335 6.761621 6.749996 7.163404 7.216229  #>     3009     3010     3011     3012     3013     3014     3015     3016  #> 7.216229 7.216229 7.216229 7.221211 7.593112 7.584808 7.583148 7.581487  #>     3017     3018     3019     3020     3021     3022     3023     3024  #> 7.583148 7.578165 6.984389 6.934886 6.936547 6.946511 6.936547 6.933225  #>     3025     3026     3027     3028     3029     3030     3031     3032  #> 7.908837 7.907176 7.907176 7.907176 7.907176 7.908837 6.546045 6.546045  #>     3033     3034     3035     3036     3037     3038     3039     3040  #> 6.546045 6.544384 6.546045 6.554349 6.276254 6.286218 6.284557 6.262967  #>     3041     3042     3043     3044     3045     3046     3047     3048  #> 6.264628 6.264628 6.509506 6.507845 6.509506 6.507845 6.511167 6.507845  #>     3049     3050     3051     3052     3053     3054     3055     3056  #> 6.722342 6.724003 6.724003 6.725664 6.725664 6.725664 7.652628 7.652628  #>     3057     3058     3059     3060     3061     3062     3063     3064  #> 7.652628 7.652628 7.654288 7.652628 6.382346 6.380686 6.384007 6.412240  #>     3065     3066     3067     3068     3069     3070     3071     3072  #> 6.380686 6.384007 6.715889 6.719210 6.719210 6.719210 6.773696 6.770374  #>     3073     3074     3075     3076     3077     3078     3079     3080  #> 5.402515 5.402515 5.402515 5.402515 5.405836 5.402515 7.462844 7.451219  #>     3081     3082     3083     3084     3085     3086     3087     3088  #> 7.454540 7.454540 7.456201 7.464505 5.027408 5.029069 5.030730 5.030730  #>     3089     3090     3091     3092     3093     3094     3095     3096  #> 5.030730 5.032391 7.150440 7.148779 7.150440 7.152100 7.201604 7.199943  #>     3097     3098     3099     3100     3101     3102     3103     3104  #> 5.340856 5.334213 5.335873 5.334213 5.337534 5.337534 5.821582 5.821582  #>     3105     3106     3107     3108     3109     3110     3111     3112  #> 5.819921 5.819921 5.819921 5.819921 5.457833 5.454512 5.456172 5.459494  #>     3113     3114     3115     3116     3117     3118     3119     3120  #> 5.456172 5.459494 6.397819 6.396159 6.396159 6.444321 6.343334 6.340012  #>     3121     3122     3123     3124     3125     3126     3127     3128  #> 7.165314 7.115810 7.117471 7.115810 7.115810 7.115810 6.196018 6.191036  #>     3129     3130     3131     3132     3133     3134     3135     3136  #> 6.248843 6.248843 6.272094 6.257147 6.295651 6.292330 6.293990 6.292330  #>     3137     3138     3139     3140     3141     3142     3143     3144  #> 6.293990 6.297312 6.338802 6.332159 6.332159 6.332159 6.328838 6.330499  #>     3145     3146     3147     3148     3149     3150     3151     3152  #> 6.372289 6.372289 6.372289 6.382254 6.377271 6.380593 5.839157 5.842478  #>     3153     3154     3155     3156     3157     3158     3159     3160  #> 5.840817 5.834174 5.839157 5.839157 6.799099 6.799099 6.799099 6.800760  #>     3161     3162     3163     3164     3165     3166     3167     3168  #> 6.800760 6.799099 6.475121 6.466817 6.470139 6.466817 6.470139 6.466817  #>     3169     3170     3171     3172     3173     3174     3175     3176  #> 7.491683 7.491683 7.491683 7.547829 7.544508 7.486701 7.681716 7.683377  #>     3177     3178     3179     3180     3181     3182     3183     3184  #> 7.688359 7.685038 7.683377 7.685038 7.559226 7.557565 7.559226 7.560887  #>     3185     3186     3187     3188     3189     3190     3191     3192  #> 7.560887 7.564208 5.767156 5.763835 5.767156 5.765496 5.772139 5.767156  #>     3193     3194     3195     3196     3197     3198     3199     3200  #> 6.243804 6.247126 6.247126 6.245465 6.247126 6.245465 5.349347 5.344364  #>     3201     3202     3203     3204     3205     3206     3207     3208  #> 5.344364 5.344364 5.346025 5.344364 5.137336 5.135675 5.137336 5.138997  #>     3209     3210     3211     3212     3213     3214     3215     3216  #> 5.135675 5.137336 7.123509 7.126831 7.125170 7.125170 7.123509 7.126831  #>     3217     3218     3219     3220     3221     3222     3223     3224  #> 6.870563 6.870563 6.870563 6.870563 6.872224 6.872224 7.117472 7.119133  #>     3225     3226     3227     3228     3229     3230     3231     3232  #> 7.124115 7.117472 7.119133 7.117472 7.322810 7.321150 7.322810 7.324471  #>     3233     3234     3235     3236     3237     3238     3239     3240  #> 7.321150 7.324471 8.220904 8.220904 8.222565 8.224225 8.224225 8.224225  #>     3241     3242     3243     3244     3245     3246     3247     3248  #> 6.766116 6.766116 6.767777 6.769437 6.769437 6.767777 6.955003 6.956664  #>     3249     3250     3251     3252     3253     3254     3255     3256  #> 6.958325 6.955003 6.951682 6.956664 6.941052 6.942712 6.942712 6.944373  #>     3257     3258     3259     3260     3261     3262     3263     3264  #> 6.942712 6.942712 7.263314 7.263314 7.263314 7.210489 7.263314 7.210489  #>     3265     3266     3267     3268     3269     3270     3271     3272  #> 7.569970 7.571631 7.574952 7.574952 7.579934 7.571631 7.103519 7.116805  #>     3273     3274     3275     3276     3277     3278     3279     3280  #> 7.054015 7.138395 7.108501 7.105179 6.933066 6.938048 6.944691 6.938048  #>     3281     3282     3283     3284     3285     3286     3287     3288  #> 6.936387 6.936387 6.934757 6.934757 6.934757 6.934757 6.938078 6.939739  #>     3289     3290     3291     3292     3293     3294     3295     3296  #> 5.441113 5.439453 5.441113 5.439453 5.439453 5.439453 7.117359 7.122341  #>     3297     3298     3299     3300     3301     3302     3303     3304  #> 7.119020 7.120681 7.122341 7.122341 6.015310 6.011988 6.010328 6.008667  #>     3305     3306     3307     3308     3309     3310     3311     3312  #> 6.008667 6.011988 6.677849 6.674528 6.681171 6.679510 6.674528 6.605095  #>     3313     3314     3315     3316     3317     3318     3319     3320  #> 5.914990 5.916651 5.916651 5.916651 5.916651 5.914990 5.531740 5.477254  #>     3321     3322     3323     3324     3325     3326     3327     3328  #> 5.533401 5.530079 5.535061 5.548348 7.865826 7.864166 7.865826 7.865826  #>     3329     3330     3331     3332     3333     3334     3335     3336  #> 7.864166 7.865826 7.499631 7.499631 7.499631 7.499631 7.502953 7.504613  #>     3337     3338     3339     3340     3341     3342     3343     3344  #> 6.529084 6.534066 6.535727 6.532405 6.529084 6.583569 5.918773 5.917112  #>     3345     3346     3347     3348     3349     3350     3351     3352  #> 5.917112 5.917112 5.917112 5.918773 6.404254 6.405915 6.404254 6.405915  #>     3353     3354     3355     3356     3357     3358     3359     3360  #> 6.404254 6.410897 6.238820 6.185995 6.199281 6.282000 6.187655 6.187655  #>     3361     3362     3363     3364     3365     3366     3367     3368  #> 6.949411 6.990930 6.946089 6.946089 6.946089 6.949411 7.127241 7.127241  #>     3369     3370     3371     3372     3373     3374     3375     3376  #> 7.132223 7.127241 7.128902 7.128902 7.061981 7.058659 7.063641 7.058659  #>     3377     3378     3379     3380     3381     3382     3383     3384  #> 7.100178 7.055337 7.153850 7.157171 7.153850 7.155511 7.106007 7.158832  #>     3385     3386     3387     3388     3389     3390     3391     3392  #> 7.696589 7.632139 7.633800 7.630478 7.632139 7.635460 6.981687 6.975044  #>     3393     3394     3395     3396     3397     3398     3399     3400  #> 6.978366 6.980026 6.980026 6.978366 5.253338 5.254999 5.271607 5.278250  #>     3401     3402     3403     3404     3405     3406     3407     3408  #> 5.269946 5.253338 6.736526 6.736526 6.739848 6.739848 6.741509 6.738187  #>     3409     3410     3411     3412     3413     3414     3415     3416  #> 7.092323 7.090662 7.093984 7.093984 7.093984 7.090662 5.584302 5.579319  #>     3417     3418     3419     3420     3421     3422     3423     3424  #> 5.579319 5.579319 5.579319 5.580980 6.923030 6.921369 6.923030 6.924690  #>     3425     3426     3427     3428     3429     3430     3431     3432  #> 6.923030 6.923030 5.973991 5.977312 5.977312 5.990598 5.972330 5.973991  #>     3433     3434     3435     3436     3437     3438     3439     3440  #> 6.037534 6.040856 6.039195 6.039195 6.039195 5.984709 6.672103 6.672103  #>     3441     3442     3443     3444     3445     3446     3447     3448  #> 6.670443 6.670443 6.670443 6.672103 5.791626 5.793286 5.793286 5.793286  #>     3449     3450     3451     3452     3453     3454     3455     3456  #> 5.793286 5.793286 6.217628 6.225932 6.220950 6.215968 6.215968 6.217628  #>     3457     3458     3459     3460     3461     3462     3463     3464  #> 5.830583 5.830583 5.833905 5.832244 5.832244 5.833905 6.637778 6.637778  #>     3465     3466     3467     3468     3469     3470     3471     3472  #> 6.637778 6.636117 6.642760 6.644421 5.941892 5.941892 5.941892 5.946874  #>     3473     3474     3475     3476     3477     3478     3479     3480  #> 5.941892 5.940231 6.525406 6.515441 6.517102 6.513780 6.515441 6.518763  #>     3481     3482     3483     3484     3485     3486     3487     3488  #> 7.323827 7.322166 7.333791 7.307219 7.323827 7.327148 6.621458 6.598207  #>     3489     3490     3491     3492     3493     3494     3495     3496  #> 6.588243 6.591564 6.589904 6.588243 7.050241 7.056884 7.055223 7.061866  #>     3497     3498     3499     3500     3501     3502     3503     3504  #> 7.060205 7.055223 6.406954 6.410275 6.408615 6.410275 6.408615 6.408615  #>     3505     3506     3507     3508     3509     3510     3511     3512  #> 6.913619 6.918602 6.913619 6.918602 6.915280 6.916941 5.249071 5.249071  #>     3513     3514     3515     3516     3517     3518     3519     3520  #> 5.249071 5.249071 5.250731 5.283947 7.130137 7.131798 7.131798 7.133458  #>     3521     3522     3523     3524     3525     3526     3527     3528  #> 7.133458 7.133458 5.900665 5.902326 5.902326 5.902326 5.900665 5.900665  #>     3529     3530     3531     3532     3533     3534     3535     3536  #> 7.112136 7.113796 7.112136 7.112136 7.113796 7.113796 6.710714 6.712375  #>     3537     3538     3539     3540     3541     3542     3543     3544  #> 6.714035 6.712375 6.714035 6.712375 6.667562 6.674205 6.680848 6.667562  #>     3545     3546     3547     3548     3549     3550     3551     3552  #> 6.669223 6.667562 6.883044 6.826898 6.883044 6.878062 6.879723 6.883044  #>     3553     3554     3555     3556     3557     3558     3559     3560  #> 4.579596 4.592883 4.611151 4.592883 4.579596 4.592883 6.749565 6.749565  #>     3561     3562     3563     3564     3565     3566     3567     3568  #> 6.749565 6.754548 6.747905 6.751226 5.559922 5.559922 5.561583 5.559922  #>     3569     3570  #> 5.559922 5.559922"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter magrittr %<>%, %>%","code":""},{"path":"/reference/summary.panel_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize panel data frames — summary.panel_data","title":"Summarize panel data frames — summary.panel_data","text":"summary method panel_data objects.","code":""},{"path":"/reference/summary.panel_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize panel data frames — summary.panel_data","text":"","code":"# S3 method for panel_data summary(object, ..., by.wave = TRUE, by.id = FALSE, skim_with = NULL)"},{"path":"/reference/summary.panel_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize panel data frames — summary.panel_data","text":"object panel_data frame. ... Optionally, unquoted variable names/expressions separated commas passed dplyr::select(). Otherwise, columns included. .wave (skimr installed) Separate descriptives wave? Default TRUE. .id (skimr installed) Separate descriptives entity? Default FALSE. careful large number entities output massive. skim_with closure skimr::skim_with(). set, skim","code":""},{"path":"/reference/summary.panel_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize panel data frames — summary.panel_data","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) summary(wages, lwage, exp, wks) #> Loading required namespace: skimr #>  #> ── Variable type: numeric ────────────────────────────────────────────────────── #>    skim_variable t n_missing complete_rate  mean     sd    p0   p25   p50   p75 #>  1 lwage         1         0             1  6.38  0.388  5.01  6.12  6.42  6.65 #>  2 lwage         2         0             1  6.47  0.363  5.01  6.24  6.53  6.75 #>  3 lwage         3         0             1  6.60  0.447  4.61  6.33  6.61  6.86 #>  4 lwage         4         0             1  6.70  0.441  5.08  6.44  6.72  6.96 #>  5 lwage         5         0             1  6.79  0.424  5.27  6.51  6.80  7.04 #>  6 lwage         6         0             1  6.86  0.424  5.66  6.60  6.91  7.11 #>  7 lwage         7         0             1  6.95  0.438  5.68  6.68  6.98  7.21 #>  8 exp           1         0             1 16.9  10.8    1     7    15    26    #>  9 exp           2         0             1 17.9  10.8    2     8    16    27    #> 10 exp           3         0             1 18.9  10.8    3     9    17    28    #> 11 exp           4         0             1 19.9  10.8    4    10    18    29    #> 12 exp           5         0             1 20.9  10.8    5    11    19    30    #> 13 exp           6         0             1 21.9  10.8    6    12    20    31    #> 14 exp           7         0             1 22.9  10.8    7    13    21    32    #> 15 wks           1         0             1 46.3   6.25   6    46    48    50    #> 16 wks           2         0             1 47.0   5.13  11    47    49    50    #> 17 wks           3         0             1 47.0   4.77  20    47    49    50    #> 18 wks           4         0             1 47.2   4.46   8    47    48    50    #> 19 wks           5         0             1 47.0   4.89   6    47    48    50    #> 20 wks           6         0             1 46.7   4.98   6    46    48    50    #> 21 wks           7         0             1 46.5   5.19   5    46    48    49    #>     p100 hist  #>  1  6.91 ▁▂▃▇▇ #>  2  6.91 ▁▁▂▅▇ #>  3  8.27 ▁▂▇▃▁ #>  4  8.52 ▁▃▇▂▁ #>  5  8.10 ▁▂▇▅▁ #>  6  8.16 ▁▃▇▃▁ #>  7  8.54 ▁▅▇▂▁ #>  8 45    ▇▇▅▅▁ #>  9 46    ▇▇▅▅▁ #> 10 47    ▇▇▅▅▁ #> 11 48    ▇▇▅▅▁ #> 12 49    ▇▇▅▅▁ #> 13 50    ▇▇▅▅▁ #> 14 51    ▇▇▅▅▁ #> 15 52    ▁▁▁▁▇ #> 16 52    ▁▁▁▁▇ #> 17 52    ▁▁▁▁▇ #> 18 52    ▁▁▁▁▇ #> 19 52    ▁▁▁▁▇ #> 20 52    ▁▁▁▁▇ #> 21 52    ▁▁▁▁▇"},{"path":"/reference/teen_poverty.html","id":null,"dir":"Reference","previous_headings":"","what":"National Longitudinal Survey of Youth teenage women poverty data — teen_poverty","title":"National Longitudinal Survey of Youth teenage women poverty data — teen_poverty","text":"data come years 1979-1983 National Longitudinal Survey Youth, information 1141 teenage women. data \"wide\" format demonstration purposes.","code":""},{"path":"/reference/teen_poverty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"National Longitudinal Survey of Youth teenage women poverty data — teen_poverty","text":"","code":"teen_poverty"},{"path":"/reference/teen_poverty.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"National Longitudinal Survey of Youth teenage women poverty data — teen_poverty","text":"data frame 1141 rows 28 variables: id Unique identifier respondent age Age first interview black 1 subject black, 0 pov1 1 subject poverty, 0 , time 1 pov2 1 subject poverty, 0 , time 2 pov3 1 subject poverty, 0 , time 3 pov4 1 subject poverty, 0 , time 4 pov5 1 subject poverty, 0 , time 5 mother1 1 subject child, 0 , time 1 mother2 1 subject child, 0 , time 2 mother3 1 subject child, 0 , time 3 mother4 1 subject child, 0 , time 4 mother5 1 subject child, 0 , time 5 spouse1 1 subject lives spouse, 0 , time 1 spouse2 1 subject lives spouse, 0 , time 2 spouse3 1 subject lives spouse, 0 , time 3 spouse4 1 subject lives spouse, 0 , time 4 spouse5 1 subject lives spouse, 0 , time 5 inschool1 1 subject school, 0 , time 1 inschool2 1 subject school, 0 , time 2 inschool3 1 subject school, 0 , time 3 inschool4 1 subject school, 0 , time 4 inschool5 1 subject school, 0 , time 5 hours1 Hours worked week survey, time 1 hours2 Hours worked week survey, time 2 hours3 Hours worked week survey, time 3 hours4 Hours worked week survey, time 4 hours5 Hours worked week survey, time 5","code":""},{"path":"/reference/teen_poverty.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"National Longitudinal Survey of Youth teenage women poverty data — teen_poverty","text":"data originate U.S. Department Labor. particular subset used come Paul Allison via Statistical Horizons: https://statisticalhorizons.com/wp-content/uploads/teenpov.dta","code":""},{"path":"/reference/unpanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert panel_data to regular data frame — unpanel","title":"Convert panel_data to regular data frame — unpanel","text":"convenience function removes special features panel_data.","code":""},{"path":"/reference/unpanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert panel_data to regular data frame — unpanel","text":"","code":"unpanel(panel)"},{"path":"/reference/unpanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert panel_data to regular data frame — unpanel","text":"panel panel_data object.","code":""},{"path":"/reference/unpanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert panel_data to regular data frame — unpanel","text":"ungrouped tibble.","code":""},{"path":"/reference/unpanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert panel_data to regular data frame — unpanel","text":"","code":"data(\"WageData\")  wages <- panel_data(WageData, id = id, wave = t) wages_non_panel <- unpanel(wages)"},{"path":"/reference/wbgee.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel regression models fit with GEE — wbgee","title":"Panel regression models fit with GEE — wbgee","text":"Fit \"within-\" several regression variants panel data via generalized estimating equations.","code":""},{"path":"/reference/wbgee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel regression models fit with GEE — wbgee","text":"","code":"wbgee(   formula,   data,   id = NULL,   wave = NULL,   model = \"w-b\",   cor.str = c(\"ar1\", \"exchangeable\", \"unstructured\"),   detrend = FALSE,   use.wave = FALSE,   wave.factor = FALSE,   min.waves = 2,   family = gaussian,   balance.correction = FALSE,   dt.random = TRUE,   dt.order = 1,   weights = NULL,   offset = NULL,   interaction.style = c(\"double-demean\", \"demean\", \"raw\"),   scale = FALSE,   scale.response = FALSE,   n.sd = 1,   calc.fit.stats = TRUE,   ... )"},{"path":"/reference/wbgee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel regression models fit with GEE — wbgee","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. model One \"w-b\", \"within\", \"\", \"contextual\". See details options. cor.str correlation structure accepted geepack::geeglm(). Default \"ar1\", useful alternative \"exchangeable\". \"unstructured\" may cause problems due computational complexity. detrend Adjust within-subject effects trends predictors? Default FALSE, research suggests better idea (see Curran Bauer (2011) reference). use.wave wave included predictor? Default FALSE. wave.factor wave variable treated unordered factor instead continuous? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. family Use specify GLM link families. Default gaussian, linear model. balance.correction Correct -subject effects unbalanced panels following procedure Curran Bauer (2011)? Default FALSE. dt.random detrending procedure performed random slope entity? Default TRUE short panels FALSE may better, fitting trend entities. dt.order detrending using detrend, order polynomial like specify relationship time predictors? Default 1, linear model. weights using weights, either name column data contains weights vector weights. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. interaction.style best way calculate interactions within models dispute. conventional way (\"demean\") first calculate product variables involved interaction variables means subtracted subtract mean product product term (see Schunk Perales (2017)). Giesselmann Schmidt-Catran (2020) show method carries -entity differences within models designed model . suggest alternate method (\"double-demean\") product term first calculated using de-meaned lower-order variables subject means subtracted product term. Another option simply use product term de-meaned variables (\"raw\"), Giesselmann Schmidt-Catran (2020) show method biases results towards zero effect. default \"double-demean\" emulating software goal, \"demean\" might preferred. scale TRUE, reports standardized regression coefficients scaling mean-centering input data (latter can changed via scale.argument). Default FALSE. scale.response response variable also rescaled? Default FALSE. n.sd many standard deviations divide standardization? Default 1, though prefer 2. calc.fit.stats Calculate fit statistics? Default TRUE, occasionally poor-fitting models might trip . ... Additional arguments provided geepack::geeglm().","code":""},{"path":"/reference/wbgee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel regression models fit with GEE — wbgee","text":"wbgee object, inherits geeglm.","code":""},{"path":"/reference/wbgee.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Panel regression models fit with GEE — wbgee","text":"See documentation wbm() many details formula syntax arguments.","code":""},{"path":"/reference/wbgee.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panel regression models fit with GEE — wbgee","text":"Allison, P. (2009). Fixed effects regression models. Thousand Oaks, CA: SAGE Publications. https://doi.org/10.4135/9781412993869.d33 Bell, ., & Jones, K. (2015). Explaining fixed effects: Random effects modeling time-series cross-sectional panel data. Political Science Research Methods, 3, 133–153. https://doi.org/10.1017/psrm.2014.7 Curran, P. J., & Bauer, D. J. (2011). disaggregation within-person -person effects longitudinal models change. Annual Review Psychology, 62, 583–619. https://doi.org/10.1146/annurev.psych.093008.100356 Giesselmann, M., & Schmidt-Catran, . W. (2020). Interactions fixed effects regression models. Sociological Methods & Research, 1–28. https://doi.org/10.1177/0049124120914934 McNeish, D. (2019). Effect partitioning cross-sectionally clustered data without multilevel models. Multivariate Behavioral Research, Advance online publication. https://doi.org/10.1080/00273171.2019.1602504 McNeish, D., Stapleton, L. M., & Silverman, R. D. (2016). unnecessary ubiquity hierarchical linear modeling. Psychological Methods, 22, 114-140. https://doi.org/10.1037/met0000078 Schunck, R., & Perales, F. (2017). Within- -cluster effects generalized linear mixed models: discussion approaches xthybrid command. Stata Journal, 17, 89–115. https://doi.org/10.1177/1536867X1701700106","code":""},{"path":"/reference/wbgee.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel regression models fit with GEE — wbgee","text":"Jacob . Long","code":""},{"path":"/reference/wbgee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel regression models fit with GEE — wbgee","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbgee(lwage ~ lag(union) + wks | blk + fem | blk * lag(union),          data = wages) summary(model) #> MODEL INFO: #> Entities: 595 #> Time periods: 2-7 #> Dependent variable: lwage #> Model type: Linear GEE #> Variance: ar1 (alpha = 0.85) #> Specification: within-between #>  #> MODEL FIT: #> QIC = 655.54, QICu = 653.36, CIC = 9.09 #>  #> WITHIN EFFECTS: #> ----------------------------------------------- #>                     Est.   S.E.   z val.      p #> ---------------- ------- ------ -------- ------ #> lag(union)          0.02   0.02     0.98   0.33 #> wks                -0.00   0.00    -0.82   0.41 #> ----------------------------------------------- #>  #> BETWEEN EFFECTS: #> ------------------------------------------------------ #>                            Est.   S.E.   z val.      p #> ----------------------- ------- ------ -------- ------ #> (Intercept)                6.61   0.24    27.12   0.00 #> imean(lag(union))         -0.01   0.03    -0.40   0.69 #> imean(wks)                 0.00   0.01     0.75   0.45 #> blk                       -0.23   0.06    -3.86   0.00 #> fem                       -0.43   0.05    -8.94   0.00 #> ------------------------------------------------------ #>  #> CROSS-LEVEL INTERACTIONS: #> --------------------------------------------------- #>                         Est.   S.E.   z val.      p #> -------------------- ------- ------ -------- ------ #> lag(union):blk         -0.11   0.05    -2.22   0.03 #> --------------------------------------------------- #>"},{"path":"/reference/wbgee_tidiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy methods for wbgee models — tidy.asym_gee","title":"Tidy methods for wbgee models — tidy.asym_gee","text":"panelr provides methods access wbgee data tidy format","code":""},{"path":"/reference/wbgee_tidiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy methods for wbgee models — tidy.asym_gee","text":"","code":"# S3 method for asym_gee tidy(x, conf.int = FALSE, conf.level = 0.95, ...)  # S3 method for wbgee tidy(x, conf.int = FALSE, conf.level = 0.95, ...)  # S3 method for wbgee glance(x, ...)"},{"path":"/reference/wbgee_tidiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy methods for wbgee models — tidy.asym_gee","text":"x wbgee object. conf.int Logical indicating whether include confidence interval tidied output. Defaults FALSE. conf.level confidence level use confidence interval conf.int = TRUE. Must strictly greater 0 less 1. Defaults 0.95, corresponds 95 percent confidence interval. ... Ignored","code":""},{"path":"/reference/wbgee_tidiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy methods for wbgee models — tidy.asym_gee","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbgee(lwage ~ lag(union) + wks, data = wages) if (requireNamespace(\"generics\")) {   generics::tidy(model) } #> # A tibble: 5 × 6 #>   group   estimate std.error statistic p.value term              #>   <chr>      <dbl>     <dbl>     <dbl>   <dbl> <chr>             #> 1 within   0.0145    0.0194      0.745  0.456  lag(union)        #> 2 within  -0.00119   0.00150    -0.790  0.430  wks               #> 3 between  6.16      0.277      22.2    0      (Intercept)       #> 4 between  0.0309    0.0335      0.923  0.356  imean(lag(union)) #> 5 between  0.0116    0.00576     2.01   0.0448 imean(wks)"},{"path":"/reference/wbm-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Within-Between Model (wbm) class — wbm-class","title":"Within-Between Model (wbm) class — wbm-class","text":"Models fit using wbm() return values class, inherits merMod-class.","code":""},{"path":"/reference/wbm-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Within-Between Model (wbm) class — wbm-class","text":"call_info list metadata arguments used. call actual function call. summ jtools::summ() object returned calling merMod object. summ_atts attributes summ object. orig_data data provided data argument function call.","code":""},{"path":"/reference/wbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel regression models fit via multilevel modeling — wbm","title":"Panel regression models fit via multilevel modeling — wbm","text":"Fit \"within-\" several regression variants panel data multilevel modeling framework.","code":""},{"path":"/reference/wbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel regression models fit via multilevel modeling — wbm","text":"","code":"wbm(   formula,   data,   id = NULL,   wave = NULL,   model = \"w-b\",   detrend = FALSE,   use.wave = FALSE,   wave.factor = FALSE,   min.waves = 2,   family = gaussian,   balance.correction = FALSE,   dt.random = TRUE,   dt.order = 1,   pR2 = TRUE,   pvals = TRUE,   t.df = \"Satterthwaite\",   weights = NULL,   offset = NULL,   interaction.style = c(\"double-demean\", \"demean\", \"raw\"),   scale = FALSE,   scale.response = FALSE,   n.sd = 1,   dt_random = dt.random,   dt_order = dt.order,   balance_correction = balance.correction,   ... )"},{"path":"/reference/wbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel regression models fit via multilevel modeling — wbm","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. model One \"w-b\", \"within\", \"\", \"contextual\". See details options. detrend Adjust within-subject effects trends predictors? Default FALSE, research suggests better idea (see Curran Bauer (2011) reference). use.wave wave included predictor? Default FALSE. wave.factor wave variable treated unordered factor instead continuous? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. family Use specify GLM link families. Default gaussian, linear model. balance.correction Correct -subject effects unbalanced panels following procedure Curran Bauer (2011)? Default FALSE. dt.random detrending procedure performed random slope entity? Default TRUE short panels FALSE may better, fitting trend entities. dt.order detrending using detrend, order polynomial like specify relationship time predictors? Default 1, linear model. pR2 Calculate pseudo R-squared? Default TRUE, cases may cause errors add computation time. pvals Calculate p values? Default TRUE complex linear models, may take long time compute using pbkrtest package. t.df linear models . User may choose method calculating degrees freedom t-tests. Default \"Satterthwaite\", may also choose \"Kenward-Roger\". Kenward-Roger standard errors/degrees freedom requires pbkrtest package. weights using weights, either name column data contains weights vector weights. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. interaction.style best way calculate interactions within models dispute. conventional way (\"demean\") first calculate product variables involved interaction variables means subtracted subtract mean product product term (see Schunk Perales (2017)). Giesselmann Schmidt-Catran (2020) show method carries -entity differences within models designed model . suggest alternate method (\"double-demean\") product term first calculated using de-meaned lower-order variables subject means subtracted product term. Another option simply use product term de-meaned variables (\"raw\"), Giesselmann Schmidt-Catran (2020) show method biases results towards zero effect. default \"double-demean\" emulating software goal, \"demean\" might preferred. scale TRUE, reports standardized regression coefficients scaling mean-centering input data (latter can changed via scale.argument). Default FALSE. scale.response response variable also rescaled? Default FALSE. n.sd many standard deviations divide standardization? Default 1, though prefer 2. dt_random Deprecated. Equivalent dt.random. dt_order Deprecated. Equivalent dt.order. balance_correction Deprecated. Equivalent balance.correction. ... Additional arguments provided lme4::lmer(), lme4::glmer(), lme4::glmer.nb().","code":""},{"path":"/reference/wbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel regression models fit via multilevel modeling — wbm","text":"wbm object, inherits merMod.","code":""},{"path":"/reference/wbm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Panel regression models fit via multilevel modeling — wbm","text":"Formula syntax within-models, multilevel panel models generally, distinguish time-varying time-invariant predictors. , sound, variables either measured repeatedly (every wave) case time-varying predictors case time-invariant predictors. need specify separately formula tell model variables expect change time . primary way via | operator. example, can look WageData included package. create model predicts logarithm individual's wages (lwage) union status (union), can change time, race (blk; dichotomized black non-black), change throughout period study. formula look like : lwage ~ union | blk Put time-varying variables first | time-invariant variables afterwards. can specify lags like lag(union) time-varying variables; 1 lag, include number: lag(union, 2). first | go time-invariant variables. Note put time-varying variable , get observed value rather one adjusted isolate within-entity effects. may also take time-varying variable --- say weeks worked (wks) --- use imean(wks) include individual's mean across waves predictor omitting per-wave measures. also place second |. can specify cross-level interactions (within-level interactions can specified well). wanted interaction term union blk --- see whether effect union status depended one's race --- specify formula way: lwage ~ union | blk | union * blk Another use post-second | section formula changing random effects specification. default, random intercept specified call lme4::lmer()/lme4::glmer(). like specify random slopes, include using typical lme4 syntax: lwage ~ union | blk | (union | id) can also include wave variable random effects term specify latent growth curve model: lwage ~ union | blk + t | (t | id) One last thing know: want use second | first, put 1 0 first, like : lwage ~ union | 1 | (union | id) course, time-invariant variables, need | operators . Models convenience, wbm heavy lifting specifying within-model correctly. side effect takes easy tweaks specify model slightly differently. can change behavior model argument. default, argument \"w-b\" (equivalently, \"within-\"). means, time-varying predictor, two types variables model. \"\" effect represented individual-level mean entity (e.g., respondent panel survey). \"within\" effect represented wave's measure individual-level mean subtracted. refer \"de-meaning.\" Thinking Hausman test framework --- within-model described --- expect within coefficients random effects model appropriate. contextual model similar (use argument \"contextual\"). situations, intuitive interpret. Empirically, difference compared within-specification contextual model subtract individual-level means wave-level measures. also changes interpretation -subject coefficients: contextual model, difference within effects. difference within effects, , coefficients 0. fit random effects model, use either \"\" \"random\". involves de-meaning individual-level means whatsoever. fit fixed effects model, use either \"within\" \"fixed\". -subjects terms formula ignored. time-varying variables de-meaned, individual-level mean included model.","code":""},{"path":"/reference/wbm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panel regression models fit via multilevel modeling — wbm","text":"Allison, P. (2009). Fixed effects regression models. Thousand Oaks, CA: SAGE Publications. https://doi.org/10.4135/9781412993869.d33 Bell, ., & Jones, K. (2015). Explaining fixed effects: Random effects modeling time-series cross-sectional panel data. Political Science Research Methods, 3, 133–153. https://doi.org/10.1017/psrm.2014.7 Curran, P. J., & Bauer, D. J. (2011). disaggregation within-person -person effects longitudinal models change. Annual Review Psychology, 62, 583–619. https://doi.org/10.1146/annurev.psych.093008.100356 Giesselmann, M., & Schmidt-Catran, . (2018). Interactions fixed effects regression models (Discussion Papers DIW Berlin . 1748). DIW Berlin, German Institute Economic Research. Retrieved https://ideas.repec.org/p/diw/diwwpp/dp1748.html Schunck, R., & Perales, F. (2017). Within- -cluster effects generalized linear mixed models: discussion approaches xthybrid command. Stata Journal, 17, 89–115. https://doi.org/10.1177/1536867X1701700106","code":""},{"path":[]},{"path":"/reference/wbm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panel regression models fit via multilevel modeling — wbm","text":"Jacob . Long","code":""},{"path":"/reference/wbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel regression models fit via multilevel modeling — wbm","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbm(lwage ~ lag(union) + wks | blk + fem | blk * lag(union),          data = wages) summary(model) #> MODEL INFO: #> Entities: 595 #> Time periods: 2-7 #> Dependent variable: lwage #> Model type: Linear mixed effects #> Specification: within-between #>  #> MODEL FIT: #> AIC = 1386.31, BIC = 1448.11 #> Pseudo-R² (fixed effects) = 0.13 #> Pseudo-R² (total) = 0.74 #> Entity ICC = 0.7 #>  #> WITHIN EFFECTS: #> --------------------------------------------------------- #>                     Est.   S.E.   t val.      d.f.      p #> ---------------- ------- ------ -------- --------- ------ #> lag(union)          0.06   0.03     2.28   2972.01   0.02 #> wks                -0.00   0.00    -1.51   2994.31   0.13 #> --------------------------------------------------------- #>  #> BETWEEN EFFECTS: #> --------------------------------------------------------------- #>                            Est.   S.E.   t val.     d.f.      p #> ----------------------- ------- ------ -------- -------- ------ #> (Intercept)                6.60   0.23    28.53   589.99   0.00 #> imean(lag(union))         -0.03   0.03    -0.80   589.98   0.42 #> imean(wks)                 0.00   0.00     0.91   589.99   0.36 #> blk                       -0.23   0.06    -3.85   589.98   0.00 #> fem                       -0.44   0.05    -8.89   589.98   0.00 #> --------------------------------------------------------------- #>  #> CROSS-LEVEL INTERACTIONS: #> ------------------------------------------------------------- #>                         Est.   S.E.   t val.      d.f.      p #> -------------------- ------- ------ -------- --------- ------ #> lag(union):blk         -0.13   0.12    -1.03   2971.99   0.31 #> ------------------------------------------------------------- #>  #> p values calculated using Satterthwaite d.f. #>   #> RANDOM EFFECTS: #> ------------------------------------ #>   Group      Parameter    Std. Dev.  #> ---------- ------------- ----------- #>     id      (Intercept)     0.354    #>  Residual                  0.2326    #> ------------------------------------"},{"path":"/reference/wbm_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian estimation of within-between models — wbm_stan","title":"Bayesian estimation of within-between models — wbm_stan","text":"near-equivalent wbm() instead uses Stan, via rstan brms.","code":""},{"path":"/reference/wbm_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian estimation of within-between models — wbm_stan","text":"","code":"wbm_stan(   formula,   data,   id = NULL,   wave = NULL,   model = \"w-b\",   detrend = FALSE,   use.wave = FALSE,   wave.factor = FALSE,   min.waves = 2,   model.cor = FALSE,   family = gaussian,   fit_model = TRUE,   balance.correction = FALSE,   dt.random = TRUE,   dt.order = 1,   chains = 3,   iter = 2000,   scale = FALSE,   save_ranef = FALSE,   interaction.style = c(\"double-demean\", \"demean\", \"raw\"),   weights = NULL,   offset = NULL,   ... )"},{"path":"/reference/wbm_stan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian estimation of within-between models — wbm_stan","text":"formula Model formula. See details crucial info panelr's formula syntax. data data, either panel_data object data.frame. id data panel_data object, name individual id column string. Otherwise, leave NULL, default. wave data panel_data object, name panel wave column string. Otherwise, leave NULL, default. model One \"w-b\", \"within\", \"\", \"contextual\". See details options. detrend Adjust within-subject effects trends predictors? Default FALSE, research suggests better idea (see Curran Bauer (2011) reference). use.wave wave included predictor? Default FALSE. wave.factor wave variable treated unordered factor instead continuous? Default FALSE. min.waves minimum number waves individual must participated included analysis? Default 2 valid number accepted. \"\" also acceptable want include complete panelists. model.cor want model residual autocorrelation? often appropriate linear models (family = gaussian). Default FALSE consistent wbm(), reduce runtime, avoid warnings non-linear models. family Use specify GLM link families. Default gaussian, linear model. fit_model Fit model? Default TRUE. FALSE, model code returned. balance.correction Correct -subject effects unbalanced panels following procedure Curran Bauer (2011)? Default FALSE. dt.random detrending procedure performed random slope entity? Default TRUE short panels FALSE may better, fitting trend entities. dt.order detrending using detrend, order polynomial like specify relationship time predictors? Default 1, linear model. chains many Markov chains used? Default 3, leave one unused thread typical dual-core machine. iter many iterations, including warmup? Default 2000, leaving 1000 per chain warmup. models data, may need quite . scale Standardize predictors? can speed model fit. Default FALSE. save_ranef Save random effect estimates? can crucial predicting model certain post-estimation procedures. hand, drastically increases size resulting model. Default FALSE. interaction.style best way calculate interactions within models dispute. conventional way (\"demean\") first calculate product variables involved interaction variables means subtracted subtract mean product product term (see Schunk Perales (2017)). Giesselmann Schmidt-Catran (2020) show method carries -entity differences within models designed model . suggest alternate method (\"double-demean\") product term first calculated using de-meaned lower-order variables subject means subtracted product term. Another option simply use product term de-meaned variables (\"raw\"), Giesselmann Schmidt-Catran (2020) show method biases results towards zero effect. default \"double-demean\" emulating software goal, \"demean\" might preferred. weights using weights, either name column data contains weights vector weights. offset can used specify priori known     component included linear predictor     fitting. NULL numeric vector length     equal number cases.  One offset     terms can included formula instead well,     one specified sum used.  See model.offset. ... Additional arguments passed brms::brm(). can include specification priors.","code":""},{"path":"/reference/wbm_stan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian estimation of within-between models — wbm_stan","text":"wbm_stan object, list containing model object brm model stan_code object model code. fit_model = FALSE, instead list returned containing stan_code object stan_data object, leaving tools need run model using rstan.","code":""},{"path":"/reference/wbm_stan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian estimation of within-between models — wbm_stan","text":"See wbm() details formula syntax, model types, stuff.","code":""},{"path":[]},{"path":"/reference/wbm_stan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian estimation of within-between models — wbm_stan","text":"Jacob . Long","code":""},{"path":"/reference/wbm_stan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian estimation of within-between models — wbm_stan","text":"","code":"if (FALSE) {  data(\"WageData\")  wages <- panel_data(WageData, id = id, wave = t)  model <- wbm_stan(lwage ~ lag(union) + wks | blk + fem | blk * lag(union),            data = wages, chains = 1, iter = 2000)  summary(model) }"},{"path":"/reference/wbm_tidiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy methods for wbm models — tidy.wbm","title":"Tidy methods for wbm models — tidy.wbm","text":"panelr provides methods access wbm data tidy format","code":""},{"path":"/reference/wbm_tidiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy methods for wbm models — tidy.wbm","text":"","code":"# S3 method for wbm tidy(   x,   conf.int = FALSE,   conf.level = 0.95,   effects = c(\"fixed\", \"ran_pars\"),   conf.method = \"Wald\",   ran_prefix = NULL,   ... )  # S3 method for wbm glance(x, ...)  # S3 method for summ.wbm glance(x, ...)  # S3 method for summ.wbm tidy(x, ...)"},{"path":"/reference/wbm_tidiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy methods for wbm models — tidy.wbm","text":"x object class merMod, lmer, glmer, nlmer conf.int whether include confidence interval conf.level confidence level CI effects character vector including one \"fixed\" (fixed-effect parameters); \"ran_pars\" (variances covariances standard deviations correlations random effect terms); \"ran_vals\" (conditional modes/BLUPs/latent variable estimates); \"ran_coefs\" (predicted parameter values group, returned coef.merMod. conf.method method computing confidence intervals (see lme4::confint.merMod) ran_prefix length-2 character vector specifying strings use prefixes self- (variance/standard deviation) cross- (covariance/correlation) random effects terms ... Additional arguments (passed confint.merMod tidy; augment_columns augment; ignored glance)","code":""},{"path":"/reference/wbm_tidiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy methods for wbm models — tidy.wbm","text":"","code":"data(\"WageData\") wages <- panel_data(WageData, id = id, wave = t) model <- wbm(lwage ~ lag(union) + wks, data = wages) if (requireNamespace(\"broom.mixed\")) {   broom.mixed::tidy(model) } #> Loading required namespace: broom.mixed #> # A tibble: 7 × 6 #>   group    estimate std.error statistic   p.value term              #>   <chr>       <dbl>     <dbl>     <dbl>     <dbl> <chr>             #> 1 within    0.0528    0.0250      2.11   3.50e- 2 lag(union)        #> 2 within   -0.00166   0.00108    -1.54   1.25e- 1 wks               #> 3 between   6.14      0.247      24.8    9.32e-94 (Intercept)       #> 4 between   0.0168    0.0374      0.449  6.53e- 1 imean(lag(union)) #> 5 between   0.0125    0.00518     2.41   1.62e- 2 imean(wks)        #> 6 id        0.388    NA          NA     NA        sd__(Intercept)   #> 7 Residual  0.233    NA          NA     NA        sd__Observation"},{"path":"/reference/widen_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert long panel data to wide format — widen_panel","title":"Convert long panel data to wide format — widen_panel","text":"function takes panel_data() objects input converts wide format use SEM situations format needed.","code":""},{"path":"/reference/widen_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert long panel data to wide format — widen_panel","text":"","code":"widen_panel(data, separator = \"_\", ignore.attributes = FALSE, varying = NULL)"},{"path":"/reference/widen_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert long panel data to wide format — widen_panel","text":"data panel_data frame. separator variables labeled wave number, separate variable name wave number? default, \"_\". words, variable named var var_1, var_2, wide data frame. ignore.attributes data created long_panel(), stores information variables vary time constants. Sometimes, though, information accurate ( based wide data's variable names) may want force function check based actual values variables. varying want skip checks whether variables varying specify , done stats::reshape(), can supply vector .","code":""},{"path":"/reference/widen_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert long panel data to wide format — widen_panel","text":"data.frame 1 row per respondent.","code":""},{"path":"/reference/widen_panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert long panel data to wide format — widen_panel","text":"wrapper stats::reshape(), renowned pretty confusing use. function automatically detects variables vary time , appending wave information constants.","code":""},{"path":[]},{"path":"/reference/widen_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert long panel data to wide format — widen_panel","text":"","code":"wages <- panel_data(WageData, id = id, wave = t) wide_wages <- widen_panel(wages)"},{"path":"/news/index.html","id":"panelr-077","dir":"Changelog","previous_headings":"","what":"panelr 0.7.7","title":"panelr 0.7.7","text":"Includes back-end changes compatibility recent updates skimr, dplyr, purrr. Users notice change behavior . users want long_panel() check whether values varying, longer performs series operations rendered unnecessary. slightly speed performance check.varying = FALSE. (#44) small performance improvement using long_panel() are_varying() functions.","code":""},{"path":"/news/index.html","id":"panelr-076","dir":"Changelog","previous_headings":"","what":"panelr 0.7.6","title":"panelr 0.7.6","text":"CRAN release: 2021-12-17 Compatibility update upcoming changes clubSandwich. Thanks James Pustejovksy submitting necessary fixes.","code":""},{"path":"/news/index.html","id":"panelr-075","dir":"Changelog","previous_headings":"","what":"panelr 0.7.5","title":"panelr 0.7.5","text":"CRAN release: 2021-01-18 Re-release: changes, panelr removed CRAN one packages depended also removed. package now back CRAN, panelr return well.","code":""},{"path":"/news/index.html","id":"panelr-074","dir":"Changelog","previous_headings":"","what":"panelr 0.7.4","title":"panelr 0.7.4","text":"CRAN release: 2020-09-24 Re-release: changes, panelr removed CRAN one packages depended also removed. package now back CRAN, panelr return well.","code":""},{"path":"/news/index.html","id":"panelr-073","dir":"Changelog","previous_headings":"","what":"panelr 0.7.3","title":"panelr 0.7.3","text":"CRAN release: 2020-06-23 Bugfixes: Fixes several problems induced recent dplyr updates. (#28, #29) Allow dates serve wave variable. Fixes issues related upcoming update broom package. (#30) Updated citation Giesselmann Schmidt-Catran’s (2020) article, longer just working paper. Thanks Marco letting know.","code":""},{"path":"/news/index.html","id":"panelr-072","dir":"Changelog","previous_headings":"","what":"panelr 0.7.2","title":"panelr 0.7.2","text":"CRAN release: 2020-03-08 Bugfix: long_panel() now handles numeric waves correctly input data unbalanced. Fixed bug related changes brms package’s interface autocorrelated errors. Eliminated warning update tidyr package.","code":""},{"path":"/news/index.html","id":"panelr-071","dir":"Changelog","previous_headings":"","what":"panelr 0.7.1","title":"panelr 0.7.1","text":"CRAN release: 2019-07-12 Bugfixes: Multi-part random effects specification supported wbm() (#14; thanks @strengejacke). Improved support labelled data (#12). Conversion pdata.frame panel_data fixed. Added interaction.style argument make_wb_data(). behavior predict.wbm() predict.wbgee() improved. Notably, DV need included newdata ID variable required necessary. Fixed error custom random effect interaction terms (#18).","code":""},{"path":"/news/index.html","id":"panelr-070","dir":"Changelog","previous_headings":"","what":"panelr 0.7.0","title":"panelr 0.7.0","text":"CRAN release: 2019-05-16 Lots new stuff! CRAN coming soon well. wbgee() works just like wbm(), except uses GEE (via geepack package) estimation. can give trustworthy results circumstances much less likely convergence problems. fdm() estimates first differences models via GLS (nlme package). asym() estimates linear asymmetric effects model described Allison (2019) via first differences. asym_gee() estimates similar asymmetric effects model one using cumulative differences described Allison (2019), using GEE rather conditional logit. heise() produces stability reliability estimates via popular method described Heise (1969). Two new datasets added (nlsy teen_poverty). new vignette gives relatively detailed discussion models implemented package.","code":""},{"path":"/news/index.html","id":"panelr-060","dir":"Changelog","previous_headings":"","what":"panelr 0.6.0","title":"panelr 0.6.0","text":"New stuff: * now vignette walk users process reshaping panel data. * now sophisticated handling interactions time-varying variables line recommendations Giesselmann Schmidt-Catran (2018). * are_varying() can now also assess individual-level variation, using type = \"individual\" argument can instead assess variables like age vary time change equally every case. * wbm() can now handle transformed dependent variables (e.g. log(y)). Transformations right-hand side equation always supported. * panel_data objects now quite bit difficult break accidentally subsetting ID wave columns existence. Now, subsetting via data[], select() implicitly via transmute() never remove ID wave columns. also warned arrange() panel_data object since generally break lag() functions. * panel_data objects now store information periods data, can access get_periods() function. example, waves data numbers 1 7, ’s ’ll get. useful periods irregular, waves years biennial survey. Bugfixes: * way lagged predictors mean-centered now consistent conventional fixed effects estimator. Results may change non-trivially due change. Previously, mean used mean-centering based waves data, now based waves except number lags away latest wave. * Detrending also tweaked work comparably changes mean-centering. * now can add wave variable wbm() formula without running cryptic errors. * Fixed problem transformed variables (like lag(x)) included user-specified random effect. Pre-0.5.0, included surrounded backticks, now hack unnecessary work. * make_wb_data() now updated work internal updates introduced 0.5.0. * long_panel() never really working right source data’s labels located beginning (.e., label_location = \"beginning\"). now much robust. * wbm()’s wave.factor argument become non-functional time now fixed.","code":""},{"path":"/news/index.html","id":"panelr-050","dir":"Changelog","previous_headings":"","what":"panelr 0.5.0","title":"panelr 0.5.0","text":"Starting polish things CRAN. Key changes: panel_data frames now always place id wave columns first (order). wbm() can now handle time-varying factors appropriately. note uses treatment contrasts, however. (#8) new function, line_plot(), help explore trends data. ’s little rough around edges now. Summaries wbm objects now bit streamlined nice-looking. now tidy() glance() methods (broom package) wbm objects. (#4) as_panel_data() alias panel_data() supplying data frame S3 method otherwise. can used convert pdata.frame objects plm package panel_data. Formulas provided wbm() now converted Formula objects make working multiple parts easier (see Formula package info). now summary method panel_data frames, works best skimr installed. can use dplyr::select() style syntax select variables want describe choose get descriptives wave /entity.","code":""},{"path":"/news/index.html","id":"panelr-041","dir":"Changelog","previous_headings":"","what":"panelr 0.4.1","title":"panelr 0.4.1","text":"version switched default degrees freedom calculation linear wbm models Satterthwaite, computationally efficient less prone breaking R. also calculated per-variable basis. Kenward-Roger standard errors degrees freedom can requested t.df = \"Kenward-Roger\" argument.","code":""},{"path":"/news/index.html","id":"panelr-040","dir":"Changelog","previous_headings":"","what":"panelr 0.4.0","title":"panelr 0.4.0","text":"version includes major --hood changes, converting S3 object representation S4. allows wbm objects formally extensions merMod objects, meaning method apply wbm isn’t formally implemented fall back merMod implementation. panel_data class longer hardcodes id wave variables “id” “wave”. Instead, remain whatever named panelr functions simply know variables special ones. new function, make_wb_data, allows users data prepping wbm internally without use modeling choices made wbm.","code":""},{"path":"/news/index.html","id":"panelr-034","dir":"Changelog","previous_headings":"","what":"panelr 0.3.4","title":"panelr 0.3.4","text":"series helper functions added make wbm objects behave like regular model objects. Now update, formula, terms, model.frame, coef, predict, several defined wbm. summary function wbm refined minor bugs squished.","code":""},{"path":"/news/index.html","id":"panelr-033","dir":"Changelog","previous_headings":"","what":"panelr 0.3.3","title":"panelr 0.3.3","text":"tweaks widen_panel, giving users option opt feature introduced 0.3.2 stores data varying constant variables long_panel. Since poor data labeling original wide data can cause stored attributes wrong, users can use ignore.attributes = TRUE widen_panel force checking varying variables are_varying. Users can now also supply vector varying variables, similar reshape base R.","code":""},{"path":"/news/index.html","id":"panelr-032","dir":"Changelog","previous_headings":"","what":"panelr 0.3.2","title":"panelr 0.3.2","text":"small update adds enhancement long_panel widen_panel. start wide data, convert long format, want convert back wide, panel_data object long format cache information variables drastically speed widen_panel run . Additionally, are_varying sped 50%, though slows widen_panel data many variables.","code":""},{"path":"/news/index.html","id":"panelr-031","dir":"Changelog","previous_headings":"","what":"panelr 0.3.1","title":"panelr 0.3.1","text":"Tiny bugfixes: long_panel error supplied tibble rather base data.frame. namespace issues related magrittr operators used internally.","code":""},{"path":"/news/index.html","id":"panelr-030","dir":"Changelog","previous_headings":"","what":"panelr 0.3.0","title":"panelr 0.3.0","text":"New functions: widen_panel converts panel_data object wide format, one row per entity. can useful SEM analysis things. long_panel much difficult thing, convert wide-formatted data conventional long panel data format. contains several means parsing variable names wide formatted data produce sensible long data frame time-variant variables accounted properly. Unlike reshape, can deal unbalanced data. are_varying function can let check whether variables long-formatted panel data vary time .","code":""},{"path":"/news/index.html","id":"panelr-020","dir":"Changelog","previous_headings":"","what":"panelr 0.2.0","title":"panelr 0.2.0","text":"New feature: detrend balance_correction arguments added wbm implement procedures described Curran Bauer (2011). , respectively, account -time trends predictors correcting -subject effects panels unbalanced.","code":""},{"path":"/news/index.html","id":"panelr-011","dir":"Changelog","previous_headings":"","what":"panelr 0.1.1","title":"panelr 0.1.1","text":"Added NEWS.md file track changes package. Added infrastructure CRAN submission. Improved documentation added references. Added README.","code":""},{"path":"/news/index.html","id":"panelr-010","dir":"Changelog","previous_headings":"","what":"panelr 0.1.0","title":"panelr 0.1.0","text":"Got things working can shared outside maintainer’s computers. Added WageData example, documentation, etc. Unit testing automated tests Travis Appveyor.","code":""}]
